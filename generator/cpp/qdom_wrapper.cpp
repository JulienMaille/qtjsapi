
  // Auto generated
  
  // include header:
  //#include "qdomwrapper.h"
  //#include "header_cpp.h"
  
    #include "qdom_wrapper.h"

  
      // list of registered base casters for this wrapper class:
      QList<RJSBasecaster_QDomImplementation*> QDomImplementation_Wrapper::basecasters_QDomImplementation;
    
    // static functions implementation in singleton wrapper:
    
    // Class: QDomImplementation
    // Function: invalidDataPolicy
    // Source: 
    // Static: true
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomImplementation_WrapperSingleton::invalidDataPolicy
              (
                
              ) 
              
              {
                
      {
    

    // call function:
    
            // static member function:
            // call base class static function:
            QDomImplementation::InvalidDataPolicy res = 
                
                // call static member function:
                QDomImplementation::invalidDataPolicy(
              
            );
          
            // return type: QDomImplementation::InvalidDataPolicy

            return RJSHelper::cpp2js_QDomImplementation_InvalidDataPolicy(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for invalidDataPolicy";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomImplementation
    // Function: setInvalidDataPolicy
    // Source: 
    // Static: true
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomImplementation_WrapperSingleton::setInvalidDataPolicy
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomImplementation_InvalidDataPolicy(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: policy (QDomImplementation::InvalidDataPolicy)
  
QDomImplementation::InvalidDataPolicy a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomImplementation_InvalidDataPolicy(handler, a1);
        

    // call function:
    
            // static member function:
            // call base class static function:
            
                // call static member function:
                QDomImplementation::setInvalidDataPolicy(
              a1_cpp
    
            );
          
            return QJSValue();
          
  }

                  qWarning() << "no matching function variant found for setInvalidDataPolicy";
                  handler.trace();
                  return QJSValue();
                
              }
            
    void QDomImplementation_Wrapper::init(RJSApi& handler) {
      
        //qmlRegisterType<QDomImplementation_Wrapper>("org.qcad", 1, 0, "QDomImplementation_Wrapper");
        qmlRegisterInterface<QDomImplementation_Wrapper>("QDomImplementation_Wrapper", 1);
      

      QJSEngine* engine = handler.getEngine();

      
          // make type scriptable for JS files:
          QJSValue global = engine->globalObject();
          RJSType_QDomImplementation* t = new RJSType_QDomImplementation();
          global.setProperty("RJSType_QDomImplementation", engine->newQObject(t));

          // initialize ID for this type:
          RJSType_QDomImplementation::getIdStatic();

          

      // wrapper:
      QJSValue mo = engine->newQMetaObject(&QDomImplementation_Wrapper::staticMetaObject);
      engine->globalObject().setProperty("QDomImplementation_Wrapper", mo);


      
        // JS base class:
        //QJSValue mob = engine->newQMetaObject(&QDomImplementation_BaseJs::staticMetaObject);
        //engine->globalObject().setProperty("QDomImplementation_BaseJs", mob);
      
        // singleton wrapper:
        QJSValue mos = engine->newQMetaObject(&QDomImplementation_WrapperSingleton::staticMetaObject);
        engine->globalObject().setProperty("QDomImplementation_WrapperSingleton", mos);

        // create instance of singleton wrapper for static functions:
        QDomImplementation_WrapperSingleton * s = new QDomImplementation_WrapperSingleton(handler);
        engine->globalObject().setProperty("QDomImplementation_WrapperSingletonInstance", engine->newQObject(s));
        QJSEngine::setObjectOwnership(s, QJSEngine::CppOwnership);
      
      QString fileName = ":generator/js/QDomImplementation.js";
      QFile scriptFile(fileName);
      if (!scriptFile.open(QIODevice::ReadOnly)) {
        qWarning() << "JS script wrapper file not found:" << fileName;
        return;
      }
      QTextStream stream(&scriptFile);
      QString contents = stream.readAll();
      scriptFile.close();

      qDebug() << "Evaluating file: " << fileName;
      QJSValue result = engine->evaluate(contents, fileName);
      if (result.isError()) {
          qWarning()
              << "Uncaught exception at line"
              << result.property("lineNumber").toInt()
              << ":" << result.toString();
      }
    }
  
    /*
    // special constructor used as prototype:
    QDomImplementation_Wrapper::QDomImplementation_Wrapper(QJSEngine* e) : wrapped(nullptr), wrappedCreated(false) {
            //setObjectName("QDomImplementation_Wrapper");
            setEngine(e);

            // signal forwarding:
            //initConnections();
          }
        
    */

    
      // special constructor to wrap existing object:
      QDomImplementation_Wrapper::QDomImplementation_Wrapper(RJSApi& h, QDomImplementation* o, bool wrappedCreated) : RJSWrapperObj(h), wrapped(o), wrappedCreated(wrappedCreated) {
              //RDebug::incCounter(QString("QDomImplementation_Wrapper_") + handler.getEngine()->objectName());
              //RDebug::incCounter(QString("QDomImplementation_Wrapper"));
              //setObjectName("QDomImplementation_Wrapper");
              //setHandler(h);

              // signal forwarding:
              initConnections();
            }
          

      // destructor:
      QDomImplementation_Wrapper::~QDomImplementation_Wrapper() {
            //RDebug::decCounter(QString("QDomImplementation_Wrapper_") + handler.getEngine()->objectName());
            //RDebug::decCounter(QString("QDomImplementation_Wrapper"));

            //qDebug() << "QDomImplementation_Wrapper::~QDomImplementation_Wrapper";

            // tell script handler that this wrapper no longer exists:
            handler.unregisterWrapper(*this);

            
            if (wrappedCreated) {
              
                  // delete wrapped object (copyable, JS ownership)
                  //qDebug() << "deleting instance of QDomImplementation";
                  delete wrapped;
                
            }
            
          }
        
    // initialization of signal forwarding
    
        void QDomImplementation_Wrapper::initConnections() {

          //setObjectName("QDomImplementation_Wrapper");

          // tell script handler that this wrapper needs to be deleted if the engine is deleted:
          handler.registerWrapper(*this);

          
              // wrapped object is not a QObject:
              // wrapper is managed by script engine:
              //QJSEngine::setObjectOwnership(this, QJSEngine::CppOwnership);
            

          if (hasWrapped()) {
            
            // set up signal forwarding:
            
          }
        }
      

  // constructors:
  
    // Class: QDomImplementation
    // Function: 
    // Source: 
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1
QDomImplementation_Wrapper::QDomImplementation_Wrapper
                
              (
                
                  // RJSApi:
                  QObject* h
                  ,
  const QJSValue& 
  a1
              ) 
              
                : RJSWrapperObj(*(RJSApi*)h)
              
              {
                
                  //RDebug::incCounter(QString("QDomImplementation_Wrapper_") + handler.getEngine()->objectName());
                  //RDebug::incCounter(QString("QDomImplementation_Wrapper"));
                
      // check parameter types:
      if (
        RJSHelper::is_QDomImplementation(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp:  (QDomImplementation)
  
QDomImplementation a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomImplementation(handler, a1);
        

    // call function:
    
        // construct wrapper:

        
            wrapped = new QDomImplementation(
                a1_cpp
    
            );
            wrappedCreated = true;
          

        // signal forwarding:
        // TODO
        //connect(wrapped, SIGNAL(triggered(bool)), this, SLOT(triggeredEmitter(bool)));
        initConnections();
        return;

      
  }

      {
    

    // call function:
    
        // construct wrapper:

        
            wrapped = new QDomImplementation(
                
            );
            wrappedCreated = true;
          

        // signal forwarding:
        // TODO
        //connect(wrapped, SIGNAL(triggered(bool)), this, SLOT(triggeredEmitter(bool)));
        initConnections();
        return;

      
  }

                    // no constructor without arguments defined
                    // allow constructor for prototype objects without args:
                    if (
                      a1.isUndefined()
  
                      ) {
                      wrapped = nullptr;
                      wrappedCreated = false;
                      return;
                    }
                  

                  qWarning() << "no matching constructor variant found for QDomImplementation";
                  wrapped = nullptr;
                  wrappedCreated = false;
                  handler.trace();
                
              }
            

    // non-static functions:
    
    // Class: QDomImplementation
    // Function: operator_assign
    // Source: 
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomImplementation_Wrapper::operator_assign
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomImplementation(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp:  (QDomImplementation)
  
QDomImplementation a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomImplementation(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomImplementation* w = getWrapped();
                
                      // return type is reference:
                      // use pointer instead 3:
                      QDomImplementation* res =
                    &
                w->operator=(
                  a1_cpp
    
                );
              
            // return type: QDomImplementation&

            return RJSHelper::cpp2js_QDomImplementation(
              handler, 
              // non-copyable: false
                  // return type is reference, type is copyable:
                  // convert pointer back to reference:
                  *res
                
              );
            
  }

                  qWarning() << "no matching function variant found for operator_assign";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomImplementation
    // Function: operator_equal
    // Source: 
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomImplementation_Wrapper::operator_equal
              (
                
  const QJSValue& 
  a1
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomImplementation(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp:  (QDomImplementation)
  
QDomImplementation a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomImplementation(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomImplementation* w = getWrapped();
                bool res = 
                    
                w->operator==(
                  a1_cpp
    
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for operator_equal";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomImplementation
    // Function: operator_unequal
    // Source: 
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomImplementation_Wrapper::operator_unequal
              (
                
  const QJSValue& 
  a1
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomImplementation(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp:  (QDomImplementation)
  
QDomImplementation a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomImplementation(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomImplementation* w = getWrapped();
                bool res = 
                    
                w->operator!=(
                  a1_cpp
    
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for operator_unequal";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomImplementation
    // Function: hasFeature
    // Source: 
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomImplementation_Wrapper::hasFeature
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

   && RJSHelper::is_QString(handler, a2
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: feature (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        
  // convert js parameter to cpp: version (QString)
  
QString a2_cpp;

      a2_cpp = RJSHelper::js2cpp_QString(handler, a2);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomImplementation* w = getWrapped();
                bool res = 
                    
                w->hasFeature(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for hasFeature";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomImplementation
    // Function: createDocumentType
    // Source: 
    // Static: false
    // Parameters: 3
    // preceding Parameters: -1

                QJSValue 
              QDomImplementation_Wrapper::createDocumentType
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2, 
  const QJSValue& 
  a3
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

   && RJSHelper::is_QString(handler, a2
  )

   && RJSHelper::is_QString(handler, a3
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: qName (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        
  // convert js parameter to cpp: publicId (QString)
  
QString a2_cpp;

      a2_cpp = RJSHelper::js2cpp_QString(handler, a2);
        
  // convert js parameter to cpp: systemId (QString)
  
QString a3_cpp;

      a3_cpp = RJSHelper::js2cpp_QString(handler, a3);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomImplementation* w = getWrapped();
                QDomDocumentType res = 
                    
                w->createDocumentType(
                  a1_cpp
    , a2_cpp
    , a3_cpp
    
                );
              
            // return type: QDomDocumentType

            return RJSHelper::cpp2js_QDomDocumentType(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for createDocumentType";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomImplementation
    // Function: createDocument
    // Source: 
    // Static: false
    // Parameters: 3
    // preceding Parameters: -1

                QJSValue 
              QDomImplementation_Wrapper::createDocument
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2, 
  const QJSValue& 
  a3
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

   && RJSHelper::is_QString(handler, a2
  )

   && RJSHelper::is_QDomDocumentType(handler, a3
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: nsURI (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        
  // convert js parameter to cpp: qName (QString)
  
QString a2_cpp;

      a2_cpp = RJSHelper::js2cpp_QString(handler, a2);
        
  // convert js parameter to cpp: doctype (QDomDocumentType)
  
QDomDocumentType a3_cpp;

      a3_cpp = RJSHelper::js2cpp_QDomDocumentType(handler, a3);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomImplementation* w = getWrapped();
                QDomDocument res = 
                    
                w->createDocument(
                  a1_cpp
    , a2_cpp
    , a3_cpp
    
                );
              
            // return type: QDomDocument

            return RJSHelper::cpp2js_QDomDocument(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for createDocument";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomImplementation
    // Function: isNull
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomImplementation_Wrapper::isNull
              (
                
              ) 
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomImplementation* w = getWrapped();
                bool res = 
                    
                w->isNull(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isNull";
                  handler.trace();
                  return QJSValue();
                
              }
            

  // member functions for static properties, forward to static function
  


  // protected overwritten functions / events and their public invokable counterparts:
  
    #include "qdom_wrapper.h"

  
      // list of registered base casters for this wrapper class:
      QList<RJSBasecaster_QDomNode*> QDomNode_Wrapper::basecasters_QDomNode;
    
    // static functions implementation in singleton wrapper:
    
    void QDomNode_Wrapper::init(RJSApi& handler) {
      
        //qmlRegisterType<QDomNode_Wrapper>("org.qcad", 1, 0, "QDomNode_Wrapper");
        qmlRegisterInterface<QDomNode_Wrapper>("QDomNode_Wrapper", 1);
      

      QJSEngine* engine = handler.getEngine();

      
          // make type scriptable for JS files:
          QJSValue global = engine->globalObject();
          RJSType_QDomNode* t = new RJSType_QDomNode();
          global.setProperty("RJSType_QDomNode", engine->newQObject(t));

          // initialize ID for this type:
          RJSType_QDomNode::getIdStatic();

          

      // wrapper:
      QJSValue mo = engine->newQMetaObject(&QDomNode_Wrapper::staticMetaObject);
      engine->globalObject().setProperty("QDomNode_Wrapper", mo);


      
        // JS base class:
        //QJSValue mob = engine->newQMetaObject(&QDomNode_BaseJs::staticMetaObject);
        //engine->globalObject().setProperty("QDomNode_BaseJs", mob);
      
      QString fileName = ":generator/js/QDomNode.js";
      QFile scriptFile(fileName);
      if (!scriptFile.open(QIODevice::ReadOnly)) {
        qWarning() << "JS script wrapper file not found:" << fileName;
        return;
      }
      QTextStream stream(&scriptFile);
      QString contents = stream.readAll();
      scriptFile.close();

      qDebug() << "Evaluating file: " << fileName;
      QJSValue result = engine->evaluate(contents, fileName);
      if (result.isError()) {
          qWarning()
              << "Uncaught exception at line"
              << result.property("lineNumber").toInt()
              << ":" << result.toString();
      }
    }
  
    /*
    // special constructor used as prototype:
    QDomNode_Wrapper::QDomNode_Wrapper(QJSEngine* e) : wrapped(nullptr), wrappedCreated(false) {
            //setObjectName("QDomNode_Wrapper");
            setEngine(e);

            // signal forwarding:
            //initConnections();
          }
        
    */

    
      // special constructor to wrap existing object:
      QDomNode_Wrapper::QDomNode_Wrapper(RJSApi& h, QDomNode* o, bool wrappedCreated) : RJSWrapperObj(h), wrapped(o), wrappedCreated(wrappedCreated) {
              //RDebug::incCounter(QString("QDomNode_Wrapper_") + handler.getEngine()->objectName());
              //RDebug::incCounter(QString("QDomNode_Wrapper"));
              //setObjectName("QDomNode_Wrapper");
              //setHandler(h);

              // signal forwarding:
              initConnections();
            }
          

      // destructor:
      QDomNode_Wrapper::~QDomNode_Wrapper() {
            //RDebug::decCounter(QString("QDomNode_Wrapper_") + handler.getEngine()->objectName());
            //RDebug::decCounter(QString("QDomNode_Wrapper"));

            //qDebug() << "QDomNode_Wrapper::~QDomNode_Wrapper";

            // tell script handler that this wrapper no longer exists:
            handler.unregisterWrapper(*this);

            
            if (wrappedCreated) {
              
                  // delete wrapped object (copyable, JS ownership)
                  //qDebug() << "deleting instance of QDomNode";
                  delete wrapped;
                
            }
            
          }
        
    // initialization of signal forwarding
    
        void QDomNode_Wrapper::initConnections() {

          //setObjectName("QDomNode_Wrapper");

          // tell script handler that this wrapper needs to be deleted if the engine is deleted:
          handler.registerWrapper(*this);

          
              // wrapped object is not a QObject:
              // wrapper is managed by script engine:
              //QJSEngine::setObjectOwnership(this, QJSEngine::CppOwnership);
            

          if (hasWrapped()) {
            
            // set up signal forwarding:
            
          }
        }
      

  // constructors:
  
    // Class: QDomNode
    // Function: 
    // Source: 
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1
QDomNode_Wrapper::QDomNode_Wrapper
                
              (
                
                  // RJSApi:
                  QObject* h
                  ,
  const QJSValue& 
  a1
              ) 
              
                : RJSWrapperObj(*(RJSApi*)h)
              
              {
                
                  //RDebug::incCounter(QString("QDomNode_Wrapper_") + handler.getEngine()->objectName());
                  //RDebug::incCounter(QString("QDomNode_Wrapper"));
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp:  (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        

    // call function:
    
        // construct wrapper:

        
            wrapped = new QDomNode(
                a1_cpp
    
            );
            wrappedCreated = true;
          

        // signal forwarding:
        // TODO
        //connect(wrapped, SIGNAL(triggered(bool)), this, SLOT(triggeredEmitter(bool)));
        initConnections();
        return;

      
  }

      {
    

    // call function:
    
        // construct wrapper:

        
            wrapped = new QDomNode(
                
            );
            wrappedCreated = true;
          

        // signal forwarding:
        // TODO
        //connect(wrapped, SIGNAL(triggered(bool)), this, SLOT(triggeredEmitter(bool)));
        initConnections();
        return;

      
  }

                    // no constructor without arguments defined
                    // allow constructor for prototype objects without args:
                    if (
                      a1.isUndefined()
  
                      ) {
                      wrapped = nullptr;
                      wrappedCreated = false;
                      return;
                    }
                  

                  qWarning() << "no matching constructor variant found for QDomNode";
                  wrapped = nullptr;
                  wrappedCreated = false;
                  handler.trace();
                
              }
            

    // non-static functions:
    
    // Class: QDomNode
    // Function: operator_assign
    // Source: 
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomNode_Wrapper::operator_assign
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp:  (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNode* w = getWrapped();
                
                      // return type is reference:
                      // use pointer instead 3:
                      QDomNode* res =
                    &
                w->operator=(
                  a1_cpp
    
                );
              
            // return type: QDomNode&

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  // return type is reference, type is copyable:
                  // convert pointer back to reference:
                  *res
                
              );
            
  }

                  qWarning() << "no matching function variant found for operator_assign";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNode
    // Function: operator_equal
    // Source: 
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomNode_Wrapper::operator_equal
              (
                
  const QJSValue& 
  a1
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp:  (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNode* w = getWrapped();
                bool res = 
                    
                w->operator==(
                  a1_cpp
    
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for operator_equal";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNode
    // Function: operator_unequal
    // Source: 
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomNode_Wrapper::operator_unequal
              (
                
  const QJSValue& 
  a1
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp:  (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNode* w = getWrapped();
                bool res = 
                    
                w->operator!=(
                  a1_cpp
    
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for operator_unequal";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNode
    // Function: insertBefore
    // Source: 
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomNode_Wrapper::insertBefore
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

   && RJSHelper::is_QDomNode(handler, a2
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: newChild (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        
  // convert js parameter to cpp: refChild (QDomNode)
  
QDomNode a2_cpp;

      a2_cpp = RJSHelper::js2cpp_QDomNode(handler, a2);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNode* w = getWrapped();
                QDomNode res = 
                    
                w->insertBefore(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for insertBefore";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNode
    // Function: insertAfter
    // Source: 
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomNode_Wrapper::insertAfter
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

   && RJSHelper::is_QDomNode(handler, a2
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: newChild (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        
  // convert js parameter to cpp: refChild (QDomNode)
  
QDomNode a2_cpp;

      a2_cpp = RJSHelper::js2cpp_QDomNode(handler, a2);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNode* w = getWrapped();
                QDomNode res = 
                    
                w->insertAfter(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for insertAfter";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNode
    // Function: replaceChild
    // Source: 
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomNode_Wrapper::replaceChild
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

   && RJSHelper::is_QDomNode(handler, a2
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: newChild (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        
  // convert js parameter to cpp: oldChild (QDomNode)
  
QDomNode a2_cpp;

      a2_cpp = RJSHelper::js2cpp_QDomNode(handler, a2);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNode* w = getWrapped();
                QDomNode res = 
                    
                w->replaceChild(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for replaceChild";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNode
    // Function: removeChild
    // Source: 
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomNode_Wrapper::removeChild
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: oldChild (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNode* w = getWrapped();
                QDomNode res = 
                    
                w->removeChild(
                  a1_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for removeChild";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNode
    // Function: appendChild
    // Source: 
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomNode_Wrapper::appendChild
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: newChild (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNode* w = getWrapped();
                QDomNode res = 
                    
                w->appendChild(
                  a1_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for appendChild";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNode
    // Function: hasChildNodes
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNode_Wrapper::hasChildNodes
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNode* w = getWrapped();
                bool res = 
                    
                w->hasChildNodes(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for hasChildNodes";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNode
    // Function: cloneNode
    // Source: 
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomNode_Wrapper::cloneNode
              (
                
  const QJSValue& 
  a1
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_bool(handler, a1
    , true
  
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: deep (bool)
  
bool a1_cpp;

      
          if (a1.isUndefined()) {
            a1_cpp = true;
          }
          else {
            a1_cpp = RJSHelper::js2cpp_bool(handler, a1);
          }
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNode* w = getWrapped();
                QDomNode res = 
                    
                w->cloneNode(
                  a1_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for cloneNode";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNode
    // Function: normalize
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNode_Wrapper::normalize
              (
                
              ) 
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNode* w = getWrapped();
                
                w->normalize(
                  
                );
              
            return QJSValue();
          
  }

                  qWarning() << "no matching function variant found for normalize";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNode
    // Function: isSupported
    // Source: 
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomNode_Wrapper::isSupported
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

   && RJSHelper::is_QString(handler, a2
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: feature (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        
  // convert js parameter to cpp: version (QString)
  
QString a2_cpp;

      a2_cpp = RJSHelper::js2cpp_QString(handler, a2);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNode* w = getWrapped();
                bool res = 
                    
                w->isSupported(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isSupported";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNode
    // Function: nodeName
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNode_Wrapper::nodeName
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNode* w = getWrapped();
                QString res = 
                    
                w->nodeName(
                  
                );
              
            // return type: QString

            return RJSHelper::cpp2js_QString(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for nodeName";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNode
    // Function: nodeType
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNode_Wrapper::nodeType
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNode* w = getWrapped();
                QDomNode::NodeType res = 
                    
                w->nodeType(
                  
                );
              
            // return type: QDomNode::NodeType

            return RJSHelper::cpp2js_QDomNode_NodeType(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for nodeType";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNode
    // Function: parentNode
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNode_Wrapper::parentNode
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNode* w = getWrapped();
                QDomNode res = 
                    
                w->parentNode(
                  
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for parentNode";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNode
    // Function: childNodes
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNode_Wrapper::childNodes
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNode* w = getWrapped();
                QDomNodeList res = 
                    
                w->childNodes(
                  
                );
              
            // return type: QDomNodeList

            return RJSHelper::cpp2js_QDomNodeList(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for childNodes";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNode
    // Function: firstChild
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNode_Wrapper::firstChild
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNode* w = getWrapped();
                QDomNode res = 
                    
                w->firstChild(
                  
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for firstChild";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNode
    // Function: lastChild
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNode_Wrapper::lastChild
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNode* w = getWrapped();
                QDomNode res = 
                    
                w->lastChild(
                  
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for lastChild";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNode
    // Function: previousSibling
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNode_Wrapper::previousSibling
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNode* w = getWrapped();
                QDomNode res = 
                    
                w->previousSibling(
                  
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for previousSibling";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNode
    // Function: nextSibling
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNode_Wrapper::nextSibling
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNode* w = getWrapped();
                QDomNode res = 
                    
                w->nextSibling(
                  
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for nextSibling";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNode
    // Function: attributes
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNode_Wrapper::attributes
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNode* w = getWrapped();
                QDomNamedNodeMap res = 
                    
                w->attributes(
                  
                );
              
            // return type: QDomNamedNodeMap

            return RJSHelper::cpp2js_QDomNamedNodeMap(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for attributes";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNode
    // Function: ownerDocument
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNode_Wrapper::ownerDocument
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNode* w = getWrapped();
                QDomDocument res = 
                    
                w->ownerDocument(
                  
                );
              
            // return type: QDomDocument

            return RJSHelper::cpp2js_QDomDocument(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for ownerDocument";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNode
    // Function: namespaceURI
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNode_Wrapper::namespaceURI
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNode* w = getWrapped();
                QString res = 
                    
                w->namespaceURI(
                  
                );
              
            // return type: QString

            return RJSHelper::cpp2js_QString(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for namespaceURI";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNode
    // Function: localName
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNode_Wrapper::localName
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNode* w = getWrapped();
                QString res = 
                    
                w->localName(
                  
                );
              
            // return type: QString

            return RJSHelper::cpp2js_QString(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for localName";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNode
    // Function: hasAttributes
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNode_Wrapper::hasAttributes
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNode* w = getWrapped();
                bool res = 
                    
                w->hasAttributes(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for hasAttributes";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNode
    // Function: nodeValue
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNode_Wrapper::nodeValue
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNode* w = getWrapped();
                QString res = 
                    
                w->nodeValue(
                  
                );
              
            // return type: QString

            return RJSHelper::cpp2js_QString(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for nodeValue";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNode
    // Function: setNodeValue
    // Source: 
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomNode_Wrapper::setNodeValue
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp:  (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNode* w = getWrapped();
                
                w->setNodeValue(
                  a1_cpp
    
                );
              
            return QJSValue();
          
  }

                  qWarning() << "no matching function variant found for setNodeValue";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNode
    // Function: prefix
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNode_Wrapper::prefix
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNode* w = getWrapped();
                QString res = 
                    
                w->prefix(
                  
                );
              
            // return type: QString

            return RJSHelper::cpp2js_QString(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for prefix";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNode
    // Function: setPrefix
    // Source: 
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomNode_Wrapper::setPrefix
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: pre (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNode* w = getWrapped();
                
                w->setPrefix(
                  a1_cpp
    
                );
              
            return QJSValue();
          
  }

                  qWarning() << "no matching function variant found for setPrefix";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNode
    // Function: isAttr
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNode_Wrapper::isAttr
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNode* w = getWrapped();
                bool res = 
                    
                w->isAttr(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isAttr";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNode
    // Function: isCDATASection
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNode_Wrapper::isCDATASection
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNode* w = getWrapped();
                bool res = 
                    
                w->isCDATASection(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isCDATASection";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNode
    // Function: isDocumentFragment
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNode_Wrapper::isDocumentFragment
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNode* w = getWrapped();
                bool res = 
                    
                w->isDocumentFragment(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isDocumentFragment";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNode
    // Function: isDocument
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNode_Wrapper::isDocument
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNode* w = getWrapped();
                bool res = 
                    
                w->isDocument(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isDocument";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNode
    // Function: isDocumentType
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNode_Wrapper::isDocumentType
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNode* w = getWrapped();
                bool res = 
                    
                w->isDocumentType(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isDocumentType";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNode
    // Function: isElement
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNode_Wrapper::isElement
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNode* w = getWrapped();
                bool res = 
                    
                w->isElement(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isElement";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNode
    // Function: isEntityReference
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNode_Wrapper::isEntityReference
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNode* w = getWrapped();
                bool res = 
                    
                w->isEntityReference(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isEntityReference";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNode
    // Function: isText
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNode_Wrapper::isText
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNode* w = getWrapped();
                bool res = 
                    
                w->isText(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isText";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNode
    // Function: isEntity
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNode_Wrapper::isEntity
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNode* w = getWrapped();
                bool res = 
                    
                w->isEntity(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isEntity";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNode
    // Function: isNotation
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNode_Wrapper::isNotation
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNode* w = getWrapped();
                bool res = 
                    
                w->isNotation(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isNotation";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNode
    // Function: isProcessingInstruction
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNode_Wrapper::isProcessingInstruction
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNode* w = getWrapped();
                bool res = 
                    
                w->isProcessingInstruction(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isProcessingInstruction";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNode
    // Function: isCharacterData
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNode_Wrapper::isCharacterData
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNode* w = getWrapped();
                bool res = 
                    
                w->isCharacterData(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isCharacterData";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNode
    // Function: isComment
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNode_Wrapper::isComment
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNode* w = getWrapped();
                bool res = 
                    
                w->isComment(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isComment";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNode
    // Function: namedItem
    // Source: 
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomNode_Wrapper::namedItem
              (
                
  const QJSValue& 
  a1
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: name (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNode* w = getWrapped();
                QDomNode res = 
                    
                w->namedItem(
                  a1_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for namedItem";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNode
    // Function: isNull
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNode_Wrapper::isNull
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNode* w = getWrapped();
                bool res = 
                    
                w->isNull(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isNull";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNode
    // Function: clear
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNode_Wrapper::clear
              (
                
              ) 
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNode* w = getWrapped();
                
                w->clear(
                  
                );
              
            return QJSValue();
          
  }

                  qWarning() << "no matching function variant found for clear";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNode
    // Function: toAttr
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNode_Wrapper::toAttr
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNode* w = getWrapped();
                QDomAttr res = 
                    
                w->toAttr(
                  
                );
              
            // return type: QDomAttr

            return RJSHelper::cpp2js_QDomAttr(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toAttr";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNode
    // Function: toCDATASection
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNode_Wrapper::toCDATASection
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNode* w = getWrapped();
                QDomCDATASection res = 
                    
                w->toCDATASection(
                  
                );
              
            // return type: QDomCDATASection

            return RJSHelper::cpp2js_QDomCDATASection(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toCDATASection";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNode
    // Function: toDocumentFragment
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNode_Wrapper::toDocumentFragment
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNode* w = getWrapped();
                QDomDocumentFragment res = 
                    
                w->toDocumentFragment(
                  
                );
              
            // return type: QDomDocumentFragment

            return RJSHelper::cpp2js_QDomDocumentFragment(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toDocumentFragment";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNode
    // Function: toDocument
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNode_Wrapper::toDocument
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNode* w = getWrapped();
                QDomDocument res = 
                    
                w->toDocument(
                  
                );
              
            // return type: QDomDocument

            return RJSHelper::cpp2js_QDomDocument(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toDocument";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNode
    // Function: toDocumentType
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNode_Wrapper::toDocumentType
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNode* w = getWrapped();
                QDomDocumentType res = 
                    
                w->toDocumentType(
                  
                );
              
            // return type: QDomDocumentType

            return RJSHelper::cpp2js_QDomDocumentType(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toDocumentType";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNode
    // Function: toElement
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNode_Wrapper::toElement
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNode* w = getWrapped();
                QDomElement res = 
                    
                w->toElement(
                  
                );
              
            // return type: QDomElement

            return RJSHelper::cpp2js_QDomElement(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toElement";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNode
    // Function: toEntityReference
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNode_Wrapper::toEntityReference
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNode* w = getWrapped();
                QDomEntityReference res = 
                    
                w->toEntityReference(
                  
                );
              
            // return type: QDomEntityReference

            return RJSHelper::cpp2js_QDomEntityReference(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toEntityReference";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNode
    // Function: toText
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNode_Wrapper::toText
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNode* w = getWrapped();
                QDomText res = 
                    
                w->toText(
                  
                );
              
            // return type: QDomText

            return RJSHelper::cpp2js_QDomText(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toText";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNode
    // Function: toEntity
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNode_Wrapper::toEntity
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNode* w = getWrapped();
                QDomEntity res = 
                    
                w->toEntity(
                  
                );
              
            // return type: QDomEntity

            return RJSHelper::cpp2js_QDomEntity(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toEntity";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNode
    // Function: toNotation
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNode_Wrapper::toNotation
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNode* w = getWrapped();
                QDomNotation res = 
                    
                w->toNotation(
                  
                );
              
            // return type: QDomNotation

            return RJSHelper::cpp2js_QDomNotation(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toNotation";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNode
    // Function: toProcessingInstruction
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNode_Wrapper::toProcessingInstruction
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNode* w = getWrapped();
                QDomProcessingInstruction res = 
                    
                w->toProcessingInstruction(
                  
                );
              
            // return type: QDomProcessingInstruction

            return RJSHelper::cpp2js_QDomProcessingInstruction(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toProcessingInstruction";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNode
    // Function: toCharacterData
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNode_Wrapper::toCharacterData
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNode* w = getWrapped();
                QDomCharacterData res = 
                    
                w->toCharacterData(
                  
                );
              
            // return type: QDomCharacterData

            return RJSHelper::cpp2js_QDomCharacterData(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toCharacterData";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNode
    // Function: toComment
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNode_Wrapper::toComment
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNode* w = getWrapped();
                QDomComment res = 
                    
                w->toComment(
                  
                );
              
            // return type: QDomComment

            return RJSHelper::cpp2js_QDomComment(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toComment";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNode
    // Function: firstChildElement
    // Source: 
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomNode_Wrapper::firstChildElement
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
    , true
  
  )

   && RJSHelper::is_QString(handler, a2
    , true
  
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: tagName (QString)
  
QString a1_cpp;

      
          if (a1.isUndefined()) {
            a1_cpp = QString();
          }
          else {
            a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
          }
        
  // convert js parameter to cpp: namespaceURI (QString)
  
QString a2_cpp;

      
          if (a2.isUndefined()) {
            a2_cpp = QString();
          }
          else {
            a2_cpp = RJSHelper::js2cpp_QString(handler, a2);
          }
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNode* w = getWrapped();
                QDomElement res = 
                    
                w->firstChildElement(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomElement

            return RJSHelper::cpp2js_QDomElement(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for firstChildElement";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNode
    // Function: lastChildElement
    // Source: 
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomNode_Wrapper::lastChildElement
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
    , true
  
  )

   && RJSHelper::is_QString(handler, a2
    , true
  
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: tagName (QString)
  
QString a1_cpp;

      
          if (a1.isUndefined()) {
            a1_cpp = QString();
          }
          else {
            a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
          }
        
  // convert js parameter to cpp: namespaceURI (QString)
  
QString a2_cpp;

      
          if (a2.isUndefined()) {
            a2_cpp = QString();
          }
          else {
            a2_cpp = RJSHelper::js2cpp_QString(handler, a2);
          }
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNode* w = getWrapped();
                QDomElement res = 
                    
                w->lastChildElement(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomElement

            return RJSHelper::cpp2js_QDomElement(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for lastChildElement";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNode
    // Function: previousSiblingElement
    // Source: 
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomNode_Wrapper::previousSiblingElement
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
    , true
  
  )

   && RJSHelper::is_QString(handler, a2
    , true
  
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: tagName (QString)
  
QString a1_cpp;

      
          if (a1.isUndefined()) {
            a1_cpp = QString();
          }
          else {
            a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
          }
        
  // convert js parameter to cpp: namespaceURI (QString)
  
QString a2_cpp;

      
          if (a2.isUndefined()) {
            a2_cpp = QString();
          }
          else {
            a2_cpp = RJSHelper::js2cpp_QString(handler, a2);
          }
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNode* w = getWrapped();
                QDomElement res = 
                    
                w->previousSiblingElement(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomElement

            return RJSHelper::cpp2js_QDomElement(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for previousSiblingElement";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNode
    // Function: nextSiblingElement
    // Source: 
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomNode_Wrapper::nextSiblingElement
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
    , true
  
  )

   && RJSHelper::is_QString(handler, a2
    , true
  
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: taName (QString)
  
QString a1_cpp;

      
          if (a1.isUndefined()) {
            a1_cpp = QString();
          }
          else {
            a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
          }
        
  // convert js parameter to cpp: namespaceURI (QString)
  
QString a2_cpp;

      
          if (a2.isUndefined()) {
            a2_cpp = QString();
          }
          else {
            a2_cpp = RJSHelper::js2cpp_QString(handler, a2);
          }
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNode* w = getWrapped();
                QDomElement res = 
                    
                w->nextSiblingElement(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomElement

            return RJSHelper::cpp2js_QDomElement(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for nextSiblingElement";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNode
    // Function: lineNumber
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNode_Wrapper::lineNumber
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNode* w = getWrapped();
                int res = 
                    
                w->lineNumber(
                  
                );
              
            // return type: int

            return RJSHelper::cpp2js_int(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for lineNumber";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNode
    // Function: columnNumber
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNode_Wrapper::columnNumber
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNode* w = getWrapped();
                int res = 
                    
                w->columnNumber(
                  
                );
              
            // return type: int

            return RJSHelper::cpp2js_int(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for columnNumber";
                  handler.trace();
                  return QJSValue();
                
              }
            

  // member functions for static properties, forward to static function
  


  // protected overwritten functions / events and their public invokable counterparts:
  
    #include "qdom_wrapper.h"

  
      // list of registered base casters for this wrapper class:
      QList<RJSBasecaster_QDomNodeList*> QDomNodeList_Wrapper::basecasters_QDomNodeList;
    
    // static functions implementation in singleton wrapper:
    
    void QDomNodeList_Wrapper::init(RJSApi& handler) {
      
        //qmlRegisterType<QDomNodeList_Wrapper>("org.qcad", 1, 0, "QDomNodeList_Wrapper");
        qmlRegisterInterface<QDomNodeList_Wrapper>("QDomNodeList_Wrapper", 1);
      

      QJSEngine* engine = handler.getEngine();

      
          // make type scriptable for JS files:
          QJSValue global = engine->globalObject();
          RJSType_QDomNodeList* t = new RJSType_QDomNodeList();
          global.setProperty("RJSType_QDomNodeList", engine->newQObject(t));

          // initialize ID for this type:
          RJSType_QDomNodeList::getIdStatic();

          

      // wrapper:
      QJSValue mo = engine->newQMetaObject(&QDomNodeList_Wrapper::staticMetaObject);
      engine->globalObject().setProperty("QDomNodeList_Wrapper", mo);


      
        // JS base class:
        //QJSValue mob = engine->newQMetaObject(&QDomNodeList_BaseJs::staticMetaObject);
        //engine->globalObject().setProperty("QDomNodeList_BaseJs", mob);
      
      QString fileName = ":generator/js/QDomNodeList.js";
      QFile scriptFile(fileName);
      if (!scriptFile.open(QIODevice::ReadOnly)) {
        qWarning() << "JS script wrapper file not found:" << fileName;
        return;
      }
      QTextStream stream(&scriptFile);
      QString contents = stream.readAll();
      scriptFile.close();

      qDebug() << "Evaluating file: " << fileName;
      QJSValue result = engine->evaluate(contents, fileName);
      if (result.isError()) {
          qWarning()
              << "Uncaught exception at line"
              << result.property("lineNumber").toInt()
              << ":" << result.toString();
      }
    }
  
    /*
    // special constructor used as prototype:
    QDomNodeList_Wrapper::QDomNodeList_Wrapper(QJSEngine* e) : wrapped(nullptr), wrappedCreated(false) {
            //setObjectName("QDomNodeList_Wrapper");
            setEngine(e);

            // signal forwarding:
            //initConnections();
          }
        
    */

    
      // special constructor to wrap existing object:
      QDomNodeList_Wrapper::QDomNodeList_Wrapper(RJSApi& h, QDomNodeList* o, bool wrappedCreated) : RJSWrapperObj(h), wrapped(o), wrappedCreated(wrappedCreated) {
              //RDebug::incCounter(QString("QDomNodeList_Wrapper_") + handler.getEngine()->objectName());
              //RDebug::incCounter(QString("QDomNodeList_Wrapper"));
              //setObjectName("QDomNodeList_Wrapper");
              //setHandler(h);

              // signal forwarding:
              initConnections();
            }
          

      // destructor:
      QDomNodeList_Wrapper::~QDomNodeList_Wrapper() {
            //RDebug::decCounter(QString("QDomNodeList_Wrapper_") + handler.getEngine()->objectName());
            //RDebug::decCounter(QString("QDomNodeList_Wrapper"));

            //qDebug() << "QDomNodeList_Wrapper::~QDomNodeList_Wrapper";

            // tell script handler that this wrapper no longer exists:
            handler.unregisterWrapper(*this);

            
            if (wrappedCreated) {
              
                  // delete wrapped object (copyable, JS ownership)
                  //qDebug() << "deleting instance of QDomNodeList";
                  delete wrapped;
                
            }
            
          }
        
    // initialization of signal forwarding
    
        void QDomNodeList_Wrapper::initConnections() {

          //setObjectName("QDomNodeList_Wrapper");

          // tell script handler that this wrapper needs to be deleted if the engine is deleted:
          handler.registerWrapper(*this);

          
              // wrapped object is not a QObject:
              // wrapper is managed by script engine:
              //QJSEngine::setObjectOwnership(this, QJSEngine::CppOwnership);
            

          if (hasWrapped()) {
            
            // set up signal forwarding:
            
          }
        }
      

  // constructors:
  
    // Class: QDomNodeList
    // Function: 
    // Source: 
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1
QDomNodeList_Wrapper::QDomNodeList_Wrapper
                
              (
                
                  // RJSApi:
                  QObject* h
                  ,
  const QJSValue& 
  a1
              ) 
              
                : RJSWrapperObj(*(RJSApi*)h)
              
              {
                
                  //RDebug::incCounter(QString("QDomNodeList_Wrapper_") + handler.getEngine()->objectName());
                  //RDebug::incCounter(QString("QDomNodeList_Wrapper"));
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNodeList(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp:  (QDomNodeList)
  
QDomNodeList a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNodeList(handler, a1);
        

    // call function:
    
        // construct wrapper:

        
            wrapped = new QDomNodeList(
                a1_cpp
    
            );
            wrappedCreated = true;
          

        // signal forwarding:
        // TODO
        //connect(wrapped, SIGNAL(triggered(bool)), this, SLOT(triggeredEmitter(bool)));
        initConnections();
        return;

      
  }

      {
    

    // call function:
    
        // construct wrapper:

        
            wrapped = new QDomNodeList(
                
            );
            wrappedCreated = true;
          

        // signal forwarding:
        // TODO
        //connect(wrapped, SIGNAL(triggered(bool)), this, SLOT(triggeredEmitter(bool)));
        initConnections();
        return;

      
  }

                    // no constructor without arguments defined
                    // allow constructor for prototype objects without args:
                    if (
                      a1.isUndefined()
  
                      ) {
                      wrapped = nullptr;
                      wrappedCreated = false;
                      return;
                    }
                  

                  qWarning() << "no matching constructor variant found for QDomNodeList";
                  wrapped = nullptr;
                  wrappedCreated = false;
                  handler.trace();
                
              }
            

    // non-static functions:
    
    // Class: QDomNodeList
    // Function: operator_assign
    // Source: 
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomNodeList_Wrapper::operator_assign
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNodeList(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp:  (QDomNodeList)
  
QDomNodeList a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNodeList(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNodeList* w = getWrapped();
                
                      // return type is reference:
                      // use pointer instead 3:
                      QDomNodeList* res =
                    &
                w->operator=(
                  a1_cpp
    
                );
              
            // return type: QDomNodeList&

            return RJSHelper::cpp2js_QDomNodeList(
              handler, 
              // non-copyable: false
                  // return type is reference, type is copyable:
                  // convert pointer back to reference:
                  *res
                
              );
            
  }

                  qWarning() << "no matching function variant found for operator_assign";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNodeList
    // Function: operator_equal
    // Source: 
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomNodeList_Wrapper::operator_equal
              (
                
  const QJSValue& 
  a1
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNodeList(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp:  (QDomNodeList)
  
QDomNodeList a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNodeList(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNodeList* w = getWrapped();
                bool res = 
                    
                w->operator==(
                  a1_cpp
    
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for operator_equal";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNodeList
    // Function: operator_unequal
    // Source: 
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomNodeList_Wrapper::operator_unequal
              (
                
  const QJSValue& 
  a1
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNodeList(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp:  (QDomNodeList)
  
QDomNodeList a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNodeList(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNodeList* w = getWrapped();
                bool res = 
                    
                w->operator!=(
                  a1_cpp
    
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for operator_unequal";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNodeList
    // Function: item
    // Source: 
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomNodeList_Wrapper::item
              (
                
  const QJSValue& 
  a1
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_int(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: index (int)
  
int a1_cpp;

      a1_cpp = RJSHelper::js2cpp_int(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNodeList* w = getWrapped();
                QDomNode res = 
                    
                w->item(
                  a1_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for item";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNodeList
    // Function: at
    // Source: 
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomNodeList_Wrapper::at
              (
                
  const QJSValue& 
  a1
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_int(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: index (int)
  
int a1_cpp;

      a1_cpp = RJSHelper::js2cpp_int(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNodeList* w = getWrapped();
                QDomNode res = 
                    
                w->at(
                  a1_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for at";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNodeList
    // Function: length
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNodeList_Wrapper::length
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNodeList* w = getWrapped();
                int res = 
                    
                w->length(
                  
                );
              
            // return type: int

            return RJSHelper::cpp2js_int(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for length";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNodeList
    // Function: count
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNodeList_Wrapper::count
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNodeList* w = getWrapped();
                int res = 
                    
                w->count(
                  
                );
              
            // return type: int

            return RJSHelper::cpp2js_int(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for count";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNodeList
    // Function: size
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNodeList_Wrapper::size
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNodeList* w = getWrapped();
                int res = 
                    
                w->size(
                  
                );
              
            // return type: int

            return RJSHelper::cpp2js_int(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for size";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNodeList
    // Function: isEmpty
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNodeList_Wrapper::isEmpty
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNodeList* w = getWrapped();
                bool res = 
                    
                w->isEmpty(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isEmpty";
                  handler.trace();
                  return QJSValue();
                
              }
            

  // member functions for static properties, forward to static function
  


  // protected overwritten functions / events and their public invokable counterparts:
  
    #include "qdom_wrapper.h"

  
      // list of registered base casters for this wrapper class:
      QList<RJSBasecaster_QDomDocumentType*> QDomDocumentType_Wrapper::basecasters_QDomDocumentType;
    
    // static functions implementation in singleton wrapper:
    
    void QDomDocumentType_Wrapper::init(RJSApi& handler) {
      
        //qmlRegisterType<QDomDocumentType_Wrapper>("org.qcad", 1, 0, "QDomDocumentType_Wrapper");
        qmlRegisterInterface<QDomDocumentType_Wrapper>("QDomDocumentType_Wrapper", 1);
      

      QJSEngine* engine = handler.getEngine();

      
          // make type scriptable for JS files:
          QJSValue global = engine->globalObject();
          RJSType_QDomDocumentType* t = new RJSType_QDomDocumentType();
          global.setProperty("RJSType_QDomDocumentType", engine->newQObject(t));

          // initialize ID for this type:
          RJSType_QDomDocumentType::getIdStatic();

          

      // wrapper:
      QJSValue mo = engine->newQMetaObject(&QDomDocumentType_Wrapper::staticMetaObject);
      engine->globalObject().setProperty("QDomDocumentType_Wrapper", mo);


      
        // JS base class:
        //QJSValue mob = engine->newQMetaObject(&QDomDocumentType_BaseJs::staticMetaObject);
        //engine->globalObject().setProperty("QDomDocumentType_BaseJs", mob);
      
      QString fileName = ":generator/js/QDomDocumentType.js";
      QFile scriptFile(fileName);
      if (!scriptFile.open(QIODevice::ReadOnly)) {
        qWarning() << "JS script wrapper file not found:" << fileName;
        return;
      }
      QTextStream stream(&scriptFile);
      QString contents = stream.readAll();
      scriptFile.close();

      qDebug() << "Evaluating file: " << fileName;
      QJSValue result = engine->evaluate(contents, fileName);
      if (result.isError()) {
          qWarning()
              << "Uncaught exception at line"
              << result.property("lineNumber").toInt()
              << ":" << result.toString();
      }
    }
  
    /*
    // special constructor used as prototype:
    QDomDocumentType_Wrapper::QDomDocumentType_Wrapper(QJSEngine* e) : wrapped(nullptr), wrappedCreated(false) {
            //setObjectName("QDomDocumentType_Wrapper");
            setEngine(e);

            // signal forwarding:
            //initConnections();
          }
        
    */

    
      // special constructor to wrap existing object:
      QDomDocumentType_Wrapper::QDomDocumentType_Wrapper(RJSApi& h, QDomDocumentType* o, bool wrappedCreated) : RJSWrapperObj(h), wrapped(o), wrappedCreated(wrappedCreated) {
              //RDebug::incCounter(QString("QDomDocumentType_Wrapper_") + handler.getEngine()->objectName());
              //RDebug::incCounter(QString("QDomDocumentType_Wrapper"));
              //setObjectName("QDomDocumentType_Wrapper");
              //setHandler(h);

              // signal forwarding:
              initConnections();
            }
          

      // destructor:
      QDomDocumentType_Wrapper::~QDomDocumentType_Wrapper() {
            //RDebug::decCounter(QString("QDomDocumentType_Wrapper_") + handler.getEngine()->objectName());
            //RDebug::decCounter(QString("QDomDocumentType_Wrapper"));

            //qDebug() << "QDomDocumentType_Wrapper::~QDomDocumentType_Wrapper";

            // tell script handler that this wrapper no longer exists:
            handler.unregisterWrapper(*this);

            
            if (wrappedCreated) {
              
                  // delete wrapped object (copyable, JS ownership)
                  //qDebug() << "deleting instance of QDomDocumentType";
                  delete wrapped;
                
            }
            
          }
        
    // initialization of signal forwarding
    
        void QDomDocumentType_Wrapper::initConnections() {

          //setObjectName("QDomDocumentType_Wrapper");

          // tell script handler that this wrapper needs to be deleted if the engine is deleted:
          handler.registerWrapper(*this);

          
              // wrapped object is not a QObject:
              // wrapper is managed by script engine:
              //QJSEngine::setObjectOwnership(this, QJSEngine::CppOwnership);
            

          if (hasWrapped()) {
            
            // set up signal forwarding:
            
          }
        }
      

  // constructors:
  
    // Class: QDomDocumentType
    // Function: 
    // Source: 
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1
QDomDocumentType_Wrapper::QDomDocumentType_Wrapper
                
              (
                
                  // RJSApi:
                  QObject* h
                  ,
  const QJSValue& 
  a1
              ) 
              
                : RJSWrapperObj(*(RJSApi*)h)
              
              {
                
                  //RDebug::incCounter(QString("QDomDocumentType_Wrapper_") + handler.getEngine()->objectName());
                  //RDebug::incCounter(QString("QDomDocumentType_Wrapper"));
                
      // check parameter types:
      if (
        RJSHelper::is_QDomDocumentType(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: x (QDomDocumentType)
  
QDomDocumentType a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomDocumentType(handler, a1);
        

    // call function:
    
        // construct wrapper:

        
            wrapped = new QDomDocumentType(
                a1_cpp
    
            );
            wrappedCreated = true;
          

        // signal forwarding:
        // TODO
        //connect(wrapped, SIGNAL(triggered(bool)), this, SLOT(triggeredEmitter(bool)));
        initConnections();
        return;

      
  }

      {
    

    // call function:
    
        // construct wrapper:

        
            wrapped = new QDomDocumentType(
                
            );
            wrappedCreated = true;
          

        // signal forwarding:
        // TODO
        //connect(wrapped, SIGNAL(triggered(bool)), this, SLOT(triggeredEmitter(bool)));
        initConnections();
        return;

      
  }

                    // no constructor without arguments defined
                    // allow constructor for prototype objects without args:
                    if (
                      a1.isUndefined()
  
                      ) {
                      wrapped = nullptr;
                      wrappedCreated = false;
                      return;
                    }
                  

                  qWarning() << "no matching constructor variant found for QDomDocumentType";
                  wrapped = nullptr;
                  wrappedCreated = false;
                  handler.trace();
                
              }
            

    // non-static functions:
    
    // Class: QDomDocumentType
    // Function: operator_equal
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentType_Wrapper::operator_equal
              (
                
  const QJSValue& 
  a1
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp:  (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentType* w = getWrapped();
                bool res = 
                    
                w->operator==(
                  a1_cpp
    
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for operator_equal";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentType
    // Function: operator_unequal
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentType_Wrapper::operator_unequal
              (
                
  const QJSValue& 
  a1
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp:  (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentType* w = getWrapped();
                bool res = 
                    
                w->operator!=(
                  a1_cpp
    
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for operator_unequal";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentType
    // Function: insertBefore
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentType_Wrapper::insertBefore
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

   && RJSHelper::is_QDomNode(handler, a2
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: newChild (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        
  // convert js parameter to cpp: refChild (QDomNode)
  
QDomNode a2_cpp;

      a2_cpp = RJSHelper::js2cpp_QDomNode(handler, a2);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentType* w = getWrapped();
                QDomNode res = 
                    
                w->insertBefore(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for insertBefore";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentType
    // Function: insertAfter
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentType_Wrapper::insertAfter
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

   && RJSHelper::is_QDomNode(handler, a2
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: newChild (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        
  // convert js parameter to cpp: refChild (QDomNode)
  
QDomNode a2_cpp;

      a2_cpp = RJSHelper::js2cpp_QDomNode(handler, a2);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentType* w = getWrapped();
                QDomNode res = 
                    
                w->insertAfter(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for insertAfter";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentType
    // Function: replaceChild
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentType_Wrapper::replaceChild
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

   && RJSHelper::is_QDomNode(handler, a2
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: newChild (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        
  // convert js parameter to cpp: oldChild (QDomNode)
  
QDomNode a2_cpp;

      a2_cpp = RJSHelper::js2cpp_QDomNode(handler, a2);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentType* w = getWrapped();
                QDomNode res = 
                    
                w->replaceChild(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for replaceChild";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentType
    // Function: removeChild
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentType_Wrapper::removeChild
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: oldChild (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentType* w = getWrapped();
                QDomNode res = 
                    
                w->removeChild(
                  a1_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for removeChild";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentType
    // Function: appendChild
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentType_Wrapper::appendChild
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: newChild (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentType* w = getWrapped();
                QDomNode res = 
                    
                w->appendChild(
                  a1_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for appendChild";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentType
    // Function: hasChildNodes
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentType_Wrapper::hasChildNodes
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentType* w = getWrapped();
                bool res = 
                    
                w->hasChildNodes(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for hasChildNodes";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentType
    // Function: cloneNode
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentType_Wrapper::cloneNode
              (
                
  const QJSValue& 
  a1
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_bool(handler, a1
    , true
  
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: deep (bool)
  
bool a1_cpp;

      
          if (a1.isUndefined()) {
            a1_cpp = true;
          }
          else {
            a1_cpp = RJSHelper::js2cpp_bool(handler, a1);
          }
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentType* w = getWrapped();
                QDomNode res = 
                    
                w->cloneNode(
                  a1_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for cloneNode";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentType
    // Function: normalize
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentType_Wrapper::normalize
              (
                
              ) 
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentType* w = getWrapped();
                
                w->normalize(
                  
                );
              
            return QJSValue();
          
  }

                  qWarning() << "no matching function variant found for normalize";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentType
    // Function: isSupported
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentType_Wrapper::isSupported
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

   && RJSHelper::is_QString(handler, a2
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: feature (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        
  // convert js parameter to cpp: version (QString)
  
QString a2_cpp;

      a2_cpp = RJSHelper::js2cpp_QString(handler, a2);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentType* w = getWrapped();
                bool res = 
                    
                w->isSupported(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isSupported";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentType
    // Function: nodeName
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentType_Wrapper::nodeName
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentType* w = getWrapped();
                QString res = 
                    
                w->nodeName(
                  
                );
              
            // return type: QString

            return RJSHelper::cpp2js_QString(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for nodeName";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentType
    // Function: parentNode
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentType_Wrapper::parentNode
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentType* w = getWrapped();
                QDomNode res = 
                    
                w->parentNode(
                  
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for parentNode";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentType
    // Function: childNodes
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentType_Wrapper::childNodes
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentType* w = getWrapped();
                QDomNodeList res = 
                    
                w->childNodes(
                  
                );
              
            // return type: QDomNodeList

            return RJSHelper::cpp2js_QDomNodeList(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for childNodes";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentType
    // Function: firstChild
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentType_Wrapper::firstChild
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentType* w = getWrapped();
                QDomNode res = 
                    
                w->firstChild(
                  
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for firstChild";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentType
    // Function: lastChild
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentType_Wrapper::lastChild
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentType* w = getWrapped();
                QDomNode res = 
                    
                w->lastChild(
                  
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for lastChild";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentType
    // Function: previousSibling
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentType_Wrapper::previousSibling
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentType* w = getWrapped();
                QDomNode res = 
                    
                w->previousSibling(
                  
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for previousSibling";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentType
    // Function: nextSibling
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentType_Wrapper::nextSibling
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentType* w = getWrapped();
                QDomNode res = 
                    
                w->nextSibling(
                  
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for nextSibling";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentType
    // Function: attributes
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentType_Wrapper::attributes
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentType* w = getWrapped();
                QDomNamedNodeMap res = 
                    
                w->attributes(
                  
                );
              
            // return type: QDomNamedNodeMap

            return RJSHelper::cpp2js_QDomNamedNodeMap(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for attributes";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentType
    // Function: ownerDocument
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentType_Wrapper::ownerDocument
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentType* w = getWrapped();
                QDomDocument res = 
                    
                w->ownerDocument(
                  
                );
              
            // return type: QDomDocument

            return RJSHelper::cpp2js_QDomDocument(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for ownerDocument";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentType
    // Function: namespaceURI
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentType_Wrapper::namespaceURI
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentType* w = getWrapped();
                QString res = 
                    
                w->namespaceURI(
                  
                );
              
            // return type: QString

            return RJSHelper::cpp2js_QString(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for namespaceURI";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentType
    // Function: localName
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentType_Wrapper::localName
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentType* w = getWrapped();
                QString res = 
                    
                w->localName(
                  
                );
              
            // return type: QString

            return RJSHelper::cpp2js_QString(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for localName";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentType
    // Function: hasAttributes
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentType_Wrapper::hasAttributes
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentType* w = getWrapped();
                bool res = 
                    
                w->hasAttributes(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for hasAttributes";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentType
    // Function: nodeValue
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentType_Wrapper::nodeValue
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentType* w = getWrapped();
                QString res = 
                    
                w->nodeValue(
                  
                );
              
            // return type: QString

            return RJSHelper::cpp2js_QString(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for nodeValue";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentType
    // Function: setNodeValue
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentType_Wrapper::setNodeValue
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp:  (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentType* w = getWrapped();
                
                w->setNodeValue(
                  a1_cpp
    
                );
              
            return QJSValue();
          
  }

                  qWarning() << "no matching function variant found for setNodeValue";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentType
    // Function: prefix
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentType_Wrapper::prefix
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentType* w = getWrapped();
                QString res = 
                    
                w->prefix(
                  
                );
              
            // return type: QString

            return RJSHelper::cpp2js_QString(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for prefix";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentType
    // Function: setPrefix
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentType_Wrapper::setPrefix
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: pre (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentType* w = getWrapped();
                
                w->setPrefix(
                  a1_cpp
    
                );
              
            return QJSValue();
          
  }

                  qWarning() << "no matching function variant found for setPrefix";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentType
    // Function: isAttr
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentType_Wrapper::isAttr
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentType* w = getWrapped();
                bool res = 
                    
                w->isAttr(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isAttr";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentType
    // Function: isCDATASection
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentType_Wrapper::isCDATASection
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentType* w = getWrapped();
                bool res = 
                    
                w->isCDATASection(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isCDATASection";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentType
    // Function: isDocumentFragment
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentType_Wrapper::isDocumentFragment
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentType* w = getWrapped();
                bool res = 
                    
                w->isDocumentFragment(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isDocumentFragment";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentType
    // Function: isDocument
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentType_Wrapper::isDocument
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentType* w = getWrapped();
                bool res = 
                    
                w->isDocument(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isDocument";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentType
    // Function: isDocumentType
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentType_Wrapper::isDocumentType
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentType* w = getWrapped();
                bool res = 
                    
                w->isDocumentType(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isDocumentType";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentType
    // Function: isElement
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentType_Wrapper::isElement
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentType* w = getWrapped();
                bool res = 
                    
                w->isElement(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isElement";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentType
    // Function: isEntityReference
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentType_Wrapper::isEntityReference
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentType* w = getWrapped();
                bool res = 
                    
                w->isEntityReference(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isEntityReference";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentType
    // Function: isText
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentType_Wrapper::isText
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentType* w = getWrapped();
                bool res = 
                    
                w->isText(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isText";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentType
    // Function: isEntity
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentType_Wrapper::isEntity
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentType* w = getWrapped();
                bool res = 
                    
                w->isEntity(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isEntity";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentType
    // Function: isNotation
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentType_Wrapper::isNotation
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentType* w = getWrapped();
                bool res = 
                    
                w->isNotation(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isNotation";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentType
    // Function: isProcessingInstruction
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentType_Wrapper::isProcessingInstruction
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentType* w = getWrapped();
                bool res = 
                    
                w->isProcessingInstruction(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isProcessingInstruction";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentType
    // Function: isCharacterData
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentType_Wrapper::isCharacterData
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentType* w = getWrapped();
                bool res = 
                    
                w->isCharacterData(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isCharacterData";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentType
    // Function: isComment
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentType_Wrapper::isComment
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentType* w = getWrapped();
                bool res = 
                    
                w->isComment(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isComment";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentType
    // Function: namedItem
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentType_Wrapper::namedItem
              (
                
  const QJSValue& 
  a1
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: name (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentType* w = getWrapped();
                QDomNode res = 
                    
                w->namedItem(
                  a1_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for namedItem";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentType
    // Function: isNull
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentType_Wrapper::isNull
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentType* w = getWrapped();
                bool res = 
                    
                w->isNull(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isNull";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentType
    // Function: clear
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentType_Wrapper::clear
              (
                
              ) 
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentType* w = getWrapped();
                
                w->clear(
                  
                );
              
            return QJSValue();
          
  }

                  qWarning() << "no matching function variant found for clear";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentType
    // Function: toAttr
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentType_Wrapper::toAttr
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentType* w = getWrapped();
                QDomAttr res = 
                    
                w->toAttr(
                  
                );
              
            // return type: QDomAttr

            return RJSHelper::cpp2js_QDomAttr(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toAttr";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentType
    // Function: toCDATASection
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentType_Wrapper::toCDATASection
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentType* w = getWrapped();
                QDomCDATASection res = 
                    
                w->toCDATASection(
                  
                );
              
            // return type: QDomCDATASection

            return RJSHelper::cpp2js_QDomCDATASection(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toCDATASection";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentType
    // Function: toDocumentFragment
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentType_Wrapper::toDocumentFragment
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentType* w = getWrapped();
                QDomDocumentFragment res = 
                    
                w->toDocumentFragment(
                  
                );
              
            // return type: QDomDocumentFragment

            return RJSHelper::cpp2js_QDomDocumentFragment(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toDocumentFragment";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentType
    // Function: toDocument
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentType_Wrapper::toDocument
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentType* w = getWrapped();
                QDomDocument res = 
                    
                w->toDocument(
                  
                );
              
            // return type: QDomDocument

            return RJSHelper::cpp2js_QDomDocument(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toDocument";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentType
    // Function: toDocumentType
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentType_Wrapper::toDocumentType
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentType* w = getWrapped();
                QDomDocumentType res = 
                    
                w->toDocumentType(
                  
                );
              
            // return type: QDomDocumentType

            return RJSHelper::cpp2js_QDomDocumentType(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toDocumentType";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentType
    // Function: toElement
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentType_Wrapper::toElement
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentType* w = getWrapped();
                QDomElement res = 
                    
                w->toElement(
                  
                );
              
            // return type: QDomElement

            return RJSHelper::cpp2js_QDomElement(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toElement";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentType
    // Function: toEntityReference
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentType_Wrapper::toEntityReference
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentType* w = getWrapped();
                QDomEntityReference res = 
                    
                w->toEntityReference(
                  
                );
              
            // return type: QDomEntityReference

            return RJSHelper::cpp2js_QDomEntityReference(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toEntityReference";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentType
    // Function: toText
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentType_Wrapper::toText
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentType* w = getWrapped();
                QDomText res = 
                    
                w->toText(
                  
                );
              
            // return type: QDomText

            return RJSHelper::cpp2js_QDomText(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toText";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentType
    // Function: toEntity
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentType_Wrapper::toEntity
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentType* w = getWrapped();
                QDomEntity res = 
                    
                w->toEntity(
                  
                );
              
            // return type: QDomEntity

            return RJSHelper::cpp2js_QDomEntity(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toEntity";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentType
    // Function: toNotation
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentType_Wrapper::toNotation
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentType* w = getWrapped();
                QDomNotation res = 
                    
                w->toNotation(
                  
                );
              
            // return type: QDomNotation

            return RJSHelper::cpp2js_QDomNotation(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toNotation";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentType
    // Function: toProcessingInstruction
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentType_Wrapper::toProcessingInstruction
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentType* w = getWrapped();
                QDomProcessingInstruction res = 
                    
                w->toProcessingInstruction(
                  
                );
              
            // return type: QDomProcessingInstruction

            return RJSHelper::cpp2js_QDomProcessingInstruction(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toProcessingInstruction";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentType
    // Function: toCharacterData
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentType_Wrapper::toCharacterData
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentType* w = getWrapped();
                QDomCharacterData res = 
                    
                w->toCharacterData(
                  
                );
              
            // return type: QDomCharacterData

            return RJSHelper::cpp2js_QDomCharacterData(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toCharacterData";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentType
    // Function: toComment
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentType_Wrapper::toComment
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentType* w = getWrapped();
                QDomComment res = 
                    
                w->toComment(
                  
                );
              
            // return type: QDomComment

            return RJSHelper::cpp2js_QDomComment(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toComment";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentType
    // Function: firstChildElement
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentType_Wrapper::firstChildElement
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
    , true
  
  )

   && RJSHelper::is_QString(handler, a2
    , true
  
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: tagName (QString)
  
QString a1_cpp;

      
          if (a1.isUndefined()) {
            a1_cpp = QString();
          }
          else {
            a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
          }
        
  // convert js parameter to cpp: namespaceURI (QString)
  
QString a2_cpp;

      
          if (a2.isUndefined()) {
            a2_cpp = QString();
          }
          else {
            a2_cpp = RJSHelper::js2cpp_QString(handler, a2);
          }
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentType* w = getWrapped();
                QDomElement res = 
                    
                w->firstChildElement(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomElement

            return RJSHelper::cpp2js_QDomElement(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for firstChildElement";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentType
    // Function: lastChildElement
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentType_Wrapper::lastChildElement
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
    , true
  
  )

   && RJSHelper::is_QString(handler, a2
    , true
  
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: tagName (QString)
  
QString a1_cpp;

      
          if (a1.isUndefined()) {
            a1_cpp = QString();
          }
          else {
            a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
          }
        
  // convert js parameter to cpp: namespaceURI (QString)
  
QString a2_cpp;

      
          if (a2.isUndefined()) {
            a2_cpp = QString();
          }
          else {
            a2_cpp = RJSHelper::js2cpp_QString(handler, a2);
          }
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentType* w = getWrapped();
                QDomElement res = 
                    
                w->lastChildElement(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomElement

            return RJSHelper::cpp2js_QDomElement(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for lastChildElement";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentType
    // Function: previousSiblingElement
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentType_Wrapper::previousSiblingElement
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
    , true
  
  )

   && RJSHelper::is_QString(handler, a2
    , true
  
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: tagName (QString)
  
QString a1_cpp;

      
          if (a1.isUndefined()) {
            a1_cpp = QString();
          }
          else {
            a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
          }
        
  // convert js parameter to cpp: namespaceURI (QString)
  
QString a2_cpp;

      
          if (a2.isUndefined()) {
            a2_cpp = QString();
          }
          else {
            a2_cpp = RJSHelper::js2cpp_QString(handler, a2);
          }
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentType* w = getWrapped();
                QDomElement res = 
                    
                w->previousSiblingElement(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomElement

            return RJSHelper::cpp2js_QDomElement(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for previousSiblingElement";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentType
    // Function: nextSiblingElement
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentType_Wrapper::nextSiblingElement
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
    , true
  
  )

   && RJSHelper::is_QString(handler, a2
    , true
  
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: taName (QString)
  
QString a1_cpp;

      
          if (a1.isUndefined()) {
            a1_cpp = QString();
          }
          else {
            a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
          }
        
  // convert js parameter to cpp: namespaceURI (QString)
  
QString a2_cpp;

      
          if (a2.isUndefined()) {
            a2_cpp = QString();
          }
          else {
            a2_cpp = RJSHelper::js2cpp_QString(handler, a2);
          }
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentType* w = getWrapped();
                QDomElement res = 
                    
                w->nextSiblingElement(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomElement

            return RJSHelper::cpp2js_QDomElement(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for nextSiblingElement";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentType
    // Function: lineNumber
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentType_Wrapper::lineNumber
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentType* w = getWrapped();
                int res = 
                    
                w->lineNumber(
                  
                );
              
            // return type: int

            return RJSHelper::cpp2js_int(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for lineNumber";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentType
    // Function: columnNumber
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentType_Wrapper::columnNumber
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentType* w = getWrapped();
                int res = 
                    
                w->columnNumber(
                  
                );
              
            // return type: int

            return RJSHelper::cpp2js_int(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for columnNumber";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentType
    // Function: operator_assign
    // Source: 
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentType_Wrapper::operator_assign
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomDocumentType(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp:  (QDomDocumentType)
  
QDomDocumentType a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomDocumentType(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentType* w = getWrapped();
                
                      // return type is reference:
                      // use pointer instead 3:
                      QDomDocumentType* res =
                    &
                w->operator=(
                  a1_cpp
    
                );
              
            // return type: QDomDocumentType&

            return RJSHelper::cpp2js_QDomDocumentType(
              handler, 
              // non-copyable: false
                  // return type is reference, type is copyable:
                  // convert pointer back to reference:
                  *res
                
              );
            
  }

                  qWarning() << "no matching function variant found for operator_assign";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentType
    // Function: name
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentType_Wrapper::name
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentType* w = getWrapped();
                QString res = 
                    
                w->name(
                  
                );
              
            // return type: QString

            return RJSHelper::cpp2js_QString(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for name";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentType
    // Function: entities
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentType_Wrapper::entities
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentType* w = getWrapped();
                QDomNamedNodeMap res = 
                    
                w->entities(
                  
                );
              
            // return type: QDomNamedNodeMap

            return RJSHelper::cpp2js_QDomNamedNodeMap(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for entities";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentType
    // Function: notations
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentType_Wrapper::notations
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentType* w = getWrapped();
                QDomNamedNodeMap res = 
                    
                w->notations(
                  
                );
              
            // return type: QDomNamedNodeMap

            return RJSHelper::cpp2js_QDomNamedNodeMap(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for notations";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentType
    // Function: publicId
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentType_Wrapper::publicId
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentType* w = getWrapped();
                QString res = 
                    
                w->publicId(
                  
                );
              
            // return type: QString

            return RJSHelper::cpp2js_QString(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for publicId";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentType
    // Function: systemId
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentType_Wrapper::systemId
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentType* w = getWrapped();
                QString res = 
                    
                w->systemId(
                  
                );
              
            // return type: QString

            return RJSHelper::cpp2js_QString(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for systemId";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentType
    // Function: internalSubset
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentType_Wrapper::internalSubset
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentType* w = getWrapped();
                QString res = 
                    
                w->internalSubset(
                  
                );
              
            // return type: QString

            return RJSHelper::cpp2js_QString(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for internalSubset";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentType
    // Function: nodeType
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentType_Wrapper::nodeType
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentType* w = getWrapped();
                QDomNode::NodeType res = 
                    
                w->nodeType(
                  
                );
              
            // return type: QDomNode::NodeType

            return RJSHelper::cpp2js_QDomNode_NodeType(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for nodeType";
                  handler.trace();
                  return QJSValue();
                
              }
            

  // member functions for static properties, forward to static function
  


  // protected overwritten functions / events and their public invokable counterparts:
  
    #include "qdom_wrapper.h"

  
      // list of registered base casters for this wrapper class:
      QList<RJSBasecaster_QDomDocument*> QDomDocument_Wrapper::basecasters_QDomDocument;
    
    // static functions implementation in singleton wrapper:
    
    void QDomDocument_Wrapper::init(RJSApi& handler) {
      
        //qmlRegisterType<QDomDocument_Wrapper>("org.qcad", 1, 0, "QDomDocument_Wrapper");
        qmlRegisterInterface<QDomDocument_Wrapper>("QDomDocument_Wrapper", 1);
      

      QJSEngine* engine = handler.getEngine();

      
          // make type scriptable for JS files:
          QJSValue global = engine->globalObject();
          RJSType_QDomDocument* t = new RJSType_QDomDocument();
          global.setProperty("RJSType_QDomDocument", engine->newQObject(t));

          // initialize ID for this type:
          RJSType_QDomDocument::getIdStatic();

          

      // wrapper:
      QJSValue mo = engine->newQMetaObject(&QDomDocument_Wrapper::staticMetaObject);
      engine->globalObject().setProperty("QDomDocument_Wrapper", mo);


      
        // JS base class:
        //QJSValue mob = engine->newQMetaObject(&QDomDocument_BaseJs::staticMetaObject);
        //engine->globalObject().setProperty("QDomDocument_BaseJs", mob);
      
      QString fileName = ":generator/js/QDomDocument.js";
      QFile scriptFile(fileName);
      if (!scriptFile.open(QIODevice::ReadOnly)) {
        qWarning() << "JS script wrapper file not found:" << fileName;
        return;
      }
      QTextStream stream(&scriptFile);
      QString contents = stream.readAll();
      scriptFile.close();

      qDebug() << "Evaluating file: " << fileName;
      QJSValue result = engine->evaluate(contents, fileName);
      if (result.isError()) {
          qWarning()
              << "Uncaught exception at line"
              << result.property("lineNumber").toInt()
              << ":" << result.toString();
      }
    }
  
    /*
    // special constructor used as prototype:
    QDomDocument_Wrapper::QDomDocument_Wrapper(QJSEngine* e) : wrapped(nullptr), wrappedCreated(false) {
            //setObjectName("QDomDocument_Wrapper");
            setEngine(e);

            // signal forwarding:
            //initConnections();
          }
        
    */

    
      // special constructor to wrap existing object:
      QDomDocument_Wrapper::QDomDocument_Wrapper(RJSApi& h, QDomDocument* o, bool wrappedCreated) : RJSWrapperObj(h), wrapped(o), wrappedCreated(wrappedCreated) {
              //RDebug::incCounter(QString("QDomDocument_Wrapper_") + handler.getEngine()->objectName());
              //RDebug::incCounter(QString("QDomDocument_Wrapper"));
              //setObjectName("QDomDocument_Wrapper");
              //setHandler(h);

              // signal forwarding:
              initConnections();
            }
          

      // destructor:
      QDomDocument_Wrapper::~QDomDocument_Wrapper() {
            //RDebug::decCounter(QString("QDomDocument_Wrapper_") + handler.getEngine()->objectName());
            //RDebug::decCounter(QString("QDomDocument_Wrapper"));

            //qDebug() << "QDomDocument_Wrapper::~QDomDocument_Wrapper";

            // tell script handler that this wrapper no longer exists:
            handler.unregisterWrapper(*this);

            
            if (wrappedCreated) {
              
                  // delete wrapped object (copyable, JS ownership)
                  //qDebug() << "deleting instance of QDomDocument";
                  delete wrapped;
                
            }
            
          }
        
    // initialization of signal forwarding
    
        void QDomDocument_Wrapper::initConnections() {

          //setObjectName("QDomDocument_Wrapper");

          // tell script handler that this wrapper needs to be deleted if the engine is deleted:
          handler.registerWrapper(*this);

          
              // wrapped object is not a QObject:
              // wrapper is managed by script engine:
              //QJSEngine::setObjectOwnership(this, QJSEngine::CppOwnership);
            

          if (hasWrapped()) {
            
            // set up signal forwarding:
            
          }
        }
      

  // constructors:
  
    // Class: QDomDocument
    // Function: 
    // Source: 
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1
QDomDocument_Wrapper::QDomDocument_Wrapper
                
              (
                
                  // RJSApi:
                  QObject* h
                  ,
  const QJSValue& 
  a1
              ) 
              
                : RJSWrapperObj(*(RJSApi*)h)
              
              {
                
                  //RDebug::incCounter(QString("QDomDocument_Wrapper_") + handler.getEngine()->objectName());
                  //RDebug::incCounter(QString("QDomDocument_Wrapper"));
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: name (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        

    // call function:
    
        // construct wrapper:

        
            wrapped = new QDomDocument(
                a1_cpp
    
            );
            wrappedCreated = true;
          

        // signal forwarding:
        // TODO
        //connect(wrapped, SIGNAL(triggered(bool)), this, SLOT(triggeredEmitter(bool)));
        initConnections();
        return;

      
  }

      // check parameter types:
      if (
        RJSHelper::is_QDomDocumentType(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: doctype (QDomDocumentType)
  
QDomDocumentType a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomDocumentType(handler, a1);
        

    // call function:
    
        // construct wrapper:

        
            wrapped = new QDomDocument(
                a1_cpp
    
            );
            wrappedCreated = true;
          

        // signal forwarding:
        // TODO
        //connect(wrapped, SIGNAL(triggered(bool)), this, SLOT(triggeredEmitter(bool)));
        initConnections();
        return;

      
  }

      // check parameter types:
      if (
        RJSHelper::is_QDomDocument(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: x (QDomDocument)
  
QDomDocument a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomDocument(handler, a1);
        

    // call function:
    
        // construct wrapper:

        
            wrapped = new QDomDocument(
                a1_cpp
    
            );
            wrappedCreated = true;
          

        // signal forwarding:
        // TODO
        //connect(wrapped, SIGNAL(triggered(bool)), this, SLOT(triggeredEmitter(bool)));
        initConnections();
        return;

      
  }

      {
    

    // call function:
    
        // construct wrapper:

        
            wrapped = new QDomDocument(
                
            );
            wrappedCreated = true;
          

        // signal forwarding:
        // TODO
        //connect(wrapped, SIGNAL(triggered(bool)), this, SLOT(triggeredEmitter(bool)));
        initConnections();
        return;

      
  }

                    // no constructor without arguments defined
                    // allow constructor for prototype objects without args:
                    if (
                      a1.isUndefined()
  
                      ) {
                      wrapped = nullptr;
                      wrappedCreated = false;
                      return;
                    }
                  

                  qWarning() << "no matching constructor variant found for QDomDocument";
                  wrapped = nullptr;
                  wrappedCreated = false;
                  handler.trace();
                
              }
            

    // non-static functions:
    
    // Class: QDomDocument
    // Function: operator_equal
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomDocument_Wrapper::operator_equal
              (
                
  const QJSValue& 
  a1
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp:  (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocument* w = getWrapped();
                bool res = 
                    
                w->operator==(
                  a1_cpp
    
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for operator_equal";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocument
    // Function: operator_unequal
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomDocument_Wrapper::operator_unequal
              (
                
  const QJSValue& 
  a1
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp:  (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocument* w = getWrapped();
                bool res = 
                    
                w->operator!=(
                  a1_cpp
    
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for operator_unequal";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocument
    // Function: insertBefore
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomDocument_Wrapper::insertBefore
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

   && RJSHelper::is_QDomNode(handler, a2
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: newChild (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        
  // convert js parameter to cpp: refChild (QDomNode)
  
QDomNode a2_cpp;

      a2_cpp = RJSHelper::js2cpp_QDomNode(handler, a2);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocument* w = getWrapped();
                QDomNode res = 
                    
                w->insertBefore(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for insertBefore";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocument
    // Function: insertAfter
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomDocument_Wrapper::insertAfter
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

   && RJSHelper::is_QDomNode(handler, a2
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: newChild (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        
  // convert js parameter to cpp: refChild (QDomNode)
  
QDomNode a2_cpp;

      a2_cpp = RJSHelper::js2cpp_QDomNode(handler, a2);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocument* w = getWrapped();
                QDomNode res = 
                    
                w->insertAfter(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for insertAfter";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocument
    // Function: replaceChild
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomDocument_Wrapper::replaceChild
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

   && RJSHelper::is_QDomNode(handler, a2
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: newChild (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        
  // convert js parameter to cpp: oldChild (QDomNode)
  
QDomNode a2_cpp;

      a2_cpp = RJSHelper::js2cpp_QDomNode(handler, a2);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocument* w = getWrapped();
                QDomNode res = 
                    
                w->replaceChild(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for replaceChild";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocument
    // Function: removeChild
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomDocument_Wrapper::removeChild
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: oldChild (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocument* w = getWrapped();
                QDomNode res = 
                    
                w->removeChild(
                  a1_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for removeChild";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocument
    // Function: appendChild
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomDocument_Wrapper::appendChild
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: newChild (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocument* w = getWrapped();
                QDomNode res = 
                    
                w->appendChild(
                  a1_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for appendChild";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocument
    // Function: hasChildNodes
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocument_Wrapper::hasChildNodes
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocument* w = getWrapped();
                bool res = 
                    
                w->hasChildNodes(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for hasChildNodes";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocument
    // Function: cloneNode
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomDocument_Wrapper::cloneNode
              (
                
  const QJSValue& 
  a1
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_bool(handler, a1
    , true
  
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: deep (bool)
  
bool a1_cpp;

      
          if (a1.isUndefined()) {
            a1_cpp = true;
          }
          else {
            a1_cpp = RJSHelper::js2cpp_bool(handler, a1);
          }
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocument* w = getWrapped();
                QDomNode res = 
                    
                w->cloneNode(
                  a1_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for cloneNode";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocument
    // Function: normalize
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocument_Wrapper::normalize
              (
                
              ) 
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocument* w = getWrapped();
                
                w->normalize(
                  
                );
              
            return QJSValue();
          
  }

                  qWarning() << "no matching function variant found for normalize";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocument
    // Function: isSupported
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomDocument_Wrapper::isSupported
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

   && RJSHelper::is_QString(handler, a2
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: feature (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        
  // convert js parameter to cpp: version (QString)
  
QString a2_cpp;

      a2_cpp = RJSHelper::js2cpp_QString(handler, a2);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocument* w = getWrapped();
                bool res = 
                    
                w->isSupported(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isSupported";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocument
    // Function: nodeName
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocument_Wrapper::nodeName
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocument* w = getWrapped();
                QString res = 
                    
                w->nodeName(
                  
                );
              
            // return type: QString

            return RJSHelper::cpp2js_QString(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for nodeName";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocument
    // Function: parentNode
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocument_Wrapper::parentNode
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocument* w = getWrapped();
                QDomNode res = 
                    
                w->parentNode(
                  
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for parentNode";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocument
    // Function: childNodes
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocument_Wrapper::childNodes
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocument* w = getWrapped();
                QDomNodeList res = 
                    
                w->childNodes(
                  
                );
              
            // return type: QDomNodeList

            return RJSHelper::cpp2js_QDomNodeList(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for childNodes";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocument
    // Function: firstChild
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocument_Wrapper::firstChild
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocument* w = getWrapped();
                QDomNode res = 
                    
                w->firstChild(
                  
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for firstChild";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocument
    // Function: lastChild
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocument_Wrapper::lastChild
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocument* w = getWrapped();
                QDomNode res = 
                    
                w->lastChild(
                  
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for lastChild";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocument
    // Function: previousSibling
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocument_Wrapper::previousSibling
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocument* w = getWrapped();
                QDomNode res = 
                    
                w->previousSibling(
                  
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for previousSibling";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocument
    // Function: nextSibling
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocument_Wrapper::nextSibling
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocument* w = getWrapped();
                QDomNode res = 
                    
                w->nextSibling(
                  
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for nextSibling";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocument
    // Function: attributes
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocument_Wrapper::attributes
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocument* w = getWrapped();
                QDomNamedNodeMap res = 
                    
                w->attributes(
                  
                );
              
            // return type: QDomNamedNodeMap

            return RJSHelper::cpp2js_QDomNamedNodeMap(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for attributes";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocument
    // Function: ownerDocument
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocument_Wrapper::ownerDocument
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocument* w = getWrapped();
                QDomDocument res = 
                    
                w->ownerDocument(
                  
                );
              
            // return type: QDomDocument

            return RJSHelper::cpp2js_QDomDocument(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for ownerDocument";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocument
    // Function: namespaceURI
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocument_Wrapper::namespaceURI
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocument* w = getWrapped();
                QString res = 
                    
                w->namespaceURI(
                  
                );
              
            // return type: QString

            return RJSHelper::cpp2js_QString(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for namespaceURI";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocument
    // Function: localName
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocument_Wrapper::localName
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocument* w = getWrapped();
                QString res = 
                    
                w->localName(
                  
                );
              
            // return type: QString

            return RJSHelper::cpp2js_QString(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for localName";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocument
    // Function: hasAttributes
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocument_Wrapper::hasAttributes
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocument* w = getWrapped();
                bool res = 
                    
                w->hasAttributes(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for hasAttributes";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocument
    // Function: nodeValue
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocument_Wrapper::nodeValue
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocument* w = getWrapped();
                QString res = 
                    
                w->nodeValue(
                  
                );
              
            // return type: QString

            return RJSHelper::cpp2js_QString(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for nodeValue";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocument
    // Function: setNodeValue
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomDocument_Wrapper::setNodeValue
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp:  (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocument* w = getWrapped();
                
                w->setNodeValue(
                  a1_cpp
    
                );
              
            return QJSValue();
          
  }

                  qWarning() << "no matching function variant found for setNodeValue";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocument
    // Function: prefix
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocument_Wrapper::prefix
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocument* w = getWrapped();
                QString res = 
                    
                w->prefix(
                  
                );
              
            // return type: QString

            return RJSHelper::cpp2js_QString(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for prefix";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocument
    // Function: setPrefix
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomDocument_Wrapper::setPrefix
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: pre (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocument* w = getWrapped();
                
                w->setPrefix(
                  a1_cpp
    
                );
              
            return QJSValue();
          
  }

                  qWarning() << "no matching function variant found for setPrefix";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocument
    // Function: isAttr
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocument_Wrapper::isAttr
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocument* w = getWrapped();
                bool res = 
                    
                w->isAttr(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isAttr";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocument
    // Function: isCDATASection
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocument_Wrapper::isCDATASection
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocument* w = getWrapped();
                bool res = 
                    
                w->isCDATASection(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isCDATASection";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocument
    // Function: isDocumentFragment
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocument_Wrapper::isDocumentFragment
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocument* w = getWrapped();
                bool res = 
                    
                w->isDocumentFragment(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isDocumentFragment";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocument
    // Function: isDocument
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocument_Wrapper::isDocument
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocument* w = getWrapped();
                bool res = 
                    
                w->isDocument(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isDocument";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocument
    // Function: isDocumentType
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocument_Wrapper::isDocumentType
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocument* w = getWrapped();
                bool res = 
                    
                w->isDocumentType(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isDocumentType";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocument
    // Function: isElement
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocument_Wrapper::isElement
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocument* w = getWrapped();
                bool res = 
                    
                w->isElement(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isElement";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocument
    // Function: isEntityReference
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocument_Wrapper::isEntityReference
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocument* w = getWrapped();
                bool res = 
                    
                w->isEntityReference(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isEntityReference";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocument
    // Function: isText
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocument_Wrapper::isText
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocument* w = getWrapped();
                bool res = 
                    
                w->isText(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isText";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocument
    // Function: isEntity
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocument_Wrapper::isEntity
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocument* w = getWrapped();
                bool res = 
                    
                w->isEntity(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isEntity";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocument
    // Function: isNotation
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocument_Wrapper::isNotation
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocument* w = getWrapped();
                bool res = 
                    
                w->isNotation(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isNotation";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocument
    // Function: isProcessingInstruction
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocument_Wrapper::isProcessingInstruction
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocument* w = getWrapped();
                bool res = 
                    
                w->isProcessingInstruction(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isProcessingInstruction";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocument
    // Function: isCharacterData
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocument_Wrapper::isCharacterData
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocument* w = getWrapped();
                bool res = 
                    
                w->isCharacterData(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isCharacterData";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocument
    // Function: isComment
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocument_Wrapper::isComment
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocument* w = getWrapped();
                bool res = 
                    
                w->isComment(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isComment";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocument
    // Function: namedItem
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomDocument_Wrapper::namedItem
              (
                
  const QJSValue& 
  a1
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: name (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocument* w = getWrapped();
                QDomNode res = 
                    
                w->namedItem(
                  a1_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for namedItem";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocument
    // Function: isNull
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocument_Wrapper::isNull
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocument* w = getWrapped();
                bool res = 
                    
                w->isNull(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isNull";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocument
    // Function: clear
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocument_Wrapper::clear
              (
                
              ) 
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocument* w = getWrapped();
                
                w->clear(
                  
                );
              
            return QJSValue();
          
  }

                  qWarning() << "no matching function variant found for clear";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocument
    // Function: toAttr
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocument_Wrapper::toAttr
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocument* w = getWrapped();
                QDomAttr res = 
                    
                w->toAttr(
                  
                );
              
            // return type: QDomAttr

            return RJSHelper::cpp2js_QDomAttr(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toAttr";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocument
    // Function: toCDATASection
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocument_Wrapper::toCDATASection
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocument* w = getWrapped();
                QDomCDATASection res = 
                    
                w->toCDATASection(
                  
                );
              
            // return type: QDomCDATASection

            return RJSHelper::cpp2js_QDomCDATASection(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toCDATASection";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocument
    // Function: toDocumentFragment
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocument_Wrapper::toDocumentFragment
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocument* w = getWrapped();
                QDomDocumentFragment res = 
                    
                w->toDocumentFragment(
                  
                );
              
            // return type: QDomDocumentFragment

            return RJSHelper::cpp2js_QDomDocumentFragment(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toDocumentFragment";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocument
    // Function: toDocument
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocument_Wrapper::toDocument
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocument* w = getWrapped();
                QDomDocument res = 
                    
                w->toDocument(
                  
                );
              
            // return type: QDomDocument

            return RJSHelper::cpp2js_QDomDocument(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toDocument";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocument
    // Function: toDocumentType
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocument_Wrapper::toDocumentType
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocument* w = getWrapped();
                QDomDocumentType res = 
                    
                w->toDocumentType(
                  
                );
              
            // return type: QDomDocumentType

            return RJSHelper::cpp2js_QDomDocumentType(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toDocumentType";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocument
    // Function: toElement
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocument_Wrapper::toElement
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocument* w = getWrapped();
                QDomElement res = 
                    
                w->toElement(
                  
                );
              
            // return type: QDomElement

            return RJSHelper::cpp2js_QDomElement(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toElement";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocument
    // Function: toEntityReference
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocument_Wrapper::toEntityReference
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocument* w = getWrapped();
                QDomEntityReference res = 
                    
                w->toEntityReference(
                  
                );
              
            // return type: QDomEntityReference

            return RJSHelper::cpp2js_QDomEntityReference(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toEntityReference";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocument
    // Function: toText
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocument_Wrapper::toText
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocument* w = getWrapped();
                QDomText res = 
                    
                w->toText(
                  
                );
              
            // return type: QDomText

            return RJSHelper::cpp2js_QDomText(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toText";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocument
    // Function: toEntity
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocument_Wrapper::toEntity
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocument* w = getWrapped();
                QDomEntity res = 
                    
                w->toEntity(
                  
                );
              
            // return type: QDomEntity

            return RJSHelper::cpp2js_QDomEntity(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toEntity";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocument
    // Function: toNotation
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocument_Wrapper::toNotation
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocument* w = getWrapped();
                QDomNotation res = 
                    
                w->toNotation(
                  
                );
              
            // return type: QDomNotation

            return RJSHelper::cpp2js_QDomNotation(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toNotation";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocument
    // Function: toProcessingInstruction
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocument_Wrapper::toProcessingInstruction
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocument* w = getWrapped();
                QDomProcessingInstruction res = 
                    
                w->toProcessingInstruction(
                  
                );
              
            // return type: QDomProcessingInstruction

            return RJSHelper::cpp2js_QDomProcessingInstruction(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toProcessingInstruction";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocument
    // Function: toCharacterData
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocument_Wrapper::toCharacterData
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocument* w = getWrapped();
                QDomCharacterData res = 
                    
                w->toCharacterData(
                  
                );
              
            // return type: QDomCharacterData

            return RJSHelper::cpp2js_QDomCharacterData(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toCharacterData";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocument
    // Function: toComment
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocument_Wrapper::toComment
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocument* w = getWrapped();
                QDomComment res = 
                    
                w->toComment(
                  
                );
              
            // return type: QDomComment

            return RJSHelper::cpp2js_QDomComment(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toComment";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocument
    // Function: firstChildElement
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomDocument_Wrapper::firstChildElement
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
    , true
  
  )

   && RJSHelper::is_QString(handler, a2
    , true
  
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: tagName (QString)
  
QString a1_cpp;

      
          if (a1.isUndefined()) {
            a1_cpp = QString();
          }
          else {
            a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
          }
        
  // convert js parameter to cpp: namespaceURI (QString)
  
QString a2_cpp;

      
          if (a2.isUndefined()) {
            a2_cpp = QString();
          }
          else {
            a2_cpp = RJSHelper::js2cpp_QString(handler, a2);
          }
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocument* w = getWrapped();
                QDomElement res = 
                    
                w->firstChildElement(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomElement

            return RJSHelper::cpp2js_QDomElement(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for firstChildElement";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocument
    // Function: lastChildElement
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomDocument_Wrapper::lastChildElement
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
    , true
  
  )

   && RJSHelper::is_QString(handler, a2
    , true
  
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: tagName (QString)
  
QString a1_cpp;

      
          if (a1.isUndefined()) {
            a1_cpp = QString();
          }
          else {
            a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
          }
        
  // convert js parameter to cpp: namespaceURI (QString)
  
QString a2_cpp;

      
          if (a2.isUndefined()) {
            a2_cpp = QString();
          }
          else {
            a2_cpp = RJSHelper::js2cpp_QString(handler, a2);
          }
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocument* w = getWrapped();
                QDomElement res = 
                    
                w->lastChildElement(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomElement

            return RJSHelper::cpp2js_QDomElement(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for lastChildElement";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocument
    // Function: previousSiblingElement
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomDocument_Wrapper::previousSiblingElement
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
    , true
  
  )

   && RJSHelper::is_QString(handler, a2
    , true
  
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: tagName (QString)
  
QString a1_cpp;

      
          if (a1.isUndefined()) {
            a1_cpp = QString();
          }
          else {
            a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
          }
        
  // convert js parameter to cpp: namespaceURI (QString)
  
QString a2_cpp;

      
          if (a2.isUndefined()) {
            a2_cpp = QString();
          }
          else {
            a2_cpp = RJSHelper::js2cpp_QString(handler, a2);
          }
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocument* w = getWrapped();
                QDomElement res = 
                    
                w->previousSiblingElement(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomElement

            return RJSHelper::cpp2js_QDomElement(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for previousSiblingElement";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocument
    // Function: nextSiblingElement
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomDocument_Wrapper::nextSiblingElement
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
    , true
  
  )

   && RJSHelper::is_QString(handler, a2
    , true
  
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: taName (QString)
  
QString a1_cpp;

      
          if (a1.isUndefined()) {
            a1_cpp = QString();
          }
          else {
            a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
          }
        
  // convert js parameter to cpp: namespaceURI (QString)
  
QString a2_cpp;

      
          if (a2.isUndefined()) {
            a2_cpp = QString();
          }
          else {
            a2_cpp = RJSHelper::js2cpp_QString(handler, a2);
          }
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocument* w = getWrapped();
                QDomElement res = 
                    
                w->nextSiblingElement(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomElement

            return RJSHelper::cpp2js_QDomElement(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for nextSiblingElement";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocument
    // Function: lineNumber
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocument_Wrapper::lineNumber
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocument* w = getWrapped();
                int res = 
                    
                w->lineNumber(
                  
                );
              
            // return type: int

            return RJSHelper::cpp2js_int(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for lineNumber";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocument
    // Function: columnNumber
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocument_Wrapper::columnNumber
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocument* w = getWrapped();
                int res = 
                    
                w->columnNumber(
                  
                );
              
            // return type: int

            return RJSHelper::cpp2js_int(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for columnNumber";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocument
    // Function: operator_assign
    // Source: 
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomDocument_Wrapper::operator_assign
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomDocument(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp:  (QDomDocument)
  
QDomDocument a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomDocument(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocument* w = getWrapped();
                
                      // return type is reference:
                      // use pointer instead 3:
                      QDomDocument* res =
                    &
                w->operator=(
                  a1_cpp
    
                );
              
            // return type: QDomDocument&

            return RJSHelper::cpp2js_QDomDocument(
              handler, 
              // non-copyable: false
                  // return type is reference, type is copyable:
                  // convert pointer back to reference:
                  *res
                
              );
            
  }

                  qWarning() << "no matching function variant found for operator_assign";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocument
    // Function: createElement
    // Source: 
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomDocument_Wrapper::createElement
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: tagName (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocument* w = getWrapped();
                QDomElement res = 
                    
                w->createElement(
                  a1_cpp
    
                );
              
            // return type: QDomElement

            return RJSHelper::cpp2js_QDomElement(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for createElement";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocument
    // Function: createDocumentFragment
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocument_Wrapper::createDocumentFragment
              (
                
              ) 
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocument* w = getWrapped();
                QDomDocumentFragment res = 
                    
                w->createDocumentFragment(
                  
                );
              
            // return type: QDomDocumentFragment

            return RJSHelper::cpp2js_QDomDocumentFragment(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for createDocumentFragment";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocument
    // Function: createTextNode
    // Source: 
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomDocument_Wrapper::createTextNode
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: data (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocument* w = getWrapped();
                QDomText res = 
                    
                w->createTextNode(
                  a1_cpp
    
                );
              
            // return type: QDomText

            return RJSHelper::cpp2js_QDomText(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for createTextNode";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocument
    // Function: createComment
    // Source: 
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomDocument_Wrapper::createComment
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: data (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocument* w = getWrapped();
                QDomComment res = 
                    
                w->createComment(
                  a1_cpp
    
                );
              
            // return type: QDomComment

            return RJSHelper::cpp2js_QDomComment(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for createComment";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocument
    // Function: createCDATASection
    // Source: 
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomDocument_Wrapper::createCDATASection
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: data (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocument* w = getWrapped();
                QDomCDATASection res = 
                    
                w->createCDATASection(
                  a1_cpp
    
                );
              
            // return type: QDomCDATASection

            return RJSHelper::cpp2js_QDomCDATASection(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for createCDATASection";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocument
    // Function: createProcessingInstruction
    // Source: 
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomDocument_Wrapper::createProcessingInstruction
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

   && RJSHelper::is_QString(handler, a2
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: target (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        
  // convert js parameter to cpp: data (QString)
  
QString a2_cpp;

      a2_cpp = RJSHelper::js2cpp_QString(handler, a2);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocument* w = getWrapped();
                QDomProcessingInstruction res = 
                    
                w->createProcessingInstruction(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomProcessingInstruction

            return RJSHelper::cpp2js_QDomProcessingInstruction(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for createProcessingInstruction";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocument
    // Function: createAttribute
    // Source: 
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomDocument_Wrapper::createAttribute
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: name (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocument* w = getWrapped();
                QDomAttr res = 
                    
                w->createAttribute(
                  a1_cpp
    
                );
              
            // return type: QDomAttr

            return RJSHelper::cpp2js_QDomAttr(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for createAttribute";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocument
    // Function: createEntityReference
    // Source: 
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomDocument_Wrapper::createEntityReference
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: name (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocument* w = getWrapped();
                QDomEntityReference res = 
                    
                w->createEntityReference(
                  a1_cpp
    
                );
              
            // return type: QDomEntityReference

            return RJSHelper::cpp2js_QDomEntityReference(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for createEntityReference";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocument
    // Function: elementsByTagName
    // Source: 
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomDocument_Wrapper::elementsByTagName
              (
                
  const QJSValue& 
  a1
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: tagname (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocument* w = getWrapped();
                QDomNodeList res = 
                    
                w->elementsByTagName(
                  a1_cpp
    
                );
              
            // return type: QDomNodeList

            return RJSHelper::cpp2js_QDomNodeList(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for elementsByTagName";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocument
    // Function: importNode
    // Source: 
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomDocument_Wrapper::importNode
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

   && RJSHelper::is_bool(handler, a2
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: importedNode (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        
  // convert js parameter to cpp: deep (bool)
  
bool a2_cpp;

      a2_cpp = RJSHelper::js2cpp_bool(handler, a2);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocument* w = getWrapped();
                QDomNode res = 
                    
                w->importNode(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for importNode";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocument
    // Function: createElementNS
    // Source: 
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomDocument_Wrapper::createElementNS
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

   && RJSHelper::is_QString(handler, a2
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: nsURI (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        
  // convert js parameter to cpp: qName (QString)
  
QString a2_cpp;

      a2_cpp = RJSHelper::js2cpp_QString(handler, a2);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocument* w = getWrapped();
                QDomElement res = 
                    
                w->createElementNS(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomElement

            return RJSHelper::cpp2js_QDomElement(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for createElementNS";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocument
    // Function: createAttributeNS
    // Source: 
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomDocument_Wrapper::createAttributeNS
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

   && RJSHelper::is_QString(handler, a2
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: nsURI (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        
  // convert js parameter to cpp: qName (QString)
  
QString a2_cpp;

      a2_cpp = RJSHelper::js2cpp_QString(handler, a2);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocument* w = getWrapped();
                QDomAttr res = 
                    
                w->createAttributeNS(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomAttr

            return RJSHelper::cpp2js_QDomAttr(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for createAttributeNS";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocument
    // Function: elementsByTagNameNS
    // Source: 
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomDocument_Wrapper::elementsByTagNameNS
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

   && RJSHelper::is_QString(handler, a2
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: nsURI (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        
  // convert js parameter to cpp: localName (QString)
  
QString a2_cpp;

      a2_cpp = RJSHelper::js2cpp_QString(handler, a2);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocument* w = getWrapped();
                QDomNodeList res = 
                    
                w->elementsByTagNameNS(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomNodeList

            return RJSHelper::cpp2js_QDomNodeList(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for elementsByTagNameNS";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocument
    // Function: elementById
    // Source: 
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomDocument_Wrapper::elementById
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: elementId (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocument* w = getWrapped();
                QDomElement res = 
                    
                w->elementById(
                  a1_cpp
    
                );
              
            // return type: QDomElement

            return RJSHelper::cpp2js_QDomElement(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for elementById";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocument
    // Function: doctype
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocument_Wrapper::doctype
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocument* w = getWrapped();
                QDomDocumentType res = 
                    
                w->doctype(
                  
                );
              
            // return type: QDomDocumentType

            return RJSHelper::cpp2js_QDomDocumentType(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for doctype";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocument
    // Function: implementation
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocument_Wrapper::implementation
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocument* w = getWrapped();
                QDomImplementation res = 
                    
                w->implementation(
                  
                );
              
            // return type: QDomImplementation

            return RJSHelper::cpp2js_QDomImplementation(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for implementation";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocument
    // Function: documentElement
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocument_Wrapper::documentElement
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocument* w = getWrapped();
                QDomElement res = 
                    
                w->documentElement(
                  
                );
              
            // return type: QDomElement

            return RJSHelper::cpp2js_QDomElement(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for documentElement";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocument
    // Function: nodeType
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocument_Wrapper::nodeType
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocument* w = getWrapped();
                QDomNode::NodeType res = 
                    
                w->nodeType(
                  
                );
              
            // return type: QDomNode::NodeType

            return RJSHelper::cpp2js_QDomNode_NodeType(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for nodeType";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocument
    // Function: setContent
    // Source: 
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomDocument_Wrapper::setContent
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QByteArray(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: text (QByteArray)
  
QByteArray a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QByteArray(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocument* w = getWrapped();
                QDomDocument::ParseResult res = 
                    
                w->setContent(
                  a1_cpp
    
                );
              
            // return type: QDomDocument::ParseResult

            return RJSHelper::cpp2js_QDomDocument_ParseResult(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: text (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocument* w = getWrapped();
                QDomDocument::ParseResult res = 
                    
                w->setContent(
                  a1_cpp
    
                );
              
            // return type: QDomDocument::ParseResult

            return RJSHelper::cpp2js_QDomDocument_ParseResult(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

      // check parameter types:
      if (
        RJSHelper::is_QIODevice_ptr(handler, a1
    , true
  
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: dev (QIODevice)
  

          // pointer:
          QIODevice*
         a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QIODevice_ptr(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocument* w = getWrapped();
                QDomDocument::ParseResult res = 
                    
                w->setContent(
                  a1_cpp
    
                );
              
            // return type: QDomDocument::ParseResult

            return RJSHelper::cpp2js_QDomDocument_ParseResult(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

      // check parameter types:
      if (
        RJSHelper::is_QByteArray(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: text (QByteArray)
  
QByteArray a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QByteArray(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocument* w = getWrapped();
                QDomDocument::ParseResult res = 
                    
                w->setContent(
                  a1_cpp
    
                );
              
            // return type: QDomDocument::ParseResult

            return RJSHelper::cpp2js_QDomDocument_ParseResult(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for setContent";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocument
    // Function: toString
    // Source: 
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomDocument_Wrapper::
                          // special function name for JS wrapper:
                          toStr
              (
                
  const QJSValue& 
  a1
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_int(handler, a1
    , true
  
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp:  (int)
  
int a1_cpp;

      
          if (a1.isUndefined()) {
            a1_cpp = 1;
          }
          else {
            a1_cpp = RJSHelper::js2cpp_int(handler, a1);
          }
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocument* w = getWrapped();
                QString res = 
                    
                w->toString(
                  a1_cpp
    
                );
              
            // return type: QString

            return RJSHelper::cpp2js_QString(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toString";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocument
    // Function: toByteArray
    // Source: 
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomDocument_Wrapper::toByteArray
              (
                
  const QJSValue& 
  a1
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_int(handler, a1
    , true
  
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp:  (int)
  
int a1_cpp;

      
          if (a1.isUndefined()) {
            a1_cpp = 1;
          }
          else {
            a1_cpp = RJSHelper::js2cpp_int(handler, a1);
          }
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocument* w = getWrapped();
                QByteArray res = 
                    
                w->toByteArray(
                  a1_cpp
    
                );
              
            // return type: QByteArray

            return RJSHelper::cpp2js_QByteArray(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toByteArray";
                  handler.trace();
                  return QJSValue();
                
              }
            

  // member functions for static properties, forward to static function
  


  // protected overwritten functions / events and their public invokable counterparts:
  
    #include "qdom_wrapper.h"

  
      // list of registered base casters for this wrapper class:
      QList<RJSBasecaster_QDomNamedNodeMap*> QDomNamedNodeMap_Wrapper::basecasters_QDomNamedNodeMap;
    
    // static functions implementation in singleton wrapper:
    
    void QDomNamedNodeMap_Wrapper::init(RJSApi& handler) {
      
        //qmlRegisterType<QDomNamedNodeMap_Wrapper>("org.qcad", 1, 0, "QDomNamedNodeMap_Wrapper");
        qmlRegisterInterface<QDomNamedNodeMap_Wrapper>("QDomNamedNodeMap_Wrapper", 1);
      

      QJSEngine* engine = handler.getEngine();

      
          // make type scriptable for JS files:
          QJSValue global = engine->globalObject();
          RJSType_QDomNamedNodeMap* t = new RJSType_QDomNamedNodeMap();
          global.setProperty("RJSType_QDomNamedNodeMap", engine->newQObject(t));

          // initialize ID for this type:
          RJSType_QDomNamedNodeMap::getIdStatic();

          

      // wrapper:
      QJSValue mo = engine->newQMetaObject(&QDomNamedNodeMap_Wrapper::staticMetaObject);
      engine->globalObject().setProperty("QDomNamedNodeMap_Wrapper", mo);


      
        // JS base class:
        //QJSValue mob = engine->newQMetaObject(&QDomNamedNodeMap_BaseJs::staticMetaObject);
        //engine->globalObject().setProperty("QDomNamedNodeMap_BaseJs", mob);
      
      QString fileName = ":generator/js/QDomNamedNodeMap.js";
      QFile scriptFile(fileName);
      if (!scriptFile.open(QIODevice::ReadOnly)) {
        qWarning() << "JS script wrapper file not found:" << fileName;
        return;
      }
      QTextStream stream(&scriptFile);
      QString contents = stream.readAll();
      scriptFile.close();

      qDebug() << "Evaluating file: " << fileName;
      QJSValue result = engine->evaluate(contents, fileName);
      if (result.isError()) {
          qWarning()
              << "Uncaught exception at line"
              << result.property("lineNumber").toInt()
              << ":" << result.toString();
      }
    }
  
    /*
    // special constructor used as prototype:
    QDomNamedNodeMap_Wrapper::QDomNamedNodeMap_Wrapper(QJSEngine* e) : wrapped(nullptr), wrappedCreated(false) {
            //setObjectName("QDomNamedNodeMap_Wrapper");
            setEngine(e);

            // signal forwarding:
            //initConnections();
          }
        
    */

    
      // special constructor to wrap existing object:
      QDomNamedNodeMap_Wrapper::QDomNamedNodeMap_Wrapper(RJSApi& h, QDomNamedNodeMap* o, bool wrappedCreated) : RJSWrapperObj(h), wrapped(o), wrappedCreated(wrappedCreated) {
              //RDebug::incCounter(QString("QDomNamedNodeMap_Wrapper_") + handler.getEngine()->objectName());
              //RDebug::incCounter(QString("QDomNamedNodeMap_Wrapper"));
              //setObjectName("QDomNamedNodeMap_Wrapper");
              //setHandler(h);

              // signal forwarding:
              initConnections();
            }
          

      // destructor:
      QDomNamedNodeMap_Wrapper::~QDomNamedNodeMap_Wrapper() {
            //RDebug::decCounter(QString("QDomNamedNodeMap_Wrapper_") + handler.getEngine()->objectName());
            //RDebug::decCounter(QString("QDomNamedNodeMap_Wrapper"));

            //qDebug() << "QDomNamedNodeMap_Wrapper::~QDomNamedNodeMap_Wrapper";

            // tell script handler that this wrapper no longer exists:
            handler.unregisterWrapper(*this);

            
            if (wrappedCreated) {
              
                  // delete wrapped object (copyable, JS ownership)
                  //qDebug() << "deleting instance of QDomNamedNodeMap";
                  delete wrapped;
                
            }
            
          }
        
    // initialization of signal forwarding
    
        void QDomNamedNodeMap_Wrapper::initConnections() {

          //setObjectName("QDomNamedNodeMap_Wrapper");

          // tell script handler that this wrapper needs to be deleted if the engine is deleted:
          handler.registerWrapper(*this);

          
              // wrapped object is not a QObject:
              // wrapper is managed by script engine:
              //QJSEngine::setObjectOwnership(this, QJSEngine::CppOwnership);
            

          if (hasWrapped()) {
            
            // set up signal forwarding:
            
          }
        }
      

  // constructors:
  
    // Class: QDomNamedNodeMap
    // Function: 
    // Source: 
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1
QDomNamedNodeMap_Wrapper::QDomNamedNodeMap_Wrapper
                
              (
                
                  // RJSApi:
                  QObject* h
                  ,
  const QJSValue& 
  a1
              ) 
              
                : RJSWrapperObj(*(RJSApi*)h)
              
              {
                
                  //RDebug::incCounter(QString("QDomNamedNodeMap_Wrapper_") + handler.getEngine()->objectName());
                  //RDebug::incCounter(QString("QDomNamedNodeMap_Wrapper"));
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNamedNodeMap(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp:  (QDomNamedNodeMap)
  
QDomNamedNodeMap a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNamedNodeMap(handler, a1);
        

    // call function:
    
        // construct wrapper:

        
            wrapped = new QDomNamedNodeMap(
                a1_cpp
    
            );
            wrappedCreated = true;
          

        // signal forwarding:
        // TODO
        //connect(wrapped, SIGNAL(triggered(bool)), this, SLOT(triggeredEmitter(bool)));
        initConnections();
        return;

      
  }

      {
    

    // call function:
    
        // construct wrapper:

        
            wrapped = new QDomNamedNodeMap(
                
            );
            wrappedCreated = true;
          

        // signal forwarding:
        // TODO
        //connect(wrapped, SIGNAL(triggered(bool)), this, SLOT(triggeredEmitter(bool)));
        initConnections();
        return;

      
  }

                    // no constructor without arguments defined
                    // allow constructor for prototype objects without args:
                    if (
                      a1.isUndefined()
  
                      ) {
                      wrapped = nullptr;
                      wrappedCreated = false;
                      return;
                    }
                  

                  qWarning() << "no matching constructor variant found for QDomNamedNodeMap";
                  wrapped = nullptr;
                  wrappedCreated = false;
                  handler.trace();
                
              }
            

    // non-static functions:
    
    // Class: QDomNamedNodeMap
    // Function: operator_assign
    // Source: 
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomNamedNodeMap_Wrapper::operator_assign
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNamedNodeMap(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp:  (QDomNamedNodeMap)
  
QDomNamedNodeMap a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNamedNodeMap(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNamedNodeMap* w = getWrapped();
                
                      // return type is reference:
                      // use pointer instead 3:
                      QDomNamedNodeMap* res =
                    &
                w->operator=(
                  a1_cpp
    
                );
              
            // return type: QDomNamedNodeMap&

            return RJSHelper::cpp2js_QDomNamedNodeMap(
              handler, 
              // non-copyable: false
                  // return type is reference, type is copyable:
                  // convert pointer back to reference:
                  *res
                
              );
            
  }

                  qWarning() << "no matching function variant found for operator_assign";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNamedNodeMap
    // Function: operator_equal
    // Source: 
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomNamedNodeMap_Wrapper::operator_equal
              (
                
  const QJSValue& 
  a1
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNamedNodeMap(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp:  (QDomNamedNodeMap)
  
QDomNamedNodeMap a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNamedNodeMap(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNamedNodeMap* w = getWrapped();
                bool res = 
                    
                w->operator==(
                  a1_cpp
    
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for operator_equal";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNamedNodeMap
    // Function: operator_unequal
    // Source: 
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomNamedNodeMap_Wrapper::operator_unequal
              (
                
  const QJSValue& 
  a1
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNamedNodeMap(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp:  (QDomNamedNodeMap)
  
QDomNamedNodeMap a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNamedNodeMap(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNamedNodeMap* w = getWrapped();
                bool res = 
                    
                w->operator!=(
                  a1_cpp
    
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for operator_unequal";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNamedNodeMap
    // Function: namedItem
    // Source: 
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomNamedNodeMap_Wrapper::namedItem
              (
                
  const QJSValue& 
  a1
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: name (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNamedNodeMap* w = getWrapped();
                QDomNode res = 
                    
                w->namedItem(
                  a1_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for namedItem";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNamedNodeMap
    // Function: setNamedItem
    // Source: 
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomNamedNodeMap_Wrapper::setNamedItem
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: newNode (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNamedNodeMap* w = getWrapped();
                QDomNode res = 
                    
                w->setNamedItem(
                  a1_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for setNamedItem";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNamedNodeMap
    // Function: removeNamedItem
    // Source: 
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomNamedNodeMap_Wrapper::removeNamedItem
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: name (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNamedNodeMap* w = getWrapped();
                QDomNode res = 
                    
                w->removeNamedItem(
                  a1_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for removeNamedItem";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNamedNodeMap
    // Function: item
    // Source: 
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomNamedNodeMap_Wrapper::item
              (
                
  const QJSValue& 
  a1
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_int(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: index (int)
  
int a1_cpp;

      a1_cpp = RJSHelper::js2cpp_int(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNamedNodeMap* w = getWrapped();
                QDomNode res = 
                    
                w->item(
                  a1_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for item";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNamedNodeMap
    // Function: namedItemNS
    // Source: 
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomNamedNodeMap_Wrapper::namedItemNS
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

   && RJSHelper::is_QString(handler, a2
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: nsURI (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        
  // convert js parameter to cpp: localName (QString)
  
QString a2_cpp;

      a2_cpp = RJSHelper::js2cpp_QString(handler, a2);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNamedNodeMap* w = getWrapped();
                QDomNode res = 
                    
                w->namedItemNS(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for namedItemNS";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNamedNodeMap
    // Function: setNamedItemNS
    // Source: 
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomNamedNodeMap_Wrapper::setNamedItemNS
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: newNode (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNamedNodeMap* w = getWrapped();
                QDomNode res = 
                    
                w->setNamedItemNS(
                  a1_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for setNamedItemNS";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNamedNodeMap
    // Function: removeNamedItemNS
    // Source: 
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomNamedNodeMap_Wrapper::removeNamedItemNS
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

   && RJSHelper::is_QString(handler, a2
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: nsURI (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        
  // convert js parameter to cpp: localName (QString)
  
QString a2_cpp;

      a2_cpp = RJSHelper::js2cpp_QString(handler, a2);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNamedNodeMap* w = getWrapped();
                QDomNode res = 
                    
                w->removeNamedItemNS(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for removeNamedItemNS";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNamedNodeMap
    // Function: length
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNamedNodeMap_Wrapper::length
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNamedNodeMap* w = getWrapped();
                int res = 
                    
                w->length(
                  
                );
              
            // return type: int

            return RJSHelper::cpp2js_int(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for length";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNamedNodeMap
    // Function: count
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNamedNodeMap_Wrapper::count
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNamedNodeMap* w = getWrapped();
                int res = 
                    
                w->count(
                  
                );
              
            // return type: int

            return RJSHelper::cpp2js_int(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for count";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNamedNodeMap
    // Function: size
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNamedNodeMap_Wrapper::size
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNamedNodeMap* w = getWrapped();
                int res = 
                    
                w->size(
                  
                );
              
            // return type: int

            return RJSHelper::cpp2js_int(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for size";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNamedNodeMap
    // Function: isEmpty
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNamedNodeMap_Wrapper::isEmpty
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNamedNodeMap* w = getWrapped();
                bool res = 
                    
                w->isEmpty(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isEmpty";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNamedNodeMap
    // Function: contains
    // Source: 
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomNamedNodeMap_Wrapper::contains
              (
                
  const QJSValue& 
  a1
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: name (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNamedNodeMap* w = getWrapped();
                bool res = 
                    
                w->contains(
                  a1_cpp
    
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for contains";
                  handler.trace();
                  return QJSValue();
                
              }
            

  // member functions for static properties, forward to static function
  


  // protected overwritten functions / events and their public invokable counterparts:
  
    #include "qdom_wrapper.h"

  
      // list of registered base casters for this wrapper class:
      QList<RJSBasecaster_QDomDocumentFragment*> QDomDocumentFragment_Wrapper::basecasters_QDomDocumentFragment;
    
    // static functions implementation in singleton wrapper:
    
    void QDomDocumentFragment_Wrapper::init(RJSApi& handler) {
      
        //qmlRegisterType<QDomDocumentFragment_Wrapper>("org.qcad", 1, 0, "QDomDocumentFragment_Wrapper");
        qmlRegisterInterface<QDomDocumentFragment_Wrapper>("QDomDocumentFragment_Wrapper", 1);
      

      QJSEngine* engine = handler.getEngine();

      
          // make type scriptable for JS files:
          QJSValue global = engine->globalObject();
          RJSType_QDomDocumentFragment* t = new RJSType_QDomDocumentFragment();
          global.setProperty("RJSType_QDomDocumentFragment", engine->newQObject(t));

          // initialize ID for this type:
          RJSType_QDomDocumentFragment::getIdStatic();

          

      // wrapper:
      QJSValue mo = engine->newQMetaObject(&QDomDocumentFragment_Wrapper::staticMetaObject);
      engine->globalObject().setProperty("QDomDocumentFragment_Wrapper", mo);


      
        // JS base class:
        //QJSValue mob = engine->newQMetaObject(&QDomDocumentFragment_BaseJs::staticMetaObject);
        //engine->globalObject().setProperty("QDomDocumentFragment_BaseJs", mob);
      
      QString fileName = ":generator/js/QDomDocumentFragment.js";
      QFile scriptFile(fileName);
      if (!scriptFile.open(QIODevice::ReadOnly)) {
        qWarning() << "JS script wrapper file not found:" << fileName;
        return;
      }
      QTextStream stream(&scriptFile);
      QString contents = stream.readAll();
      scriptFile.close();

      qDebug() << "Evaluating file: " << fileName;
      QJSValue result = engine->evaluate(contents, fileName);
      if (result.isError()) {
          qWarning()
              << "Uncaught exception at line"
              << result.property("lineNumber").toInt()
              << ":" << result.toString();
      }
    }
  
    /*
    // special constructor used as prototype:
    QDomDocumentFragment_Wrapper::QDomDocumentFragment_Wrapper(QJSEngine* e) : wrapped(nullptr), wrappedCreated(false) {
            //setObjectName("QDomDocumentFragment_Wrapper");
            setEngine(e);

            // signal forwarding:
            //initConnections();
          }
        
    */

    
      // special constructor to wrap existing object:
      QDomDocumentFragment_Wrapper::QDomDocumentFragment_Wrapper(RJSApi& h, QDomDocumentFragment* o, bool wrappedCreated) : RJSWrapperObj(h), wrapped(o), wrappedCreated(wrappedCreated) {
              //RDebug::incCounter(QString("QDomDocumentFragment_Wrapper_") + handler.getEngine()->objectName());
              //RDebug::incCounter(QString("QDomDocumentFragment_Wrapper"));
              //setObjectName("QDomDocumentFragment_Wrapper");
              //setHandler(h);

              // signal forwarding:
              initConnections();
            }
          

      // destructor:
      QDomDocumentFragment_Wrapper::~QDomDocumentFragment_Wrapper() {
            //RDebug::decCounter(QString("QDomDocumentFragment_Wrapper_") + handler.getEngine()->objectName());
            //RDebug::decCounter(QString("QDomDocumentFragment_Wrapper"));

            //qDebug() << "QDomDocumentFragment_Wrapper::~QDomDocumentFragment_Wrapper";

            // tell script handler that this wrapper no longer exists:
            handler.unregisterWrapper(*this);

            
            if (wrappedCreated) {
              
                  // delete wrapped object (copyable, JS ownership)
                  //qDebug() << "deleting instance of QDomDocumentFragment";
                  delete wrapped;
                
            }
            
          }
        
    // initialization of signal forwarding
    
        void QDomDocumentFragment_Wrapper::initConnections() {

          //setObjectName("QDomDocumentFragment_Wrapper");

          // tell script handler that this wrapper needs to be deleted if the engine is deleted:
          handler.registerWrapper(*this);

          
              // wrapped object is not a QObject:
              // wrapper is managed by script engine:
              //QJSEngine::setObjectOwnership(this, QJSEngine::CppOwnership);
            

          if (hasWrapped()) {
            
            // set up signal forwarding:
            
          }
        }
      

  // constructors:
  
    // Class: QDomDocumentFragment
    // Function: 
    // Source: 
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1
QDomDocumentFragment_Wrapper::QDomDocumentFragment_Wrapper
                
              (
                
                  // RJSApi:
                  QObject* h
                  ,
  const QJSValue& 
  a1
              ) 
              
                : RJSWrapperObj(*(RJSApi*)h)
              
              {
                
                  //RDebug::incCounter(QString("QDomDocumentFragment_Wrapper_") + handler.getEngine()->objectName());
                  //RDebug::incCounter(QString("QDomDocumentFragment_Wrapper"));
                
      // check parameter types:
      if (
        RJSHelper::is_QDomDocumentFragment(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: x (QDomDocumentFragment)
  
QDomDocumentFragment a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomDocumentFragment(handler, a1);
        

    // call function:
    
        // construct wrapper:

        
            wrapped = new QDomDocumentFragment(
                a1_cpp
    
            );
            wrappedCreated = true;
          

        // signal forwarding:
        // TODO
        //connect(wrapped, SIGNAL(triggered(bool)), this, SLOT(triggeredEmitter(bool)));
        initConnections();
        return;

      
  }

      {
    

    // call function:
    
        // construct wrapper:

        
            wrapped = new QDomDocumentFragment(
                
            );
            wrappedCreated = true;
          

        // signal forwarding:
        // TODO
        //connect(wrapped, SIGNAL(triggered(bool)), this, SLOT(triggeredEmitter(bool)));
        initConnections();
        return;

      
  }

                    // no constructor without arguments defined
                    // allow constructor for prototype objects without args:
                    if (
                      a1.isUndefined()
  
                      ) {
                      wrapped = nullptr;
                      wrappedCreated = false;
                      return;
                    }
                  

                  qWarning() << "no matching constructor variant found for QDomDocumentFragment";
                  wrapped = nullptr;
                  wrappedCreated = false;
                  handler.trace();
                
              }
            

    // non-static functions:
    
    // Class: QDomDocumentFragment
    // Function: operator_equal
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentFragment_Wrapper::operator_equal
              (
                
  const QJSValue& 
  a1
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp:  (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentFragment* w = getWrapped();
                bool res = 
                    
                w->operator==(
                  a1_cpp
    
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for operator_equal";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentFragment
    // Function: operator_unequal
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentFragment_Wrapper::operator_unequal
              (
                
  const QJSValue& 
  a1
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp:  (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentFragment* w = getWrapped();
                bool res = 
                    
                w->operator!=(
                  a1_cpp
    
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for operator_unequal";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentFragment
    // Function: insertBefore
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentFragment_Wrapper::insertBefore
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

   && RJSHelper::is_QDomNode(handler, a2
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: newChild (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        
  // convert js parameter to cpp: refChild (QDomNode)
  
QDomNode a2_cpp;

      a2_cpp = RJSHelper::js2cpp_QDomNode(handler, a2);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentFragment* w = getWrapped();
                QDomNode res = 
                    
                w->insertBefore(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for insertBefore";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentFragment
    // Function: insertAfter
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentFragment_Wrapper::insertAfter
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

   && RJSHelper::is_QDomNode(handler, a2
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: newChild (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        
  // convert js parameter to cpp: refChild (QDomNode)
  
QDomNode a2_cpp;

      a2_cpp = RJSHelper::js2cpp_QDomNode(handler, a2);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentFragment* w = getWrapped();
                QDomNode res = 
                    
                w->insertAfter(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for insertAfter";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentFragment
    // Function: replaceChild
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentFragment_Wrapper::replaceChild
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

   && RJSHelper::is_QDomNode(handler, a2
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: newChild (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        
  // convert js parameter to cpp: oldChild (QDomNode)
  
QDomNode a2_cpp;

      a2_cpp = RJSHelper::js2cpp_QDomNode(handler, a2);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentFragment* w = getWrapped();
                QDomNode res = 
                    
                w->replaceChild(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for replaceChild";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentFragment
    // Function: removeChild
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentFragment_Wrapper::removeChild
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: oldChild (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentFragment* w = getWrapped();
                QDomNode res = 
                    
                w->removeChild(
                  a1_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for removeChild";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentFragment
    // Function: appendChild
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentFragment_Wrapper::appendChild
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: newChild (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentFragment* w = getWrapped();
                QDomNode res = 
                    
                w->appendChild(
                  a1_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for appendChild";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentFragment
    // Function: hasChildNodes
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentFragment_Wrapper::hasChildNodes
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentFragment* w = getWrapped();
                bool res = 
                    
                w->hasChildNodes(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for hasChildNodes";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentFragment
    // Function: cloneNode
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentFragment_Wrapper::cloneNode
              (
                
  const QJSValue& 
  a1
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_bool(handler, a1
    , true
  
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: deep (bool)
  
bool a1_cpp;

      
          if (a1.isUndefined()) {
            a1_cpp = true;
          }
          else {
            a1_cpp = RJSHelper::js2cpp_bool(handler, a1);
          }
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentFragment* w = getWrapped();
                QDomNode res = 
                    
                w->cloneNode(
                  a1_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for cloneNode";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentFragment
    // Function: normalize
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentFragment_Wrapper::normalize
              (
                
              ) 
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentFragment* w = getWrapped();
                
                w->normalize(
                  
                );
              
            return QJSValue();
          
  }

                  qWarning() << "no matching function variant found for normalize";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentFragment
    // Function: isSupported
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentFragment_Wrapper::isSupported
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

   && RJSHelper::is_QString(handler, a2
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: feature (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        
  // convert js parameter to cpp: version (QString)
  
QString a2_cpp;

      a2_cpp = RJSHelper::js2cpp_QString(handler, a2);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentFragment* w = getWrapped();
                bool res = 
                    
                w->isSupported(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isSupported";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentFragment
    // Function: nodeName
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentFragment_Wrapper::nodeName
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentFragment* w = getWrapped();
                QString res = 
                    
                w->nodeName(
                  
                );
              
            // return type: QString

            return RJSHelper::cpp2js_QString(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for nodeName";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentFragment
    // Function: parentNode
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentFragment_Wrapper::parentNode
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentFragment* w = getWrapped();
                QDomNode res = 
                    
                w->parentNode(
                  
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for parentNode";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentFragment
    // Function: childNodes
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentFragment_Wrapper::childNodes
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentFragment* w = getWrapped();
                QDomNodeList res = 
                    
                w->childNodes(
                  
                );
              
            // return type: QDomNodeList

            return RJSHelper::cpp2js_QDomNodeList(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for childNodes";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentFragment
    // Function: firstChild
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentFragment_Wrapper::firstChild
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentFragment* w = getWrapped();
                QDomNode res = 
                    
                w->firstChild(
                  
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for firstChild";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentFragment
    // Function: lastChild
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentFragment_Wrapper::lastChild
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentFragment* w = getWrapped();
                QDomNode res = 
                    
                w->lastChild(
                  
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for lastChild";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentFragment
    // Function: previousSibling
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentFragment_Wrapper::previousSibling
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentFragment* w = getWrapped();
                QDomNode res = 
                    
                w->previousSibling(
                  
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for previousSibling";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentFragment
    // Function: nextSibling
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentFragment_Wrapper::nextSibling
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentFragment* w = getWrapped();
                QDomNode res = 
                    
                w->nextSibling(
                  
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for nextSibling";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentFragment
    // Function: attributes
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentFragment_Wrapper::attributes
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentFragment* w = getWrapped();
                QDomNamedNodeMap res = 
                    
                w->attributes(
                  
                );
              
            // return type: QDomNamedNodeMap

            return RJSHelper::cpp2js_QDomNamedNodeMap(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for attributes";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentFragment
    // Function: ownerDocument
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentFragment_Wrapper::ownerDocument
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentFragment* w = getWrapped();
                QDomDocument res = 
                    
                w->ownerDocument(
                  
                );
              
            // return type: QDomDocument

            return RJSHelper::cpp2js_QDomDocument(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for ownerDocument";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentFragment
    // Function: namespaceURI
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentFragment_Wrapper::namespaceURI
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentFragment* w = getWrapped();
                QString res = 
                    
                w->namespaceURI(
                  
                );
              
            // return type: QString

            return RJSHelper::cpp2js_QString(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for namespaceURI";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentFragment
    // Function: localName
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentFragment_Wrapper::localName
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentFragment* w = getWrapped();
                QString res = 
                    
                w->localName(
                  
                );
              
            // return type: QString

            return RJSHelper::cpp2js_QString(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for localName";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentFragment
    // Function: hasAttributes
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentFragment_Wrapper::hasAttributes
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentFragment* w = getWrapped();
                bool res = 
                    
                w->hasAttributes(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for hasAttributes";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentFragment
    // Function: nodeValue
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentFragment_Wrapper::nodeValue
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentFragment* w = getWrapped();
                QString res = 
                    
                w->nodeValue(
                  
                );
              
            // return type: QString

            return RJSHelper::cpp2js_QString(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for nodeValue";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentFragment
    // Function: setNodeValue
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentFragment_Wrapper::setNodeValue
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp:  (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentFragment* w = getWrapped();
                
                w->setNodeValue(
                  a1_cpp
    
                );
              
            return QJSValue();
          
  }

                  qWarning() << "no matching function variant found for setNodeValue";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentFragment
    // Function: prefix
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentFragment_Wrapper::prefix
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentFragment* w = getWrapped();
                QString res = 
                    
                w->prefix(
                  
                );
              
            // return type: QString

            return RJSHelper::cpp2js_QString(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for prefix";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentFragment
    // Function: setPrefix
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentFragment_Wrapper::setPrefix
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: pre (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentFragment* w = getWrapped();
                
                w->setPrefix(
                  a1_cpp
    
                );
              
            return QJSValue();
          
  }

                  qWarning() << "no matching function variant found for setPrefix";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentFragment
    // Function: isAttr
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentFragment_Wrapper::isAttr
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentFragment* w = getWrapped();
                bool res = 
                    
                w->isAttr(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isAttr";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentFragment
    // Function: isCDATASection
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentFragment_Wrapper::isCDATASection
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentFragment* w = getWrapped();
                bool res = 
                    
                w->isCDATASection(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isCDATASection";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentFragment
    // Function: isDocumentFragment
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentFragment_Wrapper::isDocumentFragment
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentFragment* w = getWrapped();
                bool res = 
                    
                w->isDocumentFragment(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isDocumentFragment";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentFragment
    // Function: isDocument
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentFragment_Wrapper::isDocument
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentFragment* w = getWrapped();
                bool res = 
                    
                w->isDocument(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isDocument";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentFragment
    // Function: isDocumentType
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentFragment_Wrapper::isDocumentType
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentFragment* w = getWrapped();
                bool res = 
                    
                w->isDocumentType(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isDocumentType";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentFragment
    // Function: isElement
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentFragment_Wrapper::isElement
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentFragment* w = getWrapped();
                bool res = 
                    
                w->isElement(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isElement";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentFragment
    // Function: isEntityReference
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentFragment_Wrapper::isEntityReference
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentFragment* w = getWrapped();
                bool res = 
                    
                w->isEntityReference(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isEntityReference";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentFragment
    // Function: isText
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentFragment_Wrapper::isText
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentFragment* w = getWrapped();
                bool res = 
                    
                w->isText(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isText";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentFragment
    // Function: isEntity
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentFragment_Wrapper::isEntity
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentFragment* w = getWrapped();
                bool res = 
                    
                w->isEntity(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isEntity";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentFragment
    // Function: isNotation
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentFragment_Wrapper::isNotation
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentFragment* w = getWrapped();
                bool res = 
                    
                w->isNotation(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isNotation";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentFragment
    // Function: isProcessingInstruction
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentFragment_Wrapper::isProcessingInstruction
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentFragment* w = getWrapped();
                bool res = 
                    
                w->isProcessingInstruction(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isProcessingInstruction";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentFragment
    // Function: isCharacterData
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentFragment_Wrapper::isCharacterData
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentFragment* w = getWrapped();
                bool res = 
                    
                w->isCharacterData(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isCharacterData";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentFragment
    // Function: isComment
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentFragment_Wrapper::isComment
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentFragment* w = getWrapped();
                bool res = 
                    
                w->isComment(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isComment";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentFragment
    // Function: namedItem
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentFragment_Wrapper::namedItem
              (
                
  const QJSValue& 
  a1
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: name (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentFragment* w = getWrapped();
                QDomNode res = 
                    
                w->namedItem(
                  a1_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for namedItem";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentFragment
    // Function: isNull
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentFragment_Wrapper::isNull
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentFragment* w = getWrapped();
                bool res = 
                    
                w->isNull(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isNull";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentFragment
    // Function: clear
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentFragment_Wrapper::clear
              (
                
              ) 
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentFragment* w = getWrapped();
                
                w->clear(
                  
                );
              
            return QJSValue();
          
  }

                  qWarning() << "no matching function variant found for clear";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentFragment
    // Function: toAttr
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentFragment_Wrapper::toAttr
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentFragment* w = getWrapped();
                QDomAttr res = 
                    
                w->toAttr(
                  
                );
              
            // return type: QDomAttr

            return RJSHelper::cpp2js_QDomAttr(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toAttr";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentFragment
    // Function: toCDATASection
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentFragment_Wrapper::toCDATASection
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentFragment* w = getWrapped();
                QDomCDATASection res = 
                    
                w->toCDATASection(
                  
                );
              
            // return type: QDomCDATASection

            return RJSHelper::cpp2js_QDomCDATASection(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toCDATASection";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentFragment
    // Function: toDocumentFragment
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentFragment_Wrapper::toDocumentFragment
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentFragment* w = getWrapped();
                QDomDocumentFragment res = 
                    
                w->toDocumentFragment(
                  
                );
              
            // return type: QDomDocumentFragment

            return RJSHelper::cpp2js_QDomDocumentFragment(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toDocumentFragment";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentFragment
    // Function: toDocument
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentFragment_Wrapper::toDocument
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentFragment* w = getWrapped();
                QDomDocument res = 
                    
                w->toDocument(
                  
                );
              
            // return type: QDomDocument

            return RJSHelper::cpp2js_QDomDocument(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toDocument";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentFragment
    // Function: toDocumentType
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentFragment_Wrapper::toDocumentType
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentFragment* w = getWrapped();
                QDomDocumentType res = 
                    
                w->toDocumentType(
                  
                );
              
            // return type: QDomDocumentType

            return RJSHelper::cpp2js_QDomDocumentType(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toDocumentType";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentFragment
    // Function: toElement
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentFragment_Wrapper::toElement
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentFragment* w = getWrapped();
                QDomElement res = 
                    
                w->toElement(
                  
                );
              
            // return type: QDomElement

            return RJSHelper::cpp2js_QDomElement(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toElement";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentFragment
    // Function: toEntityReference
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentFragment_Wrapper::toEntityReference
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentFragment* w = getWrapped();
                QDomEntityReference res = 
                    
                w->toEntityReference(
                  
                );
              
            // return type: QDomEntityReference

            return RJSHelper::cpp2js_QDomEntityReference(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toEntityReference";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentFragment
    // Function: toText
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentFragment_Wrapper::toText
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentFragment* w = getWrapped();
                QDomText res = 
                    
                w->toText(
                  
                );
              
            // return type: QDomText

            return RJSHelper::cpp2js_QDomText(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toText";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentFragment
    // Function: toEntity
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentFragment_Wrapper::toEntity
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentFragment* w = getWrapped();
                QDomEntity res = 
                    
                w->toEntity(
                  
                );
              
            // return type: QDomEntity

            return RJSHelper::cpp2js_QDomEntity(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toEntity";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentFragment
    // Function: toNotation
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentFragment_Wrapper::toNotation
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentFragment* w = getWrapped();
                QDomNotation res = 
                    
                w->toNotation(
                  
                );
              
            // return type: QDomNotation

            return RJSHelper::cpp2js_QDomNotation(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toNotation";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentFragment
    // Function: toProcessingInstruction
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentFragment_Wrapper::toProcessingInstruction
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentFragment* w = getWrapped();
                QDomProcessingInstruction res = 
                    
                w->toProcessingInstruction(
                  
                );
              
            // return type: QDomProcessingInstruction

            return RJSHelper::cpp2js_QDomProcessingInstruction(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toProcessingInstruction";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentFragment
    // Function: toCharacterData
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentFragment_Wrapper::toCharacterData
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentFragment* w = getWrapped();
                QDomCharacterData res = 
                    
                w->toCharacterData(
                  
                );
              
            // return type: QDomCharacterData

            return RJSHelper::cpp2js_QDomCharacterData(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toCharacterData";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentFragment
    // Function: toComment
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentFragment_Wrapper::toComment
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentFragment* w = getWrapped();
                QDomComment res = 
                    
                w->toComment(
                  
                );
              
            // return type: QDomComment

            return RJSHelper::cpp2js_QDomComment(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toComment";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentFragment
    // Function: firstChildElement
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentFragment_Wrapper::firstChildElement
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
    , true
  
  )

   && RJSHelper::is_QString(handler, a2
    , true
  
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: tagName (QString)
  
QString a1_cpp;

      
          if (a1.isUndefined()) {
            a1_cpp = QString();
          }
          else {
            a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
          }
        
  // convert js parameter to cpp: namespaceURI (QString)
  
QString a2_cpp;

      
          if (a2.isUndefined()) {
            a2_cpp = QString();
          }
          else {
            a2_cpp = RJSHelper::js2cpp_QString(handler, a2);
          }
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentFragment* w = getWrapped();
                QDomElement res = 
                    
                w->firstChildElement(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomElement

            return RJSHelper::cpp2js_QDomElement(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for firstChildElement";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentFragment
    // Function: lastChildElement
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentFragment_Wrapper::lastChildElement
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
    , true
  
  )

   && RJSHelper::is_QString(handler, a2
    , true
  
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: tagName (QString)
  
QString a1_cpp;

      
          if (a1.isUndefined()) {
            a1_cpp = QString();
          }
          else {
            a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
          }
        
  // convert js parameter to cpp: namespaceURI (QString)
  
QString a2_cpp;

      
          if (a2.isUndefined()) {
            a2_cpp = QString();
          }
          else {
            a2_cpp = RJSHelper::js2cpp_QString(handler, a2);
          }
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentFragment* w = getWrapped();
                QDomElement res = 
                    
                w->lastChildElement(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomElement

            return RJSHelper::cpp2js_QDomElement(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for lastChildElement";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentFragment
    // Function: previousSiblingElement
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentFragment_Wrapper::previousSiblingElement
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
    , true
  
  )

   && RJSHelper::is_QString(handler, a2
    , true
  
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: tagName (QString)
  
QString a1_cpp;

      
          if (a1.isUndefined()) {
            a1_cpp = QString();
          }
          else {
            a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
          }
        
  // convert js parameter to cpp: namespaceURI (QString)
  
QString a2_cpp;

      
          if (a2.isUndefined()) {
            a2_cpp = QString();
          }
          else {
            a2_cpp = RJSHelper::js2cpp_QString(handler, a2);
          }
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentFragment* w = getWrapped();
                QDomElement res = 
                    
                w->previousSiblingElement(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomElement

            return RJSHelper::cpp2js_QDomElement(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for previousSiblingElement";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentFragment
    // Function: nextSiblingElement
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentFragment_Wrapper::nextSiblingElement
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
    , true
  
  )

   && RJSHelper::is_QString(handler, a2
    , true
  
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: taName (QString)
  
QString a1_cpp;

      
          if (a1.isUndefined()) {
            a1_cpp = QString();
          }
          else {
            a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
          }
        
  // convert js parameter to cpp: namespaceURI (QString)
  
QString a2_cpp;

      
          if (a2.isUndefined()) {
            a2_cpp = QString();
          }
          else {
            a2_cpp = RJSHelper::js2cpp_QString(handler, a2);
          }
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentFragment* w = getWrapped();
                QDomElement res = 
                    
                w->nextSiblingElement(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomElement

            return RJSHelper::cpp2js_QDomElement(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for nextSiblingElement";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentFragment
    // Function: lineNumber
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentFragment_Wrapper::lineNumber
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentFragment* w = getWrapped();
                int res = 
                    
                w->lineNumber(
                  
                );
              
            // return type: int

            return RJSHelper::cpp2js_int(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for lineNumber";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentFragment
    // Function: columnNumber
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentFragment_Wrapper::columnNumber
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentFragment* w = getWrapped();
                int res = 
                    
                w->columnNumber(
                  
                );
              
            // return type: int

            return RJSHelper::cpp2js_int(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for columnNumber";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentFragment
    // Function: operator_assign
    // Source: 
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentFragment_Wrapper::operator_assign
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomDocumentFragment(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp:  (QDomDocumentFragment)
  
QDomDocumentFragment a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomDocumentFragment(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentFragment* w = getWrapped();
                
                      // return type is reference:
                      // use pointer instead 3:
                      QDomDocumentFragment* res =
                    &
                w->operator=(
                  a1_cpp
    
                );
              
            // return type: QDomDocumentFragment&

            return RJSHelper::cpp2js_QDomDocumentFragment(
              handler, 
              // non-copyable: false
                  // return type is reference, type is copyable:
                  // convert pointer back to reference:
                  *res
                
              );
            
  }

                  qWarning() << "no matching function variant found for operator_assign";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomDocumentFragment
    // Function: nodeType
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomDocumentFragment_Wrapper::nodeType
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomDocumentFragment* w = getWrapped();
                QDomNode::NodeType res = 
                    
                w->nodeType(
                  
                );
              
            // return type: QDomNode::NodeType

            return RJSHelper::cpp2js_QDomNode_NodeType(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for nodeType";
                  handler.trace();
                  return QJSValue();
                
              }
            

  // member functions for static properties, forward to static function
  


  // protected overwritten functions / events and their public invokable counterparts:
  
    #include "qdom_wrapper.h"

  
      // list of registered base casters for this wrapper class:
      QList<RJSBasecaster_QDomCharacterData*> QDomCharacterData_Wrapper::basecasters_QDomCharacterData;
    
    // static functions implementation in singleton wrapper:
    
    void QDomCharacterData_Wrapper::init(RJSApi& handler) {
      
        //qmlRegisterType<QDomCharacterData_Wrapper>("org.qcad", 1, 0, "QDomCharacterData_Wrapper");
        qmlRegisterInterface<QDomCharacterData_Wrapper>("QDomCharacterData_Wrapper", 1);
      

      QJSEngine* engine = handler.getEngine();

      
          // make type scriptable for JS files:
          QJSValue global = engine->globalObject();
          RJSType_QDomCharacterData* t = new RJSType_QDomCharacterData();
          global.setProperty("RJSType_QDomCharacterData", engine->newQObject(t));

          // initialize ID for this type:
          RJSType_QDomCharacterData::getIdStatic();

          

      // wrapper:
      QJSValue mo = engine->newQMetaObject(&QDomCharacterData_Wrapper::staticMetaObject);
      engine->globalObject().setProperty("QDomCharacterData_Wrapper", mo);


      
        // JS base class:
        //QJSValue mob = engine->newQMetaObject(&QDomCharacterData_BaseJs::staticMetaObject);
        //engine->globalObject().setProperty("QDomCharacterData_BaseJs", mob);
      
      QString fileName = ":generator/js/QDomCharacterData.js";
      QFile scriptFile(fileName);
      if (!scriptFile.open(QIODevice::ReadOnly)) {
        qWarning() << "JS script wrapper file not found:" << fileName;
        return;
      }
      QTextStream stream(&scriptFile);
      QString contents = stream.readAll();
      scriptFile.close();

      qDebug() << "Evaluating file: " << fileName;
      QJSValue result = engine->evaluate(contents, fileName);
      if (result.isError()) {
          qWarning()
              << "Uncaught exception at line"
              << result.property("lineNumber").toInt()
              << ":" << result.toString();
      }
    }
  
    /*
    // special constructor used as prototype:
    QDomCharacterData_Wrapper::QDomCharacterData_Wrapper(QJSEngine* e) : wrapped(nullptr), wrappedCreated(false) {
            //setObjectName("QDomCharacterData_Wrapper");
            setEngine(e);

            // signal forwarding:
            //initConnections();
          }
        
    */

    
      // special constructor to wrap existing object:
      QDomCharacterData_Wrapper::QDomCharacterData_Wrapper(RJSApi& h, QDomCharacterData* o, bool wrappedCreated) : RJSWrapperObj(h), wrapped(o), wrappedCreated(wrappedCreated) {
              //RDebug::incCounter(QString("QDomCharacterData_Wrapper_") + handler.getEngine()->objectName());
              //RDebug::incCounter(QString("QDomCharacterData_Wrapper"));
              //setObjectName("QDomCharacterData_Wrapper");
              //setHandler(h);

              // signal forwarding:
              initConnections();
            }
          

      // destructor:
      QDomCharacterData_Wrapper::~QDomCharacterData_Wrapper() {
            //RDebug::decCounter(QString("QDomCharacterData_Wrapper_") + handler.getEngine()->objectName());
            //RDebug::decCounter(QString("QDomCharacterData_Wrapper"));

            //qDebug() << "QDomCharacterData_Wrapper::~QDomCharacterData_Wrapper";

            // tell script handler that this wrapper no longer exists:
            handler.unregisterWrapper(*this);

            
            if (wrappedCreated) {
              
                  // delete wrapped object (copyable, JS ownership)
                  //qDebug() << "deleting instance of QDomCharacterData";
                  delete wrapped;
                
            }
            
          }
        
    // initialization of signal forwarding
    
        void QDomCharacterData_Wrapper::initConnections() {

          //setObjectName("QDomCharacterData_Wrapper");

          // tell script handler that this wrapper needs to be deleted if the engine is deleted:
          handler.registerWrapper(*this);

          
              // wrapped object is not a QObject:
              // wrapper is managed by script engine:
              //QJSEngine::setObjectOwnership(this, QJSEngine::CppOwnership);
            

          if (hasWrapped()) {
            
            // set up signal forwarding:
            
          }
        }
      

  // constructors:
  
    // Class: QDomCharacterData
    // Function: 
    // Source: 
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1
QDomCharacterData_Wrapper::QDomCharacterData_Wrapper
                
              (
                
                  // RJSApi:
                  QObject* h
                  ,
  const QJSValue& 
  a1
              ) 
              
                : RJSWrapperObj(*(RJSApi*)h)
              
              {
                
                  //RDebug::incCounter(QString("QDomCharacterData_Wrapper_") + handler.getEngine()->objectName());
                  //RDebug::incCounter(QString("QDomCharacterData_Wrapper"));
                
      // check parameter types:
      if (
        RJSHelper::is_QDomCharacterData(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: x (QDomCharacterData)
  
QDomCharacterData a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomCharacterData(handler, a1);
        

    // call function:
    
        // construct wrapper:

        
            wrapped = new QDomCharacterData(
                a1_cpp
    
            );
            wrappedCreated = true;
          

        // signal forwarding:
        // TODO
        //connect(wrapped, SIGNAL(triggered(bool)), this, SLOT(triggeredEmitter(bool)));
        initConnections();
        return;

      
  }

      {
    

    // call function:
    
        // construct wrapper:

        
            wrapped = new QDomCharacterData(
                
            );
            wrappedCreated = true;
          

        // signal forwarding:
        // TODO
        //connect(wrapped, SIGNAL(triggered(bool)), this, SLOT(triggeredEmitter(bool)));
        initConnections();
        return;

      
  }

                    // no constructor without arguments defined
                    // allow constructor for prototype objects without args:
                    if (
                      a1.isUndefined()
  
                      ) {
                      wrapped = nullptr;
                      wrappedCreated = false;
                      return;
                    }
                  

                  qWarning() << "no matching constructor variant found for QDomCharacterData";
                  wrapped = nullptr;
                  wrappedCreated = false;
                  handler.trace();
                
              }
            

    // non-static functions:
    
    // Class: QDomCharacterData
    // Function: operator_equal
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomCharacterData_Wrapper::operator_equal
              (
                
  const QJSValue& 
  a1
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp:  (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCharacterData* w = getWrapped();
                bool res = 
                    
                w->operator==(
                  a1_cpp
    
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for operator_equal";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCharacterData
    // Function: operator_unequal
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomCharacterData_Wrapper::operator_unequal
              (
                
  const QJSValue& 
  a1
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp:  (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCharacterData* w = getWrapped();
                bool res = 
                    
                w->operator!=(
                  a1_cpp
    
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for operator_unequal";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCharacterData
    // Function: insertBefore
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomCharacterData_Wrapper::insertBefore
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

   && RJSHelper::is_QDomNode(handler, a2
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: newChild (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        
  // convert js parameter to cpp: refChild (QDomNode)
  
QDomNode a2_cpp;

      a2_cpp = RJSHelper::js2cpp_QDomNode(handler, a2);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCharacterData* w = getWrapped();
                QDomNode res = 
                    
                w->insertBefore(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for insertBefore";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCharacterData
    // Function: insertAfter
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomCharacterData_Wrapper::insertAfter
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

   && RJSHelper::is_QDomNode(handler, a2
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: newChild (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        
  // convert js parameter to cpp: refChild (QDomNode)
  
QDomNode a2_cpp;

      a2_cpp = RJSHelper::js2cpp_QDomNode(handler, a2);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCharacterData* w = getWrapped();
                QDomNode res = 
                    
                w->insertAfter(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for insertAfter";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCharacterData
    // Function: replaceChild
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomCharacterData_Wrapper::replaceChild
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

   && RJSHelper::is_QDomNode(handler, a2
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: newChild (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        
  // convert js parameter to cpp: oldChild (QDomNode)
  
QDomNode a2_cpp;

      a2_cpp = RJSHelper::js2cpp_QDomNode(handler, a2);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCharacterData* w = getWrapped();
                QDomNode res = 
                    
                w->replaceChild(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for replaceChild";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCharacterData
    // Function: removeChild
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomCharacterData_Wrapper::removeChild
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: oldChild (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCharacterData* w = getWrapped();
                QDomNode res = 
                    
                w->removeChild(
                  a1_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for removeChild";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCharacterData
    // Function: appendChild
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomCharacterData_Wrapper::appendChild
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: newChild (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCharacterData* w = getWrapped();
                QDomNode res = 
                    
                w->appendChild(
                  a1_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for appendChild";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCharacterData
    // Function: hasChildNodes
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCharacterData_Wrapper::hasChildNodes
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCharacterData* w = getWrapped();
                bool res = 
                    
                w->hasChildNodes(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for hasChildNodes";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCharacterData
    // Function: cloneNode
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomCharacterData_Wrapper::cloneNode
              (
                
  const QJSValue& 
  a1
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_bool(handler, a1
    , true
  
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: deep (bool)
  
bool a1_cpp;

      
          if (a1.isUndefined()) {
            a1_cpp = true;
          }
          else {
            a1_cpp = RJSHelper::js2cpp_bool(handler, a1);
          }
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCharacterData* w = getWrapped();
                QDomNode res = 
                    
                w->cloneNode(
                  a1_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for cloneNode";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCharacterData
    // Function: normalize
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCharacterData_Wrapper::normalize
              (
                
              ) 
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCharacterData* w = getWrapped();
                
                w->normalize(
                  
                );
              
            return QJSValue();
          
  }

                  qWarning() << "no matching function variant found for normalize";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCharacterData
    // Function: isSupported
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomCharacterData_Wrapper::isSupported
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

   && RJSHelper::is_QString(handler, a2
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: feature (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        
  // convert js parameter to cpp: version (QString)
  
QString a2_cpp;

      a2_cpp = RJSHelper::js2cpp_QString(handler, a2);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCharacterData* w = getWrapped();
                bool res = 
                    
                w->isSupported(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isSupported";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCharacterData
    // Function: nodeName
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCharacterData_Wrapper::nodeName
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCharacterData* w = getWrapped();
                QString res = 
                    
                w->nodeName(
                  
                );
              
            // return type: QString

            return RJSHelper::cpp2js_QString(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for nodeName";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCharacterData
    // Function: parentNode
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCharacterData_Wrapper::parentNode
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCharacterData* w = getWrapped();
                QDomNode res = 
                    
                w->parentNode(
                  
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for parentNode";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCharacterData
    // Function: childNodes
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCharacterData_Wrapper::childNodes
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCharacterData* w = getWrapped();
                QDomNodeList res = 
                    
                w->childNodes(
                  
                );
              
            // return type: QDomNodeList

            return RJSHelper::cpp2js_QDomNodeList(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for childNodes";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCharacterData
    // Function: firstChild
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCharacterData_Wrapper::firstChild
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCharacterData* w = getWrapped();
                QDomNode res = 
                    
                w->firstChild(
                  
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for firstChild";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCharacterData
    // Function: lastChild
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCharacterData_Wrapper::lastChild
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCharacterData* w = getWrapped();
                QDomNode res = 
                    
                w->lastChild(
                  
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for lastChild";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCharacterData
    // Function: previousSibling
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCharacterData_Wrapper::previousSibling
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCharacterData* w = getWrapped();
                QDomNode res = 
                    
                w->previousSibling(
                  
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for previousSibling";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCharacterData
    // Function: nextSibling
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCharacterData_Wrapper::nextSibling
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCharacterData* w = getWrapped();
                QDomNode res = 
                    
                w->nextSibling(
                  
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for nextSibling";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCharacterData
    // Function: attributes
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCharacterData_Wrapper::attributes
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCharacterData* w = getWrapped();
                QDomNamedNodeMap res = 
                    
                w->attributes(
                  
                );
              
            // return type: QDomNamedNodeMap

            return RJSHelper::cpp2js_QDomNamedNodeMap(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for attributes";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCharacterData
    // Function: ownerDocument
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCharacterData_Wrapper::ownerDocument
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCharacterData* w = getWrapped();
                QDomDocument res = 
                    
                w->ownerDocument(
                  
                );
              
            // return type: QDomDocument

            return RJSHelper::cpp2js_QDomDocument(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for ownerDocument";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCharacterData
    // Function: namespaceURI
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCharacterData_Wrapper::namespaceURI
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCharacterData* w = getWrapped();
                QString res = 
                    
                w->namespaceURI(
                  
                );
              
            // return type: QString

            return RJSHelper::cpp2js_QString(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for namespaceURI";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCharacterData
    // Function: localName
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCharacterData_Wrapper::localName
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCharacterData* w = getWrapped();
                QString res = 
                    
                w->localName(
                  
                );
              
            // return type: QString

            return RJSHelper::cpp2js_QString(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for localName";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCharacterData
    // Function: hasAttributes
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCharacterData_Wrapper::hasAttributes
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCharacterData* w = getWrapped();
                bool res = 
                    
                w->hasAttributes(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for hasAttributes";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCharacterData
    // Function: nodeValue
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCharacterData_Wrapper::nodeValue
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCharacterData* w = getWrapped();
                QString res = 
                    
                w->nodeValue(
                  
                );
              
            // return type: QString

            return RJSHelper::cpp2js_QString(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for nodeValue";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCharacterData
    // Function: setNodeValue
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomCharacterData_Wrapper::setNodeValue
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp:  (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCharacterData* w = getWrapped();
                
                w->setNodeValue(
                  a1_cpp
    
                );
              
            return QJSValue();
          
  }

                  qWarning() << "no matching function variant found for setNodeValue";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCharacterData
    // Function: prefix
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCharacterData_Wrapper::prefix
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCharacterData* w = getWrapped();
                QString res = 
                    
                w->prefix(
                  
                );
              
            // return type: QString

            return RJSHelper::cpp2js_QString(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for prefix";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCharacterData
    // Function: setPrefix
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomCharacterData_Wrapper::setPrefix
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: pre (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCharacterData* w = getWrapped();
                
                w->setPrefix(
                  a1_cpp
    
                );
              
            return QJSValue();
          
  }

                  qWarning() << "no matching function variant found for setPrefix";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCharacterData
    // Function: isAttr
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCharacterData_Wrapper::isAttr
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCharacterData* w = getWrapped();
                bool res = 
                    
                w->isAttr(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isAttr";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCharacterData
    // Function: isCDATASection
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCharacterData_Wrapper::isCDATASection
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCharacterData* w = getWrapped();
                bool res = 
                    
                w->isCDATASection(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isCDATASection";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCharacterData
    // Function: isDocumentFragment
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCharacterData_Wrapper::isDocumentFragment
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCharacterData* w = getWrapped();
                bool res = 
                    
                w->isDocumentFragment(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isDocumentFragment";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCharacterData
    // Function: isDocument
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCharacterData_Wrapper::isDocument
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCharacterData* w = getWrapped();
                bool res = 
                    
                w->isDocument(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isDocument";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCharacterData
    // Function: isDocumentType
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCharacterData_Wrapper::isDocumentType
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCharacterData* w = getWrapped();
                bool res = 
                    
                w->isDocumentType(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isDocumentType";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCharacterData
    // Function: isElement
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCharacterData_Wrapper::isElement
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCharacterData* w = getWrapped();
                bool res = 
                    
                w->isElement(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isElement";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCharacterData
    // Function: isEntityReference
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCharacterData_Wrapper::isEntityReference
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCharacterData* w = getWrapped();
                bool res = 
                    
                w->isEntityReference(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isEntityReference";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCharacterData
    // Function: isText
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCharacterData_Wrapper::isText
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCharacterData* w = getWrapped();
                bool res = 
                    
                w->isText(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isText";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCharacterData
    // Function: isEntity
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCharacterData_Wrapper::isEntity
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCharacterData* w = getWrapped();
                bool res = 
                    
                w->isEntity(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isEntity";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCharacterData
    // Function: isNotation
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCharacterData_Wrapper::isNotation
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCharacterData* w = getWrapped();
                bool res = 
                    
                w->isNotation(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isNotation";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCharacterData
    // Function: isProcessingInstruction
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCharacterData_Wrapper::isProcessingInstruction
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCharacterData* w = getWrapped();
                bool res = 
                    
                w->isProcessingInstruction(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isProcessingInstruction";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCharacterData
    // Function: isCharacterData
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCharacterData_Wrapper::isCharacterData
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCharacterData* w = getWrapped();
                bool res = 
                    
                w->isCharacterData(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isCharacterData";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCharacterData
    // Function: isComment
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCharacterData_Wrapper::isComment
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCharacterData* w = getWrapped();
                bool res = 
                    
                w->isComment(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isComment";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCharacterData
    // Function: namedItem
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomCharacterData_Wrapper::namedItem
              (
                
  const QJSValue& 
  a1
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: name (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCharacterData* w = getWrapped();
                QDomNode res = 
                    
                w->namedItem(
                  a1_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for namedItem";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCharacterData
    // Function: isNull
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCharacterData_Wrapper::isNull
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCharacterData* w = getWrapped();
                bool res = 
                    
                w->isNull(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isNull";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCharacterData
    // Function: clear
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCharacterData_Wrapper::clear
              (
                
              ) 
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCharacterData* w = getWrapped();
                
                w->clear(
                  
                );
              
            return QJSValue();
          
  }

                  qWarning() << "no matching function variant found for clear";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCharacterData
    // Function: toAttr
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCharacterData_Wrapper::toAttr
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCharacterData* w = getWrapped();
                QDomAttr res = 
                    
                w->toAttr(
                  
                );
              
            // return type: QDomAttr

            return RJSHelper::cpp2js_QDomAttr(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toAttr";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCharacterData
    // Function: toCDATASection
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCharacterData_Wrapper::toCDATASection
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCharacterData* w = getWrapped();
                QDomCDATASection res = 
                    
                w->toCDATASection(
                  
                );
              
            // return type: QDomCDATASection

            return RJSHelper::cpp2js_QDomCDATASection(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toCDATASection";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCharacterData
    // Function: toDocumentFragment
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCharacterData_Wrapper::toDocumentFragment
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCharacterData* w = getWrapped();
                QDomDocumentFragment res = 
                    
                w->toDocumentFragment(
                  
                );
              
            // return type: QDomDocumentFragment

            return RJSHelper::cpp2js_QDomDocumentFragment(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toDocumentFragment";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCharacterData
    // Function: toDocument
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCharacterData_Wrapper::toDocument
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCharacterData* w = getWrapped();
                QDomDocument res = 
                    
                w->toDocument(
                  
                );
              
            // return type: QDomDocument

            return RJSHelper::cpp2js_QDomDocument(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toDocument";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCharacterData
    // Function: toDocumentType
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCharacterData_Wrapper::toDocumentType
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCharacterData* w = getWrapped();
                QDomDocumentType res = 
                    
                w->toDocumentType(
                  
                );
              
            // return type: QDomDocumentType

            return RJSHelper::cpp2js_QDomDocumentType(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toDocumentType";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCharacterData
    // Function: toElement
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCharacterData_Wrapper::toElement
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCharacterData* w = getWrapped();
                QDomElement res = 
                    
                w->toElement(
                  
                );
              
            // return type: QDomElement

            return RJSHelper::cpp2js_QDomElement(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toElement";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCharacterData
    // Function: toEntityReference
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCharacterData_Wrapper::toEntityReference
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCharacterData* w = getWrapped();
                QDomEntityReference res = 
                    
                w->toEntityReference(
                  
                );
              
            // return type: QDomEntityReference

            return RJSHelper::cpp2js_QDomEntityReference(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toEntityReference";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCharacterData
    // Function: toText
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCharacterData_Wrapper::toText
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCharacterData* w = getWrapped();
                QDomText res = 
                    
                w->toText(
                  
                );
              
            // return type: QDomText

            return RJSHelper::cpp2js_QDomText(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toText";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCharacterData
    // Function: toEntity
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCharacterData_Wrapper::toEntity
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCharacterData* w = getWrapped();
                QDomEntity res = 
                    
                w->toEntity(
                  
                );
              
            // return type: QDomEntity

            return RJSHelper::cpp2js_QDomEntity(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toEntity";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCharacterData
    // Function: toNotation
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCharacterData_Wrapper::toNotation
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCharacterData* w = getWrapped();
                QDomNotation res = 
                    
                w->toNotation(
                  
                );
              
            // return type: QDomNotation

            return RJSHelper::cpp2js_QDomNotation(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toNotation";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCharacterData
    // Function: toProcessingInstruction
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCharacterData_Wrapper::toProcessingInstruction
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCharacterData* w = getWrapped();
                QDomProcessingInstruction res = 
                    
                w->toProcessingInstruction(
                  
                );
              
            // return type: QDomProcessingInstruction

            return RJSHelper::cpp2js_QDomProcessingInstruction(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toProcessingInstruction";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCharacterData
    // Function: toCharacterData
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCharacterData_Wrapper::toCharacterData
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCharacterData* w = getWrapped();
                QDomCharacterData res = 
                    
                w->toCharacterData(
                  
                );
              
            // return type: QDomCharacterData

            return RJSHelper::cpp2js_QDomCharacterData(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toCharacterData";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCharacterData
    // Function: toComment
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCharacterData_Wrapper::toComment
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCharacterData* w = getWrapped();
                QDomComment res = 
                    
                w->toComment(
                  
                );
              
            // return type: QDomComment

            return RJSHelper::cpp2js_QDomComment(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toComment";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCharacterData
    // Function: firstChildElement
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomCharacterData_Wrapper::firstChildElement
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
    , true
  
  )

   && RJSHelper::is_QString(handler, a2
    , true
  
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: tagName (QString)
  
QString a1_cpp;

      
          if (a1.isUndefined()) {
            a1_cpp = QString();
          }
          else {
            a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
          }
        
  // convert js parameter to cpp: namespaceURI (QString)
  
QString a2_cpp;

      
          if (a2.isUndefined()) {
            a2_cpp = QString();
          }
          else {
            a2_cpp = RJSHelper::js2cpp_QString(handler, a2);
          }
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCharacterData* w = getWrapped();
                QDomElement res = 
                    
                w->firstChildElement(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomElement

            return RJSHelper::cpp2js_QDomElement(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for firstChildElement";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCharacterData
    // Function: lastChildElement
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomCharacterData_Wrapper::lastChildElement
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
    , true
  
  )

   && RJSHelper::is_QString(handler, a2
    , true
  
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: tagName (QString)
  
QString a1_cpp;

      
          if (a1.isUndefined()) {
            a1_cpp = QString();
          }
          else {
            a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
          }
        
  // convert js parameter to cpp: namespaceURI (QString)
  
QString a2_cpp;

      
          if (a2.isUndefined()) {
            a2_cpp = QString();
          }
          else {
            a2_cpp = RJSHelper::js2cpp_QString(handler, a2);
          }
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCharacterData* w = getWrapped();
                QDomElement res = 
                    
                w->lastChildElement(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomElement

            return RJSHelper::cpp2js_QDomElement(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for lastChildElement";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCharacterData
    // Function: previousSiblingElement
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomCharacterData_Wrapper::previousSiblingElement
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
    , true
  
  )

   && RJSHelper::is_QString(handler, a2
    , true
  
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: tagName (QString)
  
QString a1_cpp;

      
          if (a1.isUndefined()) {
            a1_cpp = QString();
          }
          else {
            a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
          }
        
  // convert js parameter to cpp: namespaceURI (QString)
  
QString a2_cpp;

      
          if (a2.isUndefined()) {
            a2_cpp = QString();
          }
          else {
            a2_cpp = RJSHelper::js2cpp_QString(handler, a2);
          }
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCharacterData* w = getWrapped();
                QDomElement res = 
                    
                w->previousSiblingElement(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomElement

            return RJSHelper::cpp2js_QDomElement(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for previousSiblingElement";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCharacterData
    // Function: nextSiblingElement
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomCharacterData_Wrapper::nextSiblingElement
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
    , true
  
  )

   && RJSHelper::is_QString(handler, a2
    , true
  
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: taName (QString)
  
QString a1_cpp;

      
          if (a1.isUndefined()) {
            a1_cpp = QString();
          }
          else {
            a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
          }
        
  // convert js parameter to cpp: namespaceURI (QString)
  
QString a2_cpp;

      
          if (a2.isUndefined()) {
            a2_cpp = QString();
          }
          else {
            a2_cpp = RJSHelper::js2cpp_QString(handler, a2);
          }
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCharacterData* w = getWrapped();
                QDomElement res = 
                    
                w->nextSiblingElement(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomElement

            return RJSHelper::cpp2js_QDomElement(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for nextSiblingElement";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCharacterData
    // Function: lineNumber
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCharacterData_Wrapper::lineNumber
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCharacterData* w = getWrapped();
                int res = 
                    
                w->lineNumber(
                  
                );
              
            // return type: int

            return RJSHelper::cpp2js_int(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for lineNumber";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCharacterData
    // Function: columnNumber
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCharacterData_Wrapper::columnNumber
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCharacterData* w = getWrapped();
                int res = 
                    
                w->columnNumber(
                  
                );
              
            // return type: int

            return RJSHelper::cpp2js_int(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for columnNumber";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCharacterData
    // Function: operator_assign
    // Source: 
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomCharacterData_Wrapper::operator_assign
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomCharacterData(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp:  (QDomCharacterData)
  
QDomCharacterData a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomCharacterData(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCharacterData* w = getWrapped();
                
                      // return type is reference:
                      // use pointer instead 3:
                      QDomCharacterData* res =
                    &
                w->operator=(
                  a1_cpp
    
                );
              
            // return type: QDomCharacterData&

            return RJSHelper::cpp2js_QDomCharacterData(
              handler, 
              // non-copyable: false
                  // return type is reference, type is copyable:
                  // convert pointer back to reference:
                  *res
                
              );
            
  }

                  qWarning() << "no matching function variant found for operator_assign";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCharacterData
    // Function: substringData
    // Source: 
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomCharacterData_Wrapper::substringData
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_unsignedlong(handler, a1
  )

   && RJSHelper::is_unsignedlong(handler, a2
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: offset (unsigned long)
  
unsigned long a1_cpp;

      a1_cpp = RJSHelper::js2cpp_unsignedlong(handler, a1);
        
  // convert js parameter to cpp: count (unsigned long)
  
unsigned long a2_cpp;

      a2_cpp = RJSHelper::js2cpp_unsignedlong(handler, a2);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCharacterData* w = getWrapped();
                QString res = 
                    
                w->substringData(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QString

            return RJSHelper::cpp2js_QString(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for substringData";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCharacterData
    // Function: appendData
    // Source: 
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomCharacterData_Wrapper::appendData
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: arg (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCharacterData* w = getWrapped();
                
                w->appendData(
                  a1_cpp
    
                );
              
            return QJSValue();
          
  }

                  qWarning() << "no matching function variant found for appendData";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCharacterData
    // Function: insertData
    // Source: 
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomCharacterData_Wrapper::insertData
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_unsignedlong(handler, a1
  )

   && RJSHelper::is_QString(handler, a2
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: offset (unsigned long)
  
unsigned long a1_cpp;

      a1_cpp = RJSHelper::js2cpp_unsignedlong(handler, a1);
        
  // convert js parameter to cpp: arg (QString)
  
QString a2_cpp;

      a2_cpp = RJSHelper::js2cpp_QString(handler, a2);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCharacterData* w = getWrapped();
                
                w->insertData(
                  a1_cpp
    , a2_cpp
    
                );
              
            return QJSValue();
          
  }

                  qWarning() << "no matching function variant found for insertData";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCharacterData
    // Function: deleteData
    // Source: 
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomCharacterData_Wrapper::deleteData
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_unsignedlong(handler, a1
  )

   && RJSHelper::is_unsignedlong(handler, a2
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: offset (unsigned long)
  
unsigned long a1_cpp;

      a1_cpp = RJSHelper::js2cpp_unsignedlong(handler, a1);
        
  // convert js parameter to cpp: count (unsigned long)
  
unsigned long a2_cpp;

      a2_cpp = RJSHelper::js2cpp_unsignedlong(handler, a2);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCharacterData* w = getWrapped();
                
                w->deleteData(
                  a1_cpp
    , a2_cpp
    
                );
              
            return QJSValue();
          
  }

                  qWarning() << "no matching function variant found for deleteData";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCharacterData
    // Function: replaceData
    // Source: 
    // Static: false
    // Parameters: 3
    // preceding Parameters: -1

                QJSValue 
              QDomCharacterData_Wrapper::replaceData
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2, 
  const QJSValue& 
  a3
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_unsignedlong(handler, a1
  )

   && RJSHelper::is_unsignedlong(handler, a2
  )

   && RJSHelper::is_QString(handler, a3
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: offset (unsigned long)
  
unsigned long a1_cpp;

      a1_cpp = RJSHelper::js2cpp_unsignedlong(handler, a1);
        
  // convert js parameter to cpp: count (unsigned long)
  
unsigned long a2_cpp;

      a2_cpp = RJSHelper::js2cpp_unsignedlong(handler, a2);
        
  // convert js parameter to cpp: arg (QString)
  
QString a3_cpp;

      a3_cpp = RJSHelper::js2cpp_QString(handler, a3);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCharacterData* w = getWrapped();
                
                w->replaceData(
                  a1_cpp
    , a2_cpp
    , a3_cpp
    
                );
              
            return QJSValue();
          
  }

                  qWarning() << "no matching function variant found for replaceData";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCharacterData
    // Function: length
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCharacterData_Wrapper::length
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCharacterData* w = getWrapped();
                int res = 
                    
                w->length(
                  
                );
              
            // return type: int

            return RJSHelper::cpp2js_int(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for length";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCharacterData
    // Function: data
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCharacterData_Wrapper::data
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCharacterData* w = getWrapped();
                QString res = 
                    
                w->data(
                  
                );
              
            // return type: QString

            return RJSHelper::cpp2js_QString(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for data";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCharacterData
    // Function: setData
    // Source: 
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomCharacterData_Wrapper::setData
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp:  (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCharacterData* w = getWrapped();
                
                w->setData(
                  a1_cpp
    
                );
              
            return QJSValue();
          
  }

                  qWarning() << "no matching function variant found for setData";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCharacterData
    // Function: nodeType
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCharacterData_Wrapper::nodeType
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCharacterData* w = getWrapped();
                QDomNode::NodeType res = 
                    
                w->nodeType(
                  
                );
              
            // return type: QDomNode::NodeType

            return RJSHelper::cpp2js_QDomNode_NodeType(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for nodeType";
                  handler.trace();
                  return QJSValue();
                
              }
            

  // member functions for static properties, forward to static function
  


  // protected overwritten functions / events and their public invokable counterparts:
  
    #include "qdom_wrapper.h"

  
      // list of registered base casters for this wrapper class:
      QList<RJSBasecaster_QDomAttr*> QDomAttr_Wrapper::basecasters_QDomAttr;
    
    // static functions implementation in singleton wrapper:
    
    void QDomAttr_Wrapper::init(RJSApi& handler) {
      
        //qmlRegisterType<QDomAttr_Wrapper>("org.qcad", 1, 0, "QDomAttr_Wrapper");
        qmlRegisterInterface<QDomAttr_Wrapper>("QDomAttr_Wrapper", 1);
      

      QJSEngine* engine = handler.getEngine();

      
          // make type scriptable for JS files:
          QJSValue global = engine->globalObject();
          RJSType_QDomAttr* t = new RJSType_QDomAttr();
          global.setProperty("RJSType_QDomAttr", engine->newQObject(t));

          // initialize ID for this type:
          RJSType_QDomAttr::getIdStatic();

          

      // wrapper:
      QJSValue mo = engine->newQMetaObject(&QDomAttr_Wrapper::staticMetaObject);
      engine->globalObject().setProperty("QDomAttr_Wrapper", mo);


      
        // JS base class:
        //QJSValue mob = engine->newQMetaObject(&QDomAttr_BaseJs::staticMetaObject);
        //engine->globalObject().setProperty("QDomAttr_BaseJs", mob);
      
      QString fileName = ":generator/js/QDomAttr.js";
      QFile scriptFile(fileName);
      if (!scriptFile.open(QIODevice::ReadOnly)) {
        qWarning() << "JS script wrapper file not found:" << fileName;
        return;
      }
      QTextStream stream(&scriptFile);
      QString contents = stream.readAll();
      scriptFile.close();

      qDebug() << "Evaluating file: " << fileName;
      QJSValue result = engine->evaluate(contents, fileName);
      if (result.isError()) {
          qWarning()
              << "Uncaught exception at line"
              << result.property("lineNumber").toInt()
              << ":" << result.toString();
      }
    }
  
    /*
    // special constructor used as prototype:
    QDomAttr_Wrapper::QDomAttr_Wrapper(QJSEngine* e) : wrapped(nullptr), wrappedCreated(false) {
            //setObjectName("QDomAttr_Wrapper");
            setEngine(e);

            // signal forwarding:
            //initConnections();
          }
        
    */

    
      // special constructor to wrap existing object:
      QDomAttr_Wrapper::QDomAttr_Wrapper(RJSApi& h, QDomAttr* o, bool wrappedCreated) : RJSWrapperObj(h), wrapped(o), wrappedCreated(wrappedCreated) {
              //RDebug::incCounter(QString("QDomAttr_Wrapper_") + handler.getEngine()->objectName());
              //RDebug::incCounter(QString("QDomAttr_Wrapper"));
              //setObjectName("QDomAttr_Wrapper");
              //setHandler(h);

              // signal forwarding:
              initConnections();
            }
          

      // destructor:
      QDomAttr_Wrapper::~QDomAttr_Wrapper() {
            //RDebug::decCounter(QString("QDomAttr_Wrapper_") + handler.getEngine()->objectName());
            //RDebug::decCounter(QString("QDomAttr_Wrapper"));

            //qDebug() << "QDomAttr_Wrapper::~QDomAttr_Wrapper";

            // tell script handler that this wrapper no longer exists:
            handler.unregisterWrapper(*this);

            
            if (wrappedCreated) {
              
                  // delete wrapped object (copyable, JS ownership)
                  //qDebug() << "deleting instance of QDomAttr";
                  delete wrapped;
                
            }
            
          }
        
    // initialization of signal forwarding
    
        void QDomAttr_Wrapper::initConnections() {

          //setObjectName("QDomAttr_Wrapper");

          // tell script handler that this wrapper needs to be deleted if the engine is deleted:
          handler.registerWrapper(*this);

          
              // wrapped object is not a QObject:
              // wrapper is managed by script engine:
              //QJSEngine::setObjectOwnership(this, QJSEngine::CppOwnership);
            

          if (hasWrapped()) {
            
            // set up signal forwarding:
            
          }
        }
      

  // constructors:
  
    // Class: QDomAttr
    // Function: 
    // Source: 
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1
QDomAttr_Wrapper::QDomAttr_Wrapper
                
              (
                
                  // RJSApi:
                  QObject* h
                  ,
  const QJSValue& 
  a1
              ) 
              
                : RJSWrapperObj(*(RJSApi*)h)
              
              {
                
                  //RDebug::incCounter(QString("QDomAttr_Wrapper_") + handler.getEngine()->objectName());
                  //RDebug::incCounter(QString("QDomAttr_Wrapper"));
                
      // check parameter types:
      if (
        RJSHelper::is_QDomAttr(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: x (QDomAttr)
  
QDomAttr a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomAttr(handler, a1);
        

    // call function:
    
        // construct wrapper:

        
            wrapped = new QDomAttr(
                a1_cpp
    
            );
            wrappedCreated = true;
          

        // signal forwarding:
        // TODO
        //connect(wrapped, SIGNAL(triggered(bool)), this, SLOT(triggeredEmitter(bool)));
        initConnections();
        return;

      
  }

      {
    

    // call function:
    
        // construct wrapper:

        
            wrapped = new QDomAttr(
                
            );
            wrappedCreated = true;
          

        // signal forwarding:
        // TODO
        //connect(wrapped, SIGNAL(triggered(bool)), this, SLOT(triggeredEmitter(bool)));
        initConnections();
        return;

      
  }

                    // no constructor without arguments defined
                    // allow constructor for prototype objects without args:
                    if (
                      a1.isUndefined()
  
                      ) {
                      wrapped = nullptr;
                      wrappedCreated = false;
                      return;
                    }
                  

                  qWarning() << "no matching constructor variant found for QDomAttr";
                  wrapped = nullptr;
                  wrappedCreated = false;
                  handler.trace();
                
              }
            

    // non-static functions:
    
    // Class: QDomAttr
    // Function: operator_equal
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomAttr_Wrapper::operator_equal
              (
                
  const QJSValue& 
  a1
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp:  (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomAttr* w = getWrapped();
                bool res = 
                    
                w->operator==(
                  a1_cpp
    
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for operator_equal";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomAttr
    // Function: operator_unequal
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomAttr_Wrapper::operator_unequal
              (
                
  const QJSValue& 
  a1
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp:  (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomAttr* w = getWrapped();
                bool res = 
                    
                w->operator!=(
                  a1_cpp
    
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for operator_unequal";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomAttr
    // Function: insertBefore
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomAttr_Wrapper::insertBefore
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

   && RJSHelper::is_QDomNode(handler, a2
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: newChild (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        
  // convert js parameter to cpp: refChild (QDomNode)
  
QDomNode a2_cpp;

      a2_cpp = RJSHelper::js2cpp_QDomNode(handler, a2);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomAttr* w = getWrapped();
                QDomNode res = 
                    
                w->insertBefore(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for insertBefore";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomAttr
    // Function: insertAfter
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomAttr_Wrapper::insertAfter
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

   && RJSHelper::is_QDomNode(handler, a2
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: newChild (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        
  // convert js parameter to cpp: refChild (QDomNode)
  
QDomNode a2_cpp;

      a2_cpp = RJSHelper::js2cpp_QDomNode(handler, a2);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomAttr* w = getWrapped();
                QDomNode res = 
                    
                w->insertAfter(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for insertAfter";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomAttr
    // Function: replaceChild
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomAttr_Wrapper::replaceChild
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

   && RJSHelper::is_QDomNode(handler, a2
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: newChild (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        
  // convert js parameter to cpp: oldChild (QDomNode)
  
QDomNode a2_cpp;

      a2_cpp = RJSHelper::js2cpp_QDomNode(handler, a2);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomAttr* w = getWrapped();
                QDomNode res = 
                    
                w->replaceChild(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for replaceChild";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomAttr
    // Function: removeChild
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomAttr_Wrapper::removeChild
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: oldChild (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomAttr* w = getWrapped();
                QDomNode res = 
                    
                w->removeChild(
                  a1_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for removeChild";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomAttr
    // Function: appendChild
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomAttr_Wrapper::appendChild
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: newChild (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomAttr* w = getWrapped();
                QDomNode res = 
                    
                w->appendChild(
                  a1_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for appendChild";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomAttr
    // Function: hasChildNodes
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomAttr_Wrapper::hasChildNodes
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomAttr* w = getWrapped();
                bool res = 
                    
                w->hasChildNodes(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for hasChildNodes";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomAttr
    // Function: cloneNode
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomAttr_Wrapper::cloneNode
              (
                
  const QJSValue& 
  a1
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_bool(handler, a1
    , true
  
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: deep (bool)
  
bool a1_cpp;

      
          if (a1.isUndefined()) {
            a1_cpp = true;
          }
          else {
            a1_cpp = RJSHelper::js2cpp_bool(handler, a1);
          }
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomAttr* w = getWrapped();
                QDomNode res = 
                    
                w->cloneNode(
                  a1_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for cloneNode";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomAttr
    // Function: normalize
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomAttr_Wrapper::normalize
              (
                
              ) 
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomAttr* w = getWrapped();
                
                w->normalize(
                  
                );
              
            return QJSValue();
          
  }

                  qWarning() << "no matching function variant found for normalize";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomAttr
    // Function: isSupported
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomAttr_Wrapper::isSupported
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

   && RJSHelper::is_QString(handler, a2
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: feature (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        
  // convert js parameter to cpp: version (QString)
  
QString a2_cpp;

      a2_cpp = RJSHelper::js2cpp_QString(handler, a2);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomAttr* w = getWrapped();
                bool res = 
                    
                w->isSupported(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isSupported";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomAttr
    // Function: nodeName
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomAttr_Wrapper::nodeName
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomAttr* w = getWrapped();
                QString res = 
                    
                w->nodeName(
                  
                );
              
            // return type: QString

            return RJSHelper::cpp2js_QString(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for nodeName";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomAttr
    // Function: parentNode
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomAttr_Wrapper::parentNode
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomAttr* w = getWrapped();
                QDomNode res = 
                    
                w->parentNode(
                  
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for parentNode";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomAttr
    // Function: childNodes
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomAttr_Wrapper::childNodes
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomAttr* w = getWrapped();
                QDomNodeList res = 
                    
                w->childNodes(
                  
                );
              
            // return type: QDomNodeList

            return RJSHelper::cpp2js_QDomNodeList(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for childNodes";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomAttr
    // Function: firstChild
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomAttr_Wrapper::firstChild
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomAttr* w = getWrapped();
                QDomNode res = 
                    
                w->firstChild(
                  
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for firstChild";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomAttr
    // Function: lastChild
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomAttr_Wrapper::lastChild
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomAttr* w = getWrapped();
                QDomNode res = 
                    
                w->lastChild(
                  
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for lastChild";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomAttr
    // Function: previousSibling
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomAttr_Wrapper::previousSibling
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomAttr* w = getWrapped();
                QDomNode res = 
                    
                w->previousSibling(
                  
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for previousSibling";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomAttr
    // Function: nextSibling
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomAttr_Wrapper::nextSibling
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomAttr* w = getWrapped();
                QDomNode res = 
                    
                w->nextSibling(
                  
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for nextSibling";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomAttr
    // Function: attributes
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomAttr_Wrapper::attributes
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomAttr* w = getWrapped();
                QDomNamedNodeMap res = 
                    
                w->attributes(
                  
                );
              
            // return type: QDomNamedNodeMap

            return RJSHelper::cpp2js_QDomNamedNodeMap(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for attributes";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomAttr
    // Function: ownerDocument
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomAttr_Wrapper::ownerDocument
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomAttr* w = getWrapped();
                QDomDocument res = 
                    
                w->ownerDocument(
                  
                );
              
            // return type: QDomDocument

            return RJSHelper::cpp2js_QDomDocument(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for ownerDocument";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomAttr
    // Function: namespaceURI
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomAttr_Wrapper::namespaceURI
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomAttr* w = getWrapped();
                QString res = 
                    
                w->namespaceURI(
                  
                );
              
            // return type: QString

            return RJSHelper::cpp2js_QString(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for namespaceURI";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomAttr
    // Function: localName
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomAttr_Wrapper::localName
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomAttr* w = getWrapped();
                QString res = 
                    
                w->localName(
                  
                );
              
            // return type: QString

            return RJSHelper::cpp2js_QString(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for localName";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomAttr
    // Function: hasAttributes
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomAttr_Wrapper::hasAttributes
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomAttr* w = getWrapped();
                bool res = 
                    
                w->hasAttributes(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for hasAttributes";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomAttr
    // Function: nodeValue
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomAttr_Wrapper::nodeValue
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomAttr* w = getWrapped();
                QString res = 
                    
                w->nodeValue(
                  
                );
              
            // return type: QString

            return RJSHelper::cpp2js_QString(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for nodeValue";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomAttr
    // Function: setNodeValue
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomAttr_Wrapper::setNodeValue
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp:  (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomAttr* w = getWrapped();
                
                w->setNodeValue(
                  a1_cpp
    
                );
              
            return QJSValue();
          
  }

                  qWarning() << "no matching function variant found for setNodeValue";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomAttr
    // Function: prefix
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomAttr_Wrapper::prefix
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomAttr* w = getWrapped();
                QString res = 
                    
                w->prefix(
                  
                );
              
            // return type: QString

            return RJSHelper::cpp2js_QString(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for prefix";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomAttr
    // Function: setPrefix
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomAttr_Wrapper::setPrefix
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: pre (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomAttr* w = getWrapped();
                
                w->setPrefix(
                  a1_cpp
    
                );
              
            return QJSValue();
          
  }

                  qWarning() << "no matching function variant found for setPrefix";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomAttr
    // Function: isAttr
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomAttr_Wrapper::isAttr
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomAttr* w = getWrapped();
                bool res = 
                    
                w->isAttr(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isAttr";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomAttr
    // Function: isCDATASection
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomAttr_Wrapper::isCDATASection
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomAttr* w = getWrapped();
                bool res = 
                    
                w->isCDATASection(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isCDATASection";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomAttr
    // Function: isDocumentFragment
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomAttr_Wrapper::isDocumentFragment
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomAttr* w = getWrapped();
                bool res = 
                    
                w->isDocumentFragment(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isDocumentFragment";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomAttr
    // Function: isDocument
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomAttr_Wrapper::isDocument
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomAttr* w = getWrapped();
                bool res = 
                    
                w->isDocument(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isDocument";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomAttr
    // Function: isDocumentType
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomAttr_Wrapper::isDocumentType
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomAttr* w = getWrapped();
                bool res = 
                    
                w->isDocumentType(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isDocumentType";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomAttr
    // Function: isElement
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomAttr_Wrapper::isElement
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomAttr* w = getWrapped();
                bool res = 
                    
                w->isElement(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isElement";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomAttr
    // Function: isEntityReference
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomAttr_Wrapper::isEntityReference
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomAttr* w = getWrapped();
                bool res = 
                    
                w->isEntityReference(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isEntityReference";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomAttr
    // Function: isText
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomAttr_Wrapper::isText
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomAttr* w = getWrapped();
                bool res = 
                    
                w->isText(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isText";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomAttr
    // Function: isEntity
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomAttr_Wrapper::isEntity
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomAttr* w = getWrapped();
                bool res = 
                    
                w->isEntity(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isEntity";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomAttr
    // Function: isNotation
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomAttr_Wrapper::isNotation
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomAttr* w = getWrapped();
                bool res = 
                    
                w->isNotation(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isNotation";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomAttr
    // Function: isProcessingInstruction
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomAttr_Wrapper::isProcessingInstruction
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomAttr* w = getWrapped();
                bool res = 
                    
                w->isProcessingInstruction(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isProcessingInstruction";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomAttr
    // Function: isCharacterData
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomAttr_Wrapper::isCharacterData
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomAttr* w = getWrapped();
                bool res = 
                    
                w->isCharacterData(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isCharacterData";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomAttr
    // Function: isComment
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomAttr_Wrapper::isComment
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomAttr* w = getWrapped();
                bool res = 
                    
                w->isComment(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isComment";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomAttr
    // Function: namedItem
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomAttr_Wrapper::namedItem
              (
                
  const QJSValue& 
  a1
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: name (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomAttr* w = getWrapped();
                QDomNode res = 
                    
                w->namedItem(
                  a1_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for namedItem";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomAttr
    // Function: isNull
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomAttr_Wrapper::isNull
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomAttr* w = getWrapped();
                bool res = 
                    
                w->isNull(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isNull";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomAttr
    // Function: clear
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomAttr_Wrapper::clear
              (
                
              ) 
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomAttr* w = getWrapped();
                
                w->clear(
                  
                );
              
            return QJSValue();
          
  }

                  qWarning() << "no matching function variant found for clear";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomAttr
    // Function: toAttr
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomAttr_Wrapper::toAttr
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomAttr* w = getWrapped();
                QDomAttr res = 
                    
                w->toAttr(
                  
                );
              
            // return type: QDomAttr

            return RJSHelper::cpp2js_QDomAttr(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toAttr";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomAttr
    // Function: toCDATASection
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomAttr_Wrapper::toCDATASection
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomAttr* w = getWrapped();
                QDomCDATASection res = 
                    
                w->toCDATASection(
                  
                );
              
            // return type: QDomCDATASection

            return RJSHelper::cpp2js_QDomCDATASection(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toCDATASection";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomAttr
    // Function: toDocumentFragment
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomAttr_Wrapper::toDocumentFragment
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomAttr* w = getWrapped();
                QDomDocumentFragment res = 
                    
                w->toDocumentFragment(
                  
                );
              
            // return type: QDomDocumentFragment

            return RJSHelper::cpp2js_QDomDocumentFragment(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toDocumentFragment";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomAttr
    // Function: toDocument
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomAttr_Wrapper::toDocument
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomAttr* w = getWrapped();
                QDomDocument res = 
                    
                w->toDocument(
                  
                );
              
            // return type: QDomDocument

            return RJSHelper::cpp2js_QDomDocument(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toDocument";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomAttr
    // Function: toDocumentType
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomAttr_Wrapper::toDocumentType
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomAttr* w = getWrapped();
                QDomDocumentType res = 
                    
                w->toDocumentType(
                  
                );
              
            // return type: QDomDocumentType

            return RJSHelper::cpp2js_QDomDocumentType(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toDocumentType";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomAttr
    // Function: toElement
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomAttr_Wrapper::toElement
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomAttr* w = getWrapped();
                QDomElement res = 
                    
                w->toElement(
                  
                );
              
            // return type: QDomElement

            return RJSHelper::cpp2js_QDomElement(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toElement";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomAttr
    // Function: toEntityReference
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomAttr_Wrapper::toEntityReference
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomAttr* w = getWrapped();
                QDomEntityReference res = 
                    
                w->toEntityReference(
                  
                );
              
            // return type: QDomEntityReference

            return RJSHelper::cpp2js_QDomEntityReference(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toEntityReference";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomAttr
    // Function: toText
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomAttr_Wrapper::toText
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomAttr* w = getWrapped();
                QDomText res = 
                    
                w->toText(
                  
                );
              
            // return type: QDomText

            return RJSHelper::cpp2js_QDomText(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toText";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomAttr
    // Function: toEntity
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomAttr_Wrapper::toEntity
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomAttr* w = getWrapped();
                QDomEntity res = 
                    
                w->toEntity(
                  
                );
              
            // return type: QDomEntity

            return RJSHelper::cpp2js_QDomEntity(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toEntity";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomAttr
    // Function: toNotation
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomAttr_Wrapper::toNotation
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomAttr* w = getWrapped();
                QDomNotation res = 
                    
                w->toNotation(
                  
                );
              
            // return type: QDomNotation

            return RJSHelper::cpp2js_QDomNotation(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toNotation";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomAttr
    // Function: toProcessingInstruction
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomAttr_Wrapper::toProcessingInstruction
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomAttr* w = getWrapped();
                QDomProcessingInstruction res = 
                    
                w->toProcessingInstruction(
                  
                );
              
            // return type: QDomProcessingInstruction

            return RJSHelper::cpp2js_QDomProcessingInstruction(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toProcessingInstruction";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomAttr
    // Function: toCharacterData
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomAttr_Wrapper::toCharacterData
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomAttr* w = getWrapped();
                QDomCharacterData res = 
                    
                w->toCharacterData(
                  
                );
              
            // return type: QDomCharacterData

            return RJSHelper::cpp2js_QDomCharacterData(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toCharacterData";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomAttr
    // Function: toComment
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomAttr_Wrapper::toComment
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomAttr* w = getWrapped();
                QDomComment res = 
                    
                w->toComment(
                  
                );
              
            // return type: QDomComment

            return RJSHelper::cpp2js_QDomComment(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toComment";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomAttr
    // Function: firstChildElement
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomAttr_Wrapper::firstChildElement
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
    , true
  
  )

   && RJSHelper::is_QString(handler, a2
    , true
  
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: tagName (QString)
  
QString a1_cpp;

      
          if (a1.isUndefined()) {
            a1_cpp = QString();
          }
          else {
            a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
          }
        
  // convert js parameter to cpp: namespaceURI (QString)
  
QString a2_cpp;

      
          if (a2.isUndefined()) {
            a2_cpp = QString();
          }
          else {
            a2_cpp = RJSHelper::js2cpp_QString(handler, a2);
          }
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomAttr* w = getWrapped();
                QDomElement res = 
                    
                w->firstChildElement(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomElement

            return RJSHelper::cpp2js_QDomElement(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for firstChildElement";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomAttr
    // Function: lastChildElement
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomAttr_Wrapper::lastChildElement
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
    , true
  
  )

   && RJSHelper::is_QString(handler, a2
    , true
  
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: tagName (QString)
  
QString a1_cpp;

      
          if (a1.isUndefined()) {
            a1_cpp = QString();
          }
          else {
            a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
          }
        
  // convert js parameter to cpp: namespaceURI (QString)
  
QString a2_cpp;

      
          if (a2.isUndefined()) {
            a2_cpp = QString();
          }
          else {
            a2_cpp = RJSHelper::js2cpp_QString(handler, a2);
          }
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomAttr* w = getWrapped();
                QDomElement res = 
                    
                w->lastChildElement(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomElement

            return RJSHelper::cpp2js_QDomElement(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for lastChildElement";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomAttr
    // Function: previousSiblingElement
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomAttr_Wrapper::previousSiblingElement
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
    , true
  
  )

   && RJSHelper::is_QString(handler, a2
    , true
  
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: tagName (QString)
  
QString a1_cpp;

      
          if (a1.isUndefined()) {
            a1_cpp = QString();
          }
          else {
            a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
          }
        
  // convert js parameter to cpp: namespaceURI (QString)
  
QString a2_cpp;

      
          if (a2.isUndefined()) {
            a2_cpp = QString();
          }
          else {
            a2_cpp = RJSHelper::js2cpp_QString(handler, a2);
          }
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomAttr* w = getWrapped();
                QDomElement res = 
                    
                w->previousSiblingElement(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomElement

            return RJSHelper::cpp2js_QDomElement(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for previousSiblingElement";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomAttr
    // Function: nextSiblingElement
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomAttr_Wrapper::nextSiblingElement
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
    , true
  
  )

   && RJSHelper::is_QString(handler, a2
    , true
  
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: taName (QString)
  
QString a1_cpp;

      
          if (a1.isUndefined()) {
            a1_cpp = QString();
          }
          else {
            a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
          }
        
  // convert js parameter to cpp: namespaceURI (QString)
  
QString a2_cpp;

      
          if (a2.isUndefined()) {
            a2_cpp = QString();
          }
          else {
            a2_cpp = RJSHelper::js2cpp_QString(handler, a2);
          }
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomAttr* w = getWrapped();
                QDomElement res = 
                    
                w->nextSiblingElement(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomElement

            return RJSHelper::cpp2js_QDomElement(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for nextSiblingElement";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomAttr
    // Function: lineNumber
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomAttr_Wrapper::lineNumber
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomAttr* w = getWrapped();
                int res = 
                    
                w->lineNumber(
                  
                );
              
            // return type: int

            return RJSHelper::cpp2js_int(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for lineNumber";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomAttr
    // Function: columnNumber
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomAttr_Wrapper::columnNumber
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomAttr* w = getWrapped();
                int res = 
                    
                w->columnNumber(
                  
                );
              
            // return type: int

            return RJSHelper::cpp2js_int(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for columnNumber";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomAttr
    // Function: operator_assign
    // Source: 
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomAttr_Wrapper::operator_assign
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomAttr(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp:  (QDomAttr)
  
QDomAttr a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomAttr(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomAttr* w = getWrapped();
                
                      // return type is reference:
                      // use pointer instead 3:
                      QDomAttr* res =
                    &
                w->operator=(
                  a1_cpp
    
                );
              
            // return type: QDomAttr&

            return RJSHelper::cpp2js_QDomAttr(
              handler, 
              // non-copyable: false
                  // return type is reference, type is copyable:
                  // convert pointer back to reference:
                  *res
                
              );
            
  }

                  qWarning() << "no matching function variant found for operator_assign";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomAttr
    // Function: name
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomAttr_Wrapper::name
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomAttr* w = getWrapped();
                QString res = 
                    
                w->name(
                  
                );
              
            // return type: QString

            return RJSHelper::cpp2js_QString(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for name";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomAttr
    // Function: specified
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomAttr_Wrapper::specified
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomAttr* w = getWrapped();
                bool res = 
                    
                w->specified(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for specified";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomAttr
    // Function: ownerElement
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomAttr_Wrapper::ownerElement
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomAttr* w = getWrapped();
                QDomElement res = 
                    
                w->ownerElement(
                  
                );
              
            // return type: QDomElement

            return RJSHelper::cpp2js_QDomElement(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for ownerElement";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomAttr
    // Function: value
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomAttr_Wrapper::value
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomAttr* w = getWrapped();
                QString res = 
                    
                w->value(
                  
                );
              
            // return type: QString

            return RJSHelper::cpp2js_QString(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for value";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomAttr
    // Function: setValue
    // Source: 
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomAttr_Wrapper::setValue
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp:  (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomAttr* w = getWrapped();
                
                w->setValue(
                  a1_cpp
    
                );
              
            return QJSValue();
          
  }

                  qWarning() << "no matching function variant found for setValue";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomAttr
    // Function: nodeType
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomAttr_Wrapper::nodeType
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomAttr* w = getWrapped();
                QDomNode::NodeType res = 
                    
                w->nodeType(
                  
                );
              
            // return type: QDomNode::NodeType

            return RJSHelper::cpp2js_QDomNode_NodeType(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for nodeType";
                  handler.trace();
                  return QJSValue();
                
              }
            

  // member functions for static properties, forward to static function
  


  // protected overwritten functions / events and their public invokable counterparts:
  
    #include "qdom_wrapper.h"

  
      // list of registered base casters for this wrapper class:
      QList<RJSBasecaster_QDomElement*> QDomElement_Wrapper::basecasters_QDomElement;
    
    // static functions implementation in singleton wrapper:
    
    void QDomElement_Wrapper::init(RJSApi& handler) {
      
        //qmlRegisterType<QDomElement_Wrapper>("org.qcad", 1, 0, "QDomElement_Wrapper");
        qmlRegisterInterface<QDomElement_Wrapper>("QDomElement_Wrapper", 1);
      

      QJSEngine* engine = handler.getEngine();

      
          // make type scriptable for JS files:
          QJSValue global = engine->globalObject();
          RJSType_QDomElement* t = new RJSType_QDomElement();
          global.setProperty("RJSType_QDomElement", engine->newQObject(t));

          // initialize ID for this type:
          RJSType_QDomElement::getIdStatic();

          

      // wrapper:
      QJSValue mo = engine->newQMetaObject(&QDomElement_Wrapper::staticMetaObject);
      engine->globalObject().setProperty("QDomElement_Wrapper", mo);


      
        // JS base class:
        //QJSValue mob = engine->newQMetaObject(&QDomElement_BaseJs::staticMetaObject);
        //engine->globalObject().setProperty("QDomElement_BaseJs", mob);
      
      QString fileName = ":generator/js/QDomElement.js";
      QFile scriptFile(fileName);
      if (!scriptFile.open(QIODevice::ReadOnly)) {
        qWarning() << "JS script wrapper file not found:" << fileName;
        return;
      }
      QTextStream stream(&scriptFile);
      QString contents = stream.readAll();
      scriptFile.close();

      qDebug() << "Evaluating file: " << fileName;
      QJSValue result = engine->evaluate(contents, fileName);
      if (result.isError()) {
          qWarning()
              << "Uncaught exception at line"
              << result.property("lineNumber").toInt()
              << ":" << result.toString();
      }
    }
  
    /*
    // special constructor used as prototype:
    QDomElement_Wrapper::QDomElement_Wrapper(QJSEngine* e) : wrapped(nullptr), wrappedCreated(false) {
            //setObjectName("QDomElement_Wrapper");
            setEngine(e);

            // signal forwarding:
            //initConnections();
          }
        
    */

    
      // special constructor to wrap existing object:
      QDomElement_Wrapper::QDomElement_Wrapper(RJSApi& h, QDomElement* o, bool wrappedCreated) : RJSWrapperObj(h), wrapped(o), wrappedCreated(wrappedCreated) {
              //RDebug::incCounter(QString("QDomElement_Wrapper_") + handler.getEngine()->objectName());
              //RDebug::incCounter(QString("QDomElement_Wrapper"));
              //setObjectName("QDomElement_Wrapper");
              //setHandler(h);

              // signal forwarding:
              initConnections();
            }
          

      // destructor:
      QDomElement_Wrapper::~QDomElement_Wrapper() {
            //RDebug::decCounter(QString("QDomElement_Wrapper_") + handler.getEngine()->objectName());
            //RDebug::decCounter(QString("QDomElement_Wrapper"));

            //qDebug() << "QDomElement_Wrapper::~QDomElement_Wrapper";

            // tell script handler that this wrapper no longer exists:
            handler.unregisterWrapper(*this);

            
            if (wrappedCreated) {
              
                  // delete wrapped object (copyable, JS ownership)
                  //qDebug() << "deleting instance of QDomElement";
                  delete wrapped;
                
            }
            
          }
        
    // initialization of signal forwarding
    
        void QDomElement_Wrapper::initConnections() {

          //setObjectName("QDomElement_Wrapper");

          // tell script handler that this wrapper needs to be deleted if the engine is deleted:
          handler.registerWrapper(*this);

          
              // wrapped object is not a QObject:
              // wrapper is managed by script engine:
              //QJSEngine::setObjectOwnership(this, QJSEngine::CppOwnership);
            

          if (hasWrapped()) {
            
            // set up signal forwarding:
            
          }
        }
      

  // constructors:
  
    // Class: QDomElement
    // Function: 
    // Source: 
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1
QDomElement_Wrapper::QDomElement_Wrapper
                
              (
                
                  // RJSApi:
                  QObject* h
                  ,
  const QJSValue& 
  a1
              ) 
              
                : RJSWrapperObj(*(RJSApi*)h)
              
              {
                
                  //RDebug::incCounter(QString("QDomElement_Wrapper_") + handler.getEngine()->objectName());
                  //RDebug::incCounter(QString("QDomElement_Wrapper"));
                
      // check parameter types:
      if (
        RJSHelper::is_QDomElement(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: x (QDomElement)
  
QDomElement a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomElement(handler, a1);
        

    // call function:
    
        // construct wrapper:

        
            wrapped = new QDomElement(
                a1_cpp
    
            );
            wrappedCreated = true;
          

        // signal forwarding:
        // TODO
        //connect(wrapped, SIGNAL(triggered(bool)), this, SLOT(triggeredEmitter(bool)));
        initConnections();
        return;

      
  }

      {
    

    // call function:
    
        // construct wrapper:

        
            wrapped = new QDomElement(
                
            );
            wrappedCreated = true;
          

        // signal forwarding:
        // TODO
        //connect(wrapped, SIGNAL(triggered(bool)), this, SLOT(triggeredEmitter(bool)));
        initConnections();
        return;

      
  }

                    // no constructor without arguments defined
                    // allow constructor for prototype objects without args:
                    if (
                      a1.isUndefined()
  
                      ) {
                      wrapped = nullptr;
                      wrappedCreated = false;
                      return;
                    }
                  

                  qWarning() << "no matching constructor variant found for QDomElement";
                  wrapped = nullptr;
                  wrappedCreated = false;
                  handler.trace();
                
              }
            

    // non-static functions:
    
    // Class: QDomElement
    // Function: operator_equal
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomElement_Wrapper::operator_equal
              (
                
  const QJSValue& 
  a1
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp:  (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                bool res = 
                    
                w->operator==(
                  a1_cpp
    
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for operator_equal";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomElement
    // Function: operator_unequal
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomElement_Wrapper::operator_unequal
              (
                
  const QJSValue& 
  a1
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp:  (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                bool res = 
                    
                w->operator!=(
                  a1_cpp
    
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for operator_unequal";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomElement
    // Function: insertBefore
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomElement_Wrapper::insertBefore
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

   && RJSHelper::is_QDomNode(handler, a2
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: newChild (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        
  // convert js parameter to cpp: refChild (QDomNode)
  
QDomNode a2_cpp;

      a2_cpp = RJSHelper::js2cpp_QDomNode(handler, a2);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                QDomNode res = 
                    
                w->insertBefore(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for insertBefore";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomElement
    // Function: insertAfter
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomElement_Wrapper::insertAfter
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

   && RJSHelper::is_QDomNode(handler, a2
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: newChild (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        
  // convert js parameter to cpp: refChild (QDomNode)
  
QDomNode a2_cpp;

      a2_cpp = RJSHelper::js2cpp_QDomNode(handler, a2);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                QDomNode res = 
                    
                w->insertAfter(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for insertAfter";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomElement
    // Function: replaceChild
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomElement_Wrapper::replaceChild
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

   && RJSHelper::is_QDomNode(handler, a2
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: newChild (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        
  // convert js parameter to cpp: oldChild (QDomNode)
  
QDomNode a2_cpp;

      a2_cpp = RJSHelper::js2cpp_QDomNode(handler, a2);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                QDomNode res = 
                    
                w->replaceChild(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for replaceChild";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomElement
    // Function: removeChild
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomElement_Wrapper::removeChild
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: oldChild (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                QDomNode res = 
                    
                w->removeChild(
                  a1_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for removeChild";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomElement
    // Function: appendChild
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomElement_Wrapper::appendChild
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: newChild (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                QDomNode res = 
                    
                w->appendChild(
                  a1_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for appendChild";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomElement
    // Function: hasChildNodes
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomElement_Wrapper::hasChildNodes
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                bool res = 
                    
                w->hasChildNodes(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for hasChildNodes";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomElement
    // Function: cloneNode
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomElement_Wrapper::cloneNode
              (
                
  const QJSValue& 
  a1
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_bool(handler, a1
    , true
  
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: deep (bool)
  
bool a1_cpp;

      
          if (a1.isUndefined()) {
            a1_cpp = true;
          }
          else {
            a1_cpp = RJSHelper::js2cpp_bool(handler, a1);
          }
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                QDomNode res = 
                    
                w->cloneNode(
                  a1_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for cloneNode";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomElement
    // Function: normalize
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomElement_Wrapper::normalize
              (
                
              ) 
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                
                w->normalize(
                  
                );
              
            return QJSValue();
          
  }

                  qWarning() << "no matching function variant found for normalize";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomElement
    // Function: isSupported
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomElement_Wrapper::isSupported
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

   && RJSHelper::is_QString(handler, a2
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: feature (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        
  // convert js parameter to cpp: version (QString)
  
QString a2_cpp;

      a2_cpp = RJSHelper::js2cpp_QString(handler, a2);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                bool res = 
                    
                w->isSupported(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isSupported";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomElement
    // Function: nodeName
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomElement_Wrapper::nodeName
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                QString res = 
                    
                w->nodeName(
                  
                );
              
            // return type: QString

            return RJSHelper::cpp2js_QString(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for nodeName";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomElement
    // Function: parentNode
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomElement_Wrapper::parentNode
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                QDomNode res = 
                    
                w->parentNode(
                  
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for parentNode";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomElement
    // Function: childNodes
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomElement_Wrapper::childNodes
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                QDomNodeList res = 
                    
                w->childNodes(
                  
                );
              
            // return type: QDomNodeList

            return RJSHelper::cpp2js_QDomNodeList(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for childNodes";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomElement
    // Function: firstChild
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomElement_Wrapper::firstChild
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                QDomNode res = 
                    
                w->firstChild(
                  
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for firstChild";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomElement
    // Function: lastChild
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomElement_Wrapper::lastChild
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                QDomNode res = 
                    
                w->lastChild(
                  
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for lastChild";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomElement
    // Function: previousSibling
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomElement_Wrapper::previousSibling
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                QDomNode res = 
                    
                w->previousSibling(
                  
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for previousSibling";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomElement
    // Function: nextSibling
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomElement_Wrapper::nextSibling
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                QDomNode res = 
                    
                w->nextSibling(
                  
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for nextSibling";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomElement
    // Function: ownerDocument
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomElement_Wrapper::ownerDocument
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                QDomDocument res = 
                    
                w->ownerDocument(
                  
                );
              
            // return type: QDomDocument

            return RJSHelper::cpp2js_QDomDocument(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for ownerDocument";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomElement
    // Function: namespaceURI
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomElement_Wrapper::namespaceURI
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                QString res = 
                    
                w->namespaceURI(
                  
                );
              
            // return type: QString

            return RJSHelper::cpp2js_QString(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for namespaceURI";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomElement
    // Function: localName
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomElement_Wrapper::localName
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                QString res = 
                    
                w->localName(
                  
                );
              
            // return type: QString

            return RJSHelper::cpp2js_QString(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for localName";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomElement
    // Function: hasAttributes
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomElement_Wrapper::hasAttributes
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                bool res = 
                    
                w->hasAttributes(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for hasAttributes";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomElement
    // Function: nodeValue
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomElement_Wrapper::nodeValue
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                QString res = 
                    
                w->nodeValue(
                  
                );
              
            // return type: QString

            return RJSHelper::cpp2js_QString(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for nodeValue";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomElement
    // Function: setNodeValue
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomElement_Wrapper::setNodeValue
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp:  (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                
                w->setNodeValue(
                  a1_cpp
    
                );
              
            return QJSValue();
          
  }

                  qWarning() << "no matching function variant found for setNodeValue";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomElement
    // Function: prefix
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomElement_Wrapper::prefix
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                QString res = 
                    
                w->prefix(
                  
                );
              
            // return type: QString

            return RJSHelper::cpp2js_QString(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for prefix";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomElement
    // Function: setPrefix
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomElement_Wrapper::setPrefix
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: pre (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                
                w->setPrefix(
                  a1_cpp
    
                );
              
            return QJSValue();
          
  }

                  qWarning() << "no matching function variant found for setPrefix";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomElement
    // Function: isAttr
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomElement_Wrapper::isAttr
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                bool res = 
                    
                w->isAttr(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isAttr";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomElement
    // Function: isCDATASection
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomElement_Wrapper::isCDATASection
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                bool res = 
                    
                w->isCDATASection(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isCDATASection";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomElement
    // Function: isDocumentFragment
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomElement_Wrapper::isDocumentFragment
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                bool res = 
                    
                w->isDocumentFragment(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isDocumentFragment";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomElement
    // Function: isDocument
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomElement_Wrapper::isDocument
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                bool res = 
                    
                w->isDocument(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isDocument";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomElement
    // Function: isDocumentType
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomElement_Wrapper::isDocumentType
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                bool res = 
                    
                w->isDocumentType(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isDocumentType";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomElement
    // Function: isElement
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomElement_Wrapper::isElement
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                bool res = 
                    
                w->isElement(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isElement";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomElement
    // Function: isEntityReference
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomElement_Wrapper::isEntityReference
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                bool res = 
                    
                w->isEntityReference(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isEntityReference";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomElement
    // Function: isText
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomElement_Wrapper::isText
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                bool res = 
                    
                w->isText(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isText";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomElement
    // Function: isEntity
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomElement_Wrapper::isEntity
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                bool res = 
                    
                w->isEntity(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isEntity";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomElement
    // Function: isNotation
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomElement_Wrapper::isNotation
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                bool res = 
                    
                w->isNotation(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isNotation";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomElement
    // Function: isProcessingInstruction
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomElement_Wrapper::isProcessingInstruction
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                bool res = 
                    
                w->isProcessingInstruction(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isProcessingInstruction";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomElement
    // Function: isCharacterData
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomElement_Wrapper::isCharacterData
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                bool res = 
                    
                w->isCharacterData(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isCharacterData";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomElement
    // Function: isComment
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomElement_Wrapper::isComment
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                bool res = 
                    
                w->isComment(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isComment";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomElement
    // Function: namedItem
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomElement_Wrapper::namedItem
              (
                
  const QJSValue& 
  a1
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: name (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                QDomNode res = 
                    
                w->namedItem(
                  a1_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for namedItem";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomElement
    // Function: isNull
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomElement_Wrapper::isNull
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                bool res = 
                    
                w->isNull(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isNull";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomElement
    // Function: clear
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomElement_Wrapper::clear
              (
                
              ) 
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                
                w->clear(
                  
                );
              
            return QJSValue();
          
  }

                  qWarning() << "no matching function variant found for clear";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomElement
    // Function: toAttr
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomElement_Wrapper::toAttr
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                QDomAttr res = 
                    
                w->toAttr(
                  
                );
              
            // return type: QDomAttr

            return RJSHelper::cpp2js_QDomAttr(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toAttr";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomElement
    // Function: toCDATASection
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomElement_Wrapper::toCDATASection
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                QDomCDATASection res = 
                    
                w->toCDATASection(
                  
                );
              
            // return type: QDomCDATASection

            return RJSHelper::cpp2js_QDomCDATASection(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toCDATASection";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomElement
    // Function: toDocumentFragment
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomElement_Wrapper::toDocumentFragment
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                QDomDocumentFragment res = 
                    
                w->toDocumentFragment(
                  
                );
              
            // return type: QDomDocumentFragment

            return RJSHelper::cpp2js_QDomDocumentFragment(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toDocumentFragment";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomElement
    // Function: toDocument
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomElement_Wrapper::toDocument
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                QDomDocument res = 
                    
                w->toDocument(
                  
                );
              
            // return type: QDomDocument

            return RJSHelper::cpp2js_QDomDocument(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toDocument";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomElement
    // Function: toDocumentType
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomElement_Wrapper::toDocumentType
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                QDomDocumentType res = 
                    
                w->toDocumentType(
                  
                );
              
            // return type: QDomDocumentType

            return RJSHelper::cpp2js_QDomDocumentType(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toDocumentType";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomElement
    // Function: toElement
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomElement_Wrapper::toElement
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                QDomElement res = 
                    
                w->toElement(
                  
                );
              
            // return type: QDomElement

            return RJSHelper::cpp2js_QDomElement(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toElement";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomElement
    // Function: toEntityReference
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomElement_Wrapper::toEntityReference
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                QDomEntityReference res = 
                    
                w->toEntityReference(
                  
                );
              
            // return type: QDomEntityReference

            return RJSHelper::cpp2js_QDomEntityReference(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toEntityReference";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomElement
    // Function: toText
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomElement_Wrapper::toText
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                QDomText res = 
                    
                w->toText(
                  
                );
              
            // return type: QDomText

            return RJSHelper::cpp2js_QDomText(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toText";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomElement
    // Function: toEntity
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomElement_Wrapper::toEntity
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                QDomEntity res = 
                    
                w->toEntity(
                  
                );
              
            // return type: QDomEntity

            return RJSHelper::cpp2js_QDomEntity(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toEntity";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomElement
    // Function: toNotation
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomElement_Wrapper::toNotation
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                QDomNotation res = 
                    
                w->toNotation(
                  
                );
              
            // return type: QDomNotation

            return RJSHelper::cpp2js_QDomNotation(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toNotation";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomElement
    // Function: toProcessingInstruction
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomElement_Wrapper::toProcessingInstruction
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                QDomProcessingInstruction res = 
                    
                w->toProcessingInstruction(
                  
                );
              
            // return type: QDomProcessingInstruction

            return RJSHelper::cpp2js_QDomProcessingInstruction(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toProcessingInstruction";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomElement
    // Function: toCharacterData
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomElement_Wrapper::toCharacterData
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                QDomCharacterData res = 
                    
                w->toCharacterData(
                  
                );
              
            // return type: QDomCharacterData

            return RJSHelper::cpp2js_QDomCharacterData(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toCharacterData";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomElement
    // Function: toComment
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomElement_Wrapper::toComment
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                QDomComment res = 
                    
                w->toComment(
                  
                );
              
            // return type: QDomComment

            return RJSHelper::cpp2js_QDomComment(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toComment";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomElement
    // Function: firstChildElement
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomElement_Wrapper::firstChildElement
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
    , true
  
  )

   && RJSHelper::is_QString(handler, a2
    , true
  
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: tagName (QString)
  
QString a1_cpp;

      
          if (a1.isUndefined()) {
            a1_cpp = QString();
          }
          else {
            a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
          }
        
  // convert js parameter to cpp: namespaceURI (QString)
  
QString a2_cpp;

      
          if (a2.isUndefined()) {
            a2_cpp = QString();
          }
          else {
            a2_cpp = RJSHelper::js2cpp_QString(handler, a2);
          }
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                QDomElement res = 
                    
                w->firstChildElement(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomElement

            return RJSHelper::cpp2js_QDomElement(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for firstChildElement";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomElement
    // Function: lastChildElement
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomElement_Wrapper::lastChildElement
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
    , true
  
  )

   && RJSHelper::is_QString(handler, a2
    , true
  
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: tagName (QString)
  
QString a1_cpp;

      
          if (a1.isUndefined()) {
            a1_cpp = QString();
          }
          else {
            a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
          }
        
  // convert js parameter to cpp: namespaceURI (QString)
  
QString a2_cpp;

      
          if (a2.isUndefined()) {
            a2_cpp = QString();
          }
          else {
            a2_cpp = RJSHelper::js2cpp_QString(handler, a2);
          }
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                QDomElement res = 
                    
                w->lastChildElement(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomElement

            return RJSHelper::cpp2js_QDomElement(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for lastChildElement";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomElement
    // Function: previousSiblingElement
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomElement_Wrapper::previousSiblingElement
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
    , true
  
  )

   && RJSHelper::is_QString(handler, a2
    , true
  
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: tagName (QString)
  
QString a1_cpp;

      
          if (a1.isUndefined()) {
            a1_cpp = QString();
          }
          else {
            a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
          }
        
  // convert js parameter to cpp: namespaceURI (QString)
  
QString a2_cpp;

      
          if (a2.isUndefined()) {
            a2_cpp = QString();
          }
          else {
            a2_cpp = RJSHelper::js2cpp_QString(handler, a2);
          }
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                QDomElement res = 
                    
                w->previousSiblingElement(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomElement

            return RJSHelper::cpp2js_QDomElement(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for previousSiblingElement";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomElement
    // Function: nextSiblingElement
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomElement_Wrapper::nextSiblingElement
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
    , true
  
  )

   && RJSHelper::is_QString(handler, a2
    , true
  
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: taName (QString)
  
QString a1_cpp;

      
          if (a1.isUndefined()) {
            a1_cpp = QString();
          }
          else {
            a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
          }
        
  // convert js parameter to cpp: namespaceURI (QString)
  
QString a2_cpp;

      
          if (a2.isUndefined()) {
            a2_cpp = QString();
          }
          else {
            a2_cpp = RJSHelper::js2cpp_QString(handler, a2);
          }
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                QDomElement res = 
                    
                w->nextSiblingElement(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomElement

            return RJSHelper::cpp2js_QDomElement(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for nextSiblingElement";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomElement
    // Function: lineNumber
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomElement_Wrapper::lineNumber
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                int res = 
                    
                w->lineNumber(
                  
                );
              
            // return type: int

            return RJSHelper::cpp2js_int(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for lineNumber";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomElement
    // Function: columnNumber
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomElement_Wrapper::columnNumber
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                int res = 
                    
                w->columnNumber(
                  
                );
              
            // return type: int

            return RJSHelper::cpp2js_int(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for columnNumber";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomElement
    // Function: operator_assign
    // Source: 
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomElement_Wrapper::operator_assign
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomElement(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp:  (QDomElement)
  
QDomElement a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomElement(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                
                      // return type is reference:
                      // use pointer instead 3:
                      QDomElement* res =
                    &
                w->operator=(
                  a1_cpp
    
                );
              
            // return type: QDomElement&

            return RJSHelper::cpp2js_QDomElement(
              handler, 
              // non-copyable: false
                  // return type is reference, type is copyable:
                  // convert pointer back to reference:
                  *res
                
              );
            
  }

                  qWarning() << "no matching function variant found for operator_assign";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomElement
    // Function: attribute
    // Source: 
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomElement_Wrapper::attribute
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

   && RJSHelper::is_QString(handler, a2
    , true
  
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: name (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        
  // convert js parameter to cpp: defValue (QString)
  
QString a2_cpp;

      
          if (a2.isUndefined()) {
            a2_cpp = QString();
          }
          else {
            a2_cpp = RJSHelper::js2cpp_QString(handler, a2);
          }
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                QString res = 
                    
                w->attribute(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QString

            return RJSHelper::cpp2js_QString(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for attribute";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomElement
    // Function: setAttribute
    // Source: 
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomElement_Wrapper::setAttribute
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

   && RJSHelper::is_QString(handler, a2
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: name (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        
  // convert js parameter to cpp: value (QString)
  
QString a2_cpp;

      a2_cpp = RJSHelper::js2cpp_QString(handler, a2);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                
                w->setAttribute(
                  a1_cpp
    , a2_cpp
    
                );
              
            return QJSValue();
          
  }

      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

   && RJSHelper::is_qlonglong(handler, a2
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: name (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        
  // convert js parameter to cpp: value (qlonglong)
  
qlonglong a2_cpp;

      a2_cpp = RJSHelper::js2cpp_qlonglong(handler, a2);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                
                w->setAttribute(
                  a1_cpp
    , a2_cpp
    
                );
              
            return QJSValue();
          
  }

      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

   && RJSHelper::is_qulonglong(handler, a2
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: name (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        
  // convert js parameter to cpp: value (qulonglong)
  
qulonglong a2_cpp;

      a2_cpp = RJSHelper::js2cpp_qulonglong(handler, a2);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                
                w->setAttribute(
                  a1_cpp
    , a2_cpp
    
                );
              
            return QJSValue();
          
  }

      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

   && RJSHelper::is_int(handler, a2
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: name (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        
  // convert js parameter to cpp: value (int)
  
int a2_cpp;

      a2_cpp = RJSHelper::js2cpp_int(handler, a2);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                
                w->setAttribute(
                  a1_cpp
    , a2_cpp
    
                );
              
            return QJSValue();
          
  }

      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

   && RJSHelper::is_uint(handler, a2
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: name (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        
  // convert js parameter to cpp: value (uint)
  
uint a2_cpp;

      a2_cpp = RJSHelper::js2cpp_uint(handler, a2);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                
                w->setAttribute(
                  a1_cpp
    , a2_cpp
    
                );
              
            return QJSValue();
          
  }

      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

   && RJSHelper::is_float(handler, a2
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: name (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        
  // convert js parameter to cpp: value (float)
  
float a2_cpp;

      a2_cpp = RJSHelper::js2cpp_float(handler, a2);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                
                w->setAttribute(
                  a1_cpp
    , a2_cpp
    
                );
              
            return QJSValue();
          
  }

      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

   && RJSHelper::is_double(handler, a2
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: name (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        
  // convert js parameter to cpp: value (double)
  
double a2_cpp;

      a2_cpp = RJSHelper::js2cpp_double(handler, a2);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                
                w->setAttribute(
                  a1_cpp
    , a2_cpp
    
                );
              
            return QJSValue();
          
  }

                  qWarning() << "no matching function variant found for setAttribute";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomElement
    // Function: removeAttribute
    // Source: 
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomElement_Wrapper::removeAttribute
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: name (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                
                w->removeAttribute(
                  a1_cpp
    
                );
              
            return QJSValue();
          
  }

                  qWarning() << "no matching function variant found for removeAttribute";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomElement
    // Function: attributeNode
    // Source: 
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomElement_Wrapper::attributeNode
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: name (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                QDomAttr res = 
                    
                w->attributeNode(
                  a1_cpp
    
                );
              
            // return type: QDomAttr

            return RJSHelper::cpp2js_QDomAttr(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for attributeNode";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomElement
    // Function: setAttributeNode
    // Source: 
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomElement_Wrapper::setAttributeNode
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomAttr(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: newAttr (QDomAttr)
  
QDomAttr a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomAttr(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                QDomAttr res = 
                    
                w->setAttributeNode(
                  a1_cpp
    
                );
              
            // return type: QDomAttr

            return RJSHelper::cpp2js_QDomAttr(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for setAttributeNode";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomElement
    // Function: removeAttributeNode
    // Source: 
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomElement_Wrapper::removeAttributeNode
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomAttr(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: oldAttr (QDomAttr)
  
QDomAttr a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomAttr(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                QDomAttr res = 
                    
                w->removeAttributeNode(
                  a1_cpp
    
                );
              
            // return type: QDomAttr

            return RJSHelper::cpp2js_QDomAttr(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for removeAttributeNode";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomElement
    // Function: elementsByTagName
    // Source: 
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomElement_Wrapper::elementsByTagName
              (
                
  const QJSValue& 
  a1
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: tagname (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                QDomNodeList res = 
                    
                w->elementsByTagName(
                  a1_cpp
    
                );
              
            // return type: QDomNodeList

            return RJSHelper::cpp2js_QDomNodeList(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for elementsByTagName";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomElement
    // Function: hasAttribute
    // Source: 
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomElement_Wrapper::hasAttribute
              (
                
  const QJSValue& 
  a1
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: name (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                bool res = 
                    
                w->hasAttribute(
                  a1_cpp
    
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for hasAttribute";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomElement
    // Function: attributeNS
    // Source: 
    // Static: false
    // Parameters: 3
    // preceding Parameters: -1

                QJSValue 
              QDomElement_Wrapper::attributeNS
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2, 
  const QJSValue& 
  a3
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

   && RJSHelper::is_QString(handler, a2
  )

   && RJSHelper::is_QString(handler, a3
    , true
  
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: nsURI (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        
  // convert js parameter to cpp: localName (QString)
  
QString a2_cpp;

      a2_cpp = RJSHelper::js2cpp_QString(handler, a2);
        
  // convert js parameter to cpp: defValue (QString)
  
QString a3_cpp;

      
          if (a3.isUndefined()) {
            a3_cpp = QString();
          }
          else {
            a3_cpp = RJSHelper::js2cpp_QString(handler, a3);
          }
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                QString res = 
                    
                w->attributeNS(
                  a1_cpp
    , a2_cpp
    , a3_cpp
    
                );
              
            // return type: QString

            return RJSHelper::cpp2js_QString(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for attributeNS";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomElement
    // Function: setAttributeNS
    // Source: 
    // Static: false
    // Parameters: 3
    // preceding Parameters: -1

                QJSValue 
              QDomElement_Wrapper::setAttributeNS
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2, 
  const QJSValue& 
  a3
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

   && RJSHelper::is_QString(handler, a2
  )

   && RJSHelper::is_QString(handler, a3
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: nsURI (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        
  // convert js parameter to cpp: qName (QString)
  
QString a2_cpp;

      a2_cpp = RJSHelper::js2cpp_QString(handler, a2);
        
  // convert js parameter to cpp: value (QString)
  
QString a3_cpp;

      a3_cpp = RJSHelper::js2cpp_QString(handler, a3);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                
                w->setAttributeNS(
                  a1_cpp
    , a2_cpp
    , a3_cpp
    
                );
              
            return QJSValue();
          
  }

      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

   && RJSHelper::is_QString(handler, a2
  )

   && RJSHelper::is_int(handler, a3
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: nsURI (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        
  // convert js parameter to cpp: qName (QString)
  
QString a2_cpp;

      a2_cpp = RJSHelper::js2cpp_QString(handler, a2);
        
  // convert js parameter to cpp: value (int)
  
int a3_cpp;

      a3_cpp = RJSHelper::js2cpp_int(handler, a3);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                
                w->setAttributeNS(
                  a1_cpp
    , a2_cpp
    , a3_cpp
    
                );
              
            return QJSValue();
          
  }

      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

   && RJSHelper::is_QString(handler, a2
  )

   && RJSHelper::is_uint(handler, a3
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: nsURI (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        
  // convert js parameter to cpp: qName (QString)
  
QString a2_cpp;

      a2_cpp = RJSHelper::js2cpp_QString(handler, a2);
        
  // convert js parameter to cpp: value (uint)
  
uint a3_cpp;

      a3_cpp = RJSHelper::js2cpp_uint(handler, a3);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                
                w->setAttributeNS(
                  a1_cpp
    , a2_cpp
    , a3_cpp
    
                );
              
            return QJSValue();
          
  }

      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

   && RJSHelper::is_QString(handler, a2
  )

   && RJSHelper::is_qlonglong(handler, a3
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: nsURI (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        
  // convert js parameter to cpp: qName (QString)
  
QString a2_cpp;

      a2_cpp = RJSHelper::js2cpp_QString(handler, a2);
        
  // convert js parameter to cpp: value (qlonglong)
  
qlonglong a3_cpp;

      a3_cpp = RJSHelper::js2cpp_qlonglong(handler, a3);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                
                w->setAttributeNS(
                  a1_cpp
    , a2_cpp
    , a3_cpp
    
                );
              
            return QJSValue();
          
  }

      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

   && RJSHelper::is_QString(handler, a2
  )

   && RJSHelper::is_qulonglong(handler, a3
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: nsURI (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        
  // convert js parameter to cpp: qName (QString)
  
QString a2_cpp;

      a2_cpp = RJSHelper::js2cpp_QString(handler, a2);
        
  // convert js parameter to cpp: value (qulonglong)
  
qulonglong a3_cpp;

      a3_cpp = RJSHelper::js2cpp_qulonglong(handler, a3);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                
                w->setAttributeNS(
                  a1_cpp
    , a2_cpp
    , a3_cpp
    
                );
              
            return QJSValue();
          
  }

      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

   && RJSHelper::is_QString(handler, a2
  )

   && RJSHelper::is_double(handler, a3
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: nsURI (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        
  // convert js parameter to cpp: qName (QString)
  
QString a2_cpp;

      a2_cpp = RJSHelper::js2cpp_QString(handler, a2);
        
  // convert js parameter to cpp: value (double)
  
double a3_cpp;

      a3_cpp = RJSHelper::js2cpp_double(handler, a3);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                
                w->setAttributeNS(
                  a1_cpp
    , a2_cpp
    , a3_cpp
    
                );
              
            return QJSValue();
          
  }

                  qWarning() << "no matching function variant found for setAttributeNS";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomElement
    // Function: removeAttributeNS
    // Source: 
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomElement_Wrapper::removeAttributeNS
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

   && RJSHelper::is_QString(handler, a2
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: nsURI (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        
  // convert js parameter to cpp: localName (QString)
  
QString a2_cpp;

      a2_cpp = RJSHelper::js2cpp_QString(handler, a2);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                
                w->removeAttributeNS(
                  a1_cpp
    , a2_cpp
    
                );
              
            return QJSValue();
          
  }

                  qWarning() << "no matching function variant found for removeAttributeNS";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomElement
    // Function: attributeNodeNS
    // Source: 
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomElement_Wrapper::attributeNodeNS
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

   && RJSHelper::is_QString(handler, a2
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: nsURI (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        
  // convert js parameter to cpp: localName (QString)
  
QString a2_cpp;

      a2_cpp = RJSHelper::js2cpp_QString(handler, a2);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                QDomAttr res = 
                    
                w->attributeNodeNS(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomAttr

            return RJSHelper::cpp2js_QDomAttr(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for attributeNodeNS";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomElement
    // Function: setAttributeNodeNS
    // Source: 
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomElement_Wrapper::setAttributeNodeNS
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomAttr(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: newAttr (QDomAttr)
  
QDomAttr a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomAttr(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                QDomAttr res = 
                    
                w->setAttributeNodeNS(
                  a1_cpp
    
                );
              
            // return type: QDomAttr

            return RJSHelper::cpp2js_QDomAttr(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for setAttributeNodeNS";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomElement
    // Function: elementsByTagNameNS
    // Source: 
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomElement_Wrapper::elementsByTagNameNS
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

   && RJSHelper::is_QString(handler, a2
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: nsURI (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        
  // convert js parameter to cpp: localName (QString)
  
QString a2_cpp;

      a2_cpp = RJSHelper::js2cpp_QString(handler, a2);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                QDomNodeList res = 
                    
                w->elementsByTagNameNS(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomNodeList

            return RJSHelper::cpp2js_QDomNodeList(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for elementsByTagNameNS";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomElement
    // Function: hasAttributeNS
    // Source: 
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomElement_Wrapper::hasAttributeNS
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

   && RJSHelper::is_QString(handler, a2
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: nsURI (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        
  // convert js parameter to cpp: localName (QString)
  
QString a2_cpp;

      a2_cpp = RJSHelper::js2cpp_QString(handler, a2);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                bool res = 
                    
                w->hasAttributeNS(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for hasAttributeNS";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomElement
    // Function: tagName
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomElement_Wrapper::tagName
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                QString res = 
                    
                w->tagName(
                  
                );
              
            // return type: QString

            return RJSHelper::cpp2js_QString(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for tagName";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomElement
    // Function: setTagName
    // Source: 
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomElement_Wrapper::setTagName
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: name (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                
                w->setTagName(
                  a1_cpp
    
                );
              
            return QJSValue();
          
  }

                  qWarning() << "no matching function variant found for setTagName";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomElement
    // Function: attributes
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomElement_Wrapper::attributes
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                QDomNamedNodeMap res = 
                    
                w->attributes(
                  
                );
              
            // return type: QDomNamedNodeMap

            return RJSHelper::cpp2js_QDomNamedNodeMap(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for attributes";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomElement
    // Function: nodeType
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomElement_Wrapper::nodeType
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                QDomNode::NodeType res = 
                    
                w->nodeType(
                  
                );
              
            // return type: QDomNode::NodeType

            return RJSHelper::cpp2js_QDomNode_NodeType(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for nodeType";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomElement
    // Function: text
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomElement_Wrapper::text
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomElement* w = getWrapped();
                QString res = 
                    
                w->text(
                  
                );
              
            // return type: QString

            return RJSHelper::cpp2js_QString(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for text";
                  handler.trace();
                  return QJSValue();
                
              }
            

  // member functions for static properties, forward to static function
  


  // protected overwritten functions / events and their public invokable counterparts:
  
    #include "qdom_wrapper.h"

  
      // list of registered base casters for this wrapper class:
      QList<RJSBasecaster_QDomText*> QDomText_Wrapper::basecasters_QDomText;
    
    // static functions implementation in singleton wrapper:
    
    void QDomText_Wrapper::init(RJSApi& handler) {
      
        //qmlRegisterType<QDomText_Wrapper>("org.qcad", 1, 0, "QDomText_Wrapper");
        qmlRegisterInterface<QDomText_Wrapper>("QDomText_Wrapper", 1);
      

      QJSEngine* engine = handler.getEngine();

      
          // make type scriptable for JS files:
          QJSValue global = engine->globalObject();
          RJSType_QDomText* t = new RJSType_QDomText();
          global.setProperty("RJSType_QDomText", engine->newQObject(t));

          // initialize ID for this type:
          RJSType_QDomText::getIdStatic();

          

      // wrapper:
      QJSValue mo = engine->newQMetaObject(&QDomText_Wrapper::staticMetaObject);
      engine->globalObject().setProperty("QDomText_Wrapper", mo);


      
        // JS base class:
        //QJSValue mob = engine->newQMetaObject(&QDomText_BaseJs::staticMetaObject);
        //engine->globalObject().setProperty("QDomText_BaseJs", mob);
      
      QString fileName = ":generator/js/QDomText.js";
      QFile scriptFile(fileName);
      if (!scriptFile.open(QIODevice::ReadOnly)) {
        qWarning() << "JS script wrapper file not found:" << fileName;
        return;
      }
      QTextStream stream(&scriptFile);
      QString contents = stream.readAll();
      scriptFile.close();

      qDebug() << "Evaluating file: " << fileName;
      QJSValue result = engine->evaluate(contents, fileName);
      if (result.isError()) {
          qWarning()
              << "Uncaught exception at line"
              << result.property("lineNumber").toInt()
              << ":" << result.toString();
      }
    }
  
    /*
    // special constructor used as prototype:
    QDomText_Wrapper::QDomText_Wrapper(QJSEngine* e) : wrapped(nullptr), wrappedCreated(false) {
            //setObjectName("QDomText_Wrapper");
            setEngine(e);

            // signal forwarding:
            //initConnections();
          }
        
    */

    
      // special constructor to wrap existing object:
      QDomText_Wrapper::QDomText_Wrapper(RJSApi& h, QDomText* o, bool wrappedCreated) : RJSWrapperObj(h), wrapped(o), wrappedCreated(wrappedCreated) {
              //RDebug::incCounter(QString("QDomText_Wrapper_") + handler.getEngine()->objectName());
              //RDebug::incCounter(QString("QDomText_Wrapper"));
              //setObjectName("QDomText_Wrapper");
              //setHandler(h);

              // signal forwarding:
              initConnections();
            }
          

      // destructor:
      QDomText_Wrapper::~QDomText_Wrapper() {
            //RDebug::decCounter(QString("QDomText_Wrapper_") + handler.getEngine()->objectName());
            //RDebug::decCounter(QString("QDomText_Wrapper"));

            //qDebug() << "QDomText_Wrapper::~QDomText_Wrapper";

            // tell script handler that this wrapper no longer exists:
            handler.unregisterWrapper(*this);

            
            if (wrappedCreated) {
              
                  // delete wrapped object (copyable, JS ownership)
                  //qDebug() << "deleting instance of QDomText";
                  delete wrapped;
                
            }
            
          }
        
    // initialization of signal forwarding
    
        void QDomText_Wrapper::initConnections() {

          //setObjectName("QDomText_Wrapper");

          // tell script handler that this wrapper needs to be deleted if the engine is deleted:
          handler.registerWrapper(*this);

          
              // wrapped object is not a QObject:
              // wrapper is managed by script engine:
              //QJSEngine::setObjectOwnership(this, QJSEngine::CppOwnership);
            

          if (hasWrapped()) {
            
            // set up signal forwarding:
            
          }
        }
      

  // constructors:
  
    // Class: QDomText
    // Function: 
    // Source: 
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1
QDomText_Wrapper::QDomText_Wrapper
                
              (
                
                  // RJSApi:
                  QObject* h
                  ,
  const QJSValue& 
  a1
              ) 
              
                : RJSWrapperObj(*(RJSApi*)h)
              
              {
                
                  //RDebug::incCounter(QString("QDomText_Wrapper_") + handler.getEngine()->objectName());
                  //RDebug::incCounter(QString("QDomText_Wrapper"));
                
      // check parameter types:
      if (
        RJSHelper::is_QDomText(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: x (QDomText)
  
QDomText a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomText(handler, a1);
        

    // call function:
    
        // construct wrapper:

        
            wrapped = new QDomText(
                a1_cpp
    
            );
            wrappedCreated = true;
          

        // signal forwarding:
        // TODO
        //connect(wrapped, SIGNAL(triggered(bool)), this, SLOT(triggeredEmitter(bool)));
        initConnections();
        return;

      
  }

      {
    

    // call function:
    
        // construct wrapper:

        
            wrapped = new QDomText(
                
            );
            wrappedCreated = true;
          

        // signal forwarding:
        // TODO
        //connect(wrapped, SIGNAL(triggered(bool)), this, SLOT(triggeredEmitter(bool)));
        initConnections();
        return;

      
  }

                    // no constructor without arguments defined
                    // allow constructor for prototype objects without args:
                    if (
                      a1.isUndefined()
  
                      ) {
                      wrapped = nullptr;
                      wrappedCreated = false;
                      return;
                    }
                  

                  qWarning() << "no matching constructor variant found for QDomText";
                  wrapped = nullptr;
                  wrappedCreated = false;
                  handler.trace();
                
              }
            

    // non-static functions:
    
    // Class: QDomText
    // Function: operator_equal
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomText_Wrapper::operator_equal
              (
                
  const QJSValue& 
  a1
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp:  (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomText* w = getWrapped();
                bool res = 
                    
                w->operator==(
                  a1_cpp
    
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for operator_equal";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomText
    // Function: operator_unequal
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomText_Wrapper::operator_unequal
              (
                
  const QJSValue& 
  a1
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp:  (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomText* w = getWrapped();
                bool res = 
                    
                w->operator!=(
                  a1_cpp
    
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for operator_unequal";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomText
    // Function: insertBefore
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomText_Wrapper::insertBefore
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

   && RJSHelper::is_QDomNode(handler, a2
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: newChild (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        
  // convert js parameter to cpp: refChild (QDomNode)
  
QDomNode a2_cpp;

      a2_cpp = RJSHelper::js2cpp_QDomNode(handler, a2);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomText* w = getWrapped();
                QDomNode res = 
                    
                w->insertBefore(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for insertBefore";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomText
    // Function: insertAfter
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomText_Wrapper::insertAfter
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

   && RJSHelper::is_QDomNode(handler, a2
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: newChild (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        
  // convert js parameter to cpp: refChild (QDomNode)
  
QDomNode a2_cpp;

      a2_cpp = RJSHelper::js2cpp_QDomNode(handler, a2);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomText* w = getWrapped();
                QDomNode res = 
                    
                w->insertAfter(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for insertAfter";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomText
    // Function: replaceChild
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomText_Wrapper::replaceChild
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

   && RJSHelper::is_QDomNode(handler, a2
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: newChild (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        
  // convert js parameter to cpp: oldChild (QDomNode)
  
QDomNode a2_cpp;

      a2_cpp = RJSHelper::js2cpp_QDomNode(handler, a2);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomText* w = getWrapped();
                QDomNode res = 
                    
                w->replaceChild(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for replaceChild";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomText
    // Function: removeChild
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomText_Wrapper::removeChild
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: oldChild (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomText* w = getWrapped();
                QDomNode res = 
                    
                w->removeChild(
                  a1_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for removeChild";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomText
    // Function: appendChild
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomText_Wrapper::appendChild
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: newChild (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomText* w = getWrapped();
                QDomNode res = 
                    
                w->appendChild(
                  a1_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for appendChild";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomText
    // Function: hasChildNodes
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomText_Wrapper::hasChildNodes
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomText* w = getWrapped();
                bool res = 
                    
                w->hasChildNodes(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for hasChildNodes";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomText
    // Function: cloneNode
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomText_Wrapper::cloneNode
              (
                
  const QJSValue& 
  a1
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_bool(handler, a1
    , true
  
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: deep (bool)
  
bool a1_cpp;

      
          if (a1.isUndefined()) {
            a1_cpp = true;
          }
          else {
            a1_cpp = RJSHelper::js2cpp_bool(handler, a1);
          }
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomText* w = getWrapped();
                QDomNode res = 
                    
                w->cloneNode(
                  a1_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for cloneNode";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomText
    // Function: normalize
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomText_Wrapper::normalize
              (
                
              ) 
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomText* w = getWrapped();
                
                w->normalize(
                  
                );
              
            return QJSValue();
          
  }

                  qWarning() << "no matching function variant found for normalize";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomText
    // Function: isSupported
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomText_Wrapper::isSupported
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

   && RJSHelper::is_QString(handler, a2
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: feature (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        
  // convert js parameter to cpp: version (QString)
  
QString a2_cpp;

      a2_cpp = RJSHelper::js2cpp_QString(handler, a2);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomText* w = getWrapped();
                bool res = 
                    
                w->isSupported(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isSupported";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomText
    // Function: nodeName
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomText_Wrapper::nodeName
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomText* w = getWrapped();
                QString res = 
                    
                w->nodeName(
                  
                );
              
            // return type: QString

            return RJSHelper::cpp2js_QString(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for nodeName";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomText
    // Function: parentNode
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomText_Wrapper::parentNode
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomText* w = getWrapped();
                QDomNode res = 
                    
                w->parentNode(
                  
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for parentNode";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomText
    // Function: childNodes
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomText_Wrapper::childNodes
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomText* w = getWrapped();
                QDomNodeList res = 
                    
                w->childNodes(
                  
                );
              
            // return type: QDomNodeList

            return RJSHelper::cpp2js_QDomNodeList(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for childNodes";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomText
    // Function: firstChild
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomText_Wrapper::firstChild
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomText* w = getWrapped();
                QDomNode res = 
                    
                w->firstChild(
                  
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for firstChild";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomText
    // Function: lastChild
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomText_Wrapper::lastChild
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomText* w = getWrapped();
                QDomNode res = 
                    
                w->lastChild(
                  
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for lastChild";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomText
    // Function: previousSibling
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomText_Wrapper::previousSibling
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomText* w = getWrapped();
                QDomNode res = 
                    
                w->previousSibling(
                  
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for previousSibling";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomText
    // Function: nextSibling
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomText_Wrapper::nextSibling
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomText* w = getWrapped();
                QDomNode res = 
                    
                w->nextSibling(
                  
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for nextSibling";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomText
    // Function: attributes
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomText_Wrapper::attributes
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomText* w = getWrapped();
                QDomNamedNodeMap res = 
                    
                w->attributes(
                  
                );
              
            // return type: QDomNamedNodeMap

            return RJSHelper::cpp2js_QDomNamedNodeMap(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for attributes";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomText
    // Function: ownerDocument
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomText_Wrapper::ownerDocument
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomText* w = getWrapped();
                QDomDocument res = 
                    
                w->ownerDocument(
                  
                );
              
            // return type: QDomDocument

            return RJSHelper::cpp2js_QDomDocument(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for ownerDocument";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomText
    // Function: namespaceURI
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomText_Wrapper::namespaceURI
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomText* w = getWrapped();
                QString res = 
                    
                w->namespaceURI(
                  
                );
              
            // return type: QString

            return RJSHelper::cpp2js_QString(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for namespaceURI";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomText
    // Function: localName
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomText_Wrapper::localName
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomText* w = getWrapped();
                QString res = 
                    
                w->localName(
                  
                );
              
            // return type: QString

            return RJSHelper::cpp2js_QString(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for localName";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomText
    // Function: hasAttributes
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomText_Wrapper::hasAttributes
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomText* w = getWrapped();
                bool res = 
                    
                w->hasAttributes(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for hasAttributes";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomText
    // Function: nodeValue
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomText_Wrapper::nodeValue
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomText* w = getWrapped();
                QString res = 
                    
                w->nodeValue(
                  
                );
              
            // return type: QString

            return RJSHelper::cpp2js_QString(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for nodeValue";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomText
    // Function: setNodeValue
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomText_Wrapper::setNodeValue
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp:  (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomText* w = getWrapped();
                
                w->setNodeValue(
                  a1_cpp
    
                );
              
            return QJSValue();
          
  }

                  qWarning() << "no matching function variant found for setNodeValue";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomText
    // Function: prefix
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomText_Wrapper::prefix
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomText* w = getWrapped();
                QString res = 
                    
                w->prefix(
                  
                );
              
            // return type: QString

            return RJSHelper::cpp2js_QString(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for prefix";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomText
    // Function: setPrefix
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomText_Wrapper::setPrefix
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: pre (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomText* w = getWrapped();
                
                w->setPrefix(
                  a1_cpp
    
                );
              
            return QJSValue();
          
  }

                  qWarning() << "no matching function variant found for setPrefix";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomText
    // Function: isAttr
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomText_Wrapper::isAttr
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomText* w = getWrapped();
                bool res = 
                    
                w->isAttr(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isAttr";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomText
    // Function: isCDATASection
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomText_Wrapper::isCDATASection
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomText* w = getWrapped();
                bool res = 
                    
                w->isCDATASection(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isCDATASection";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomText
    // Function: isDocumentFragment
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomText_Wrapper::isDocumentFragment
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomText* w = getWrapped();
                bool res = 
                    
                w->isDocumentFragment(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isDocumentFragment";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomText
    // Function: isDocument
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomText_Wrapper::isDocument
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomText* w = getWrapped();
                bool res = 
                    
                w->isDocument(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isDocument";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomText
    // Function: isDocumentType
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomText_Wrapper::isDocumentType
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomText* w = getWrapped();
                bool res = 
                    
                w->isDocumentType(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isDocumentType";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomText
    // Function: isElement
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomText_Wrapper::isElement
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomText* w = getWrapped();
                bool res = 
                    
                w->isElement(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isElement";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomText
    // Function: isEntityReference
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomText_Wrapper::isEntityReference
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomText* w = getWrapped();
                bool res = 
                    
                w->isEntityReference(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isEntityReference";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomText
    // Function: isText
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomText_Wrapper::isText
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomText* w = getWrapped();
                bool res = 
                    
                w->isText(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isText";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomText
    // Function: isEntity
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomText_Wrapper::isEntity
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomText* w = getWrapped();
                bool res = 
                    
                w->isEntity(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isEntity";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomText
    // Function: isNotation
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomText_Wrapper::isNotation
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomText* w = getWrapped();
                bool res = 
                    
                w->isNotation(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isNotation";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomText
    // Function: isProcessingInstruction
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomText_Wrapper::isProcessingInstruction
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomText* w = getWrapped();
                bool res = 
                    
                w->isProcessingInstruction(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isProcessingInstruction";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomText
    // Function: isCharacterData
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomText_Wrapper::isCharacterData
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomText* w = getWrapped();
                bool res = 
                    
                w->isCharacterData(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isCharacterData";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomText
    // Function: isComment
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomText_Wrapper::isComment
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomText* w = getWrapped();
                bool res = 
                    
                w->isComment(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isComment";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomText
    // Function: namedItem
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomText_Wrapper::namedItem
              (
                
  const QJSValue& 
  a1
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: name (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomText* w = getWrapped();
                QDomNode res = 
                    
                w->namedItem(
                  a1_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for namedItem";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomText
    // Function: isNull
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomText_Wrapper::isNull
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomText* w = getWrapped();
                bool res = 
                    
                w->isNull(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isNull";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomText
    // Function: clear
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomText_Wrapper::clear
              (
                
              ) 
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomText* w = getWrapped();
                
                w->clear(
                  
                );
              
            return QJSValue();
          
  }

                  qWarning() << "no matching function variant found for clear";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomText
    // Function: toAttr
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomText_Wrapper::toAttr
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomText* w = getWrapped();
                QDomAttr res = 
                    
                w->toAttr(
                  
                );
              
            // return type: QDomAttr

            return RJSHelper::cpp2js_QDomAttr(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toAttr";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomText
    // Function: toCDATASection
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomText_Wrapper::toCDATASection
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomText* w = getWrapped();
                QDomCDATASection res = 
                    
                w->toCDATASection(
                  
                );
              
            // return type: QDomCDATASection

            return RJSHelper::cpp2js_QDomCDATASection(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toCDATASection";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomText
    // Function: toDocumentFragment
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomText_Wrapper::toDocumentFragment
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomText* w = getWrapped();
                QDomDocumentFragment res = 
                    
                w->toDocumentFragment(
                  
                );
              
            // return type: QDomDocumentFragment

            return RJSHelper::cpp2js_QDomDocumentFragment(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toDocumentFragment";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomText
    // Function: toDocument
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomText_Wrapper::toDocument
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomText* w = getWrapped();
                QDomDocument res = 
                    
                w->toDocument(
                  
                );
              
            // return type: QDomDocument

            return RJSHelper::cpp2js_QDomDocument(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toDocument";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomText
    // Function: toDocumentType
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomText_Wrapper::toDocumentType
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomText* w = getWrapped();
                QDomDocumentType res = 
                    
                w->toDocumentType(
                  
                );
              
            // return type: QDomDocumentType

            return RJSHelper::cpp2js_QDomDocumentType(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toDocumentType";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomText
    // Function: toElement
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomText_Wrapper::toElement
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomText* w = getWrapped();
                QDomElement res = 
                    
                w->toElement(
                  
                );
              
            // return type: QDomElement

            return RJSHelper::cpp2js_QDomElement(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toElement";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomText
    // Function: toEntityReference
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomText_Wrapper::toEntityReference
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomText* w = getWrapped();
                QDomEntityReference res = 
                    
                w->toEntityReference(
                  
                );
              
            // return type: QDomEntityReference

            return RJSHelper::cpp2js_QDomEntityReference(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toEntityReference";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomText
    // Function: toText
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomText_Wrapper::toText
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomText* w = getWrapped();
                QDomText res = 
                    
                w->toText(
                  
                );
              
            // return type: QDomText

            return RJSHelper::cpp2js_QDomText(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toText";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomText
    // Function: toEntity
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomText_Wrapper::toEntity
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomText* w = getWrapped();
                QDomEntity res = 
                    
                w->toEntity(
                  
                );
              
            // return type: QDomEntity

            return RJSHelper::cpp2js_QDomEntity(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toEntity";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomText
    // Function: toNotation
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomText_Wrapper::toNotation
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomText* w = getWrapped();
                QDomNotation res = 
                    
                w->toNotation(
                  
                );
              
            // return type: QDomNotation

            return RJSHelper::cpp2js_QDomNotation(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toNotation";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomText
    // Function: toProcessingInstruction
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomText_Wrapper::toProcessingInstruction
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomText* w = getWrapped();
                QDomProcessingInstruction res = 
                    
                w->toProcessingInstruction(
                  
                );
              
            // return type: QDomProcessingInstruction

            return RJSHelper::cpp2js_QDomProcessingInstruction(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toProcessingInstruction";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomText
    // Function: toCharacterData
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomText_Wrapper::toCharacterData
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomText* w = getWrapped();
                QDomCharacterData res = 
                    
                w->toCharacterData(
                  
                );
              
            // return type: QDomCharacterData

            return RJSHelper::cpp2js_QDomCharacterData(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toCharacterData";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomText
    // Function: toComment
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomText_Wrapper::toComment
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomText* w = getWrapped();
                QDomComment res = 
                    
                w->toComment(
                  
                );
              
            // return type: QDomComment

            return RJSHelper::cpp2js_QDomComment(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toComment";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomText
    // Function: firstChildElement
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomText_Wrapper::firstChildElement
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
    , true
  
  )

   && RJSHelper::is_QString(handler, a2
    , true
  
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: tagName (QString)
  
QString a1_cpp;

      
          if (a1.isUndefined()) {
            a1_cpp = QString();
          }
          else {
            a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
          }
        
  // convert js parameter to cpp: namespaceURI (QString)
  
QString a2_cpp;

      
          if (a2.isUndefined()) {
            a2_cpp = QString();
          }
          else {
            a2_cpp = RJSHelper::js2cpp_QString(handler, a2);
          }
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomText* w = getWrapped();
                QDomElement res = 
                    
                w->firstChildElement(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomElement

            return RJSHelper::cpp2js_QDomElement(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for firstChildElement";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomText
    // Function: lastChildElement
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomText_Wrapper::lastChildElement
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
    , true
  
  )

   && RJSHelper::is_QString(handler, a2
    , true
  
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: tagName (QString)
  
QString a1_cpp;

      
          if (a1.isUndefined()) {
            a1_cpp = QString();
          }
          else {
            a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
          }
        
  // convert js parameter to cpp: namespaceURI (QString)
  
QString a2_cpp;

      
          if (a2.isUndefined()) {
            a2_cpp = QString();
          }
          else {
            a2_cpp = RJSHelper::js2cpp_QString(handler, a2);
          }
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomText* w = getWrapped();
                QDomElement res = 
                    
                w->lastChildElement(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomElement

            return RJSHelper::cpp2js_QDomElement(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for lastChildElement";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomText
    // Function: previousSiblingElement
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomText_Wrapper::previousSiblingElement
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
    , true
  
  )

   && RJSHelper::is_QString(handler, a2
    , true
  
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: tagName (QString)
  
QString a1_cpp;

      
          if (a1.isUndefined()) {
            a1_cpp = QString();
          }
          else {
            a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
          }
        
  // convert js parameter to cpp: namespaceURI (QString)
  
QString a2_cpp;

      
          if (a2.isUndefined()) {
            a2_cpp = QString();
          }
          else {
            a2_cpp = RJSHelper::js2cpp_QString(handler, a2);
          }
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomText* w = getWrapped();
                QDomElement res = 
                    
                w->previousSiblingElement(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomElement

            return RJSHelper::cpp2js_QDomElement(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for previousSiblingElement";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomText
    // Function: nextSiblingElement
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomText_Wrapper::nextSiblingElement
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
    , true
  
  )

   && RJSHelper::is_QString(handler, a2
    , true
  
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: taName (QString)
  
QString a1_cpp;

      
          if (a1.isUndefined()) {
            a1_cpp = QString();
          }
          else {
            a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
          }
        
  // convert js parameter to cpp: namespaceURI (QString)
  
QString a2_cpp;

      
          if (a2.isUndefined()) {
            a2_cpp = QString();
          }
          else {
            a2_cpp = RJSHelper::js2cpp_QString(handler, a2);
          }
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomText* w = getWrapped();
                QDomElement res = 
                    
                w->nextSiblingElement(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomElement

            return RJSHelper::cpp2js_QDomElement(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for nextSiblingElement";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomText
    // Function: lineNumber
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomText_Wrapper::lineNumber
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomText* w = getWrapped();
                int res = 
                    
                w->lineNumber(
                  
                );
              
            // return type: int

            return RJSHelper::cpp2js_int(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for lineNumber";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomText
    // Function: columnNumber
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomText_Wrapper::columnNumber
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomText* w = getWrapped();
                int res = 
                    
                w->columnNumber(
                  
                );
              
            // return type: int

            return RJSHelper::cpp2js_int(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for columnNumber";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomText
    // Function: substringData
    // Source: QDomCharacterData
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomText_Wrapper::substringData
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_unsignedlong(handler, a1
  )

   && RJSHelper::is_unsignedlong(handler, a2
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: offset (unsigned long)
  
unsigned long a1_cpp;

      a1_cpp = RJSHelper::js2cpp_unsignedlong(handler, a1);
        
  // convert js parameter to cpp: count (unsigned long)
  
unsigned long a2_cpp;

      a2_cpp = RJSHelper::js2cpp_unsignedlong(handler, a2);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomText* w = getWrapped();
                QString res = 
                    
                w->substringData(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QString

            return RJSHelper::cpp2js_QString(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for substringData";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomText
    // Function: appendData
    // Source: QDomCharacterData
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomText_Wrapper::appendData
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: arg (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomText* w = getWrapped();
                
                w->appendData(
                  a1_cpp
    
                );
              
            return QJSValue();
          
  }

                  qWarning() << "no matching function variant found for appendData";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomText
    // Function: insertData
    // Source: QDomCharacterData
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomText_Wrapper::insertData
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_unsignedlong(handler, a1
  )

   && RJSHelper::is_QString(handler, a2
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: offset (unsigned long)
  
unsigned long a1_cpp;

      a1_cpp = RJSHelper::js2cpp_unsignedlong(handler, a1);
        
  // convert js parameter to cpp: arg (QString)
  
QString a2_cpp;

      a2_cpp = RJSHelper::js2cpp_QString(handler, a2);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomText* w = getWrapped();
                
                w->insertData(
                  a1_cpp
    , a2_cpp
    
                );
              
            return QJSValue();
          
  }

                  qWarning() << "no matching function variant found for insertData";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomText
    // Function: deleteData
    // Source: QDomCharacterData
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomText_Wrapper::deleteData
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_unsignedlong(handler, a1
  )

   && RJSHelper::is_unsignedlong(handler, a2
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: offset (unsigned long)
  
unsigned long a1_cpp;

      a1_cpp = RJSHelper::js2cpp_unsignedlong(handler, a1);
        
  // convert js parameter to cpp: count (unsigned long)
  
unsigned long a2_cpp;

      a2_cpp = RJSHelper::js2cpp_unsignedlong(handler, a2);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomText* w = getWrapped();
                
                w->deleteData(
                  a1_cpp
    , a2_cpp
    
                );
              
            return QJSValue();
          
  }

                  qWarning() << "no matching function variant found for deleteData";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomText
    // Function: replaceData
    // Source: QDomCharacterData
    // Static: false
    // Parameters: 3
    // preceding Parameters: -1

                QJSValue 
              QDomText_Wrapper::replaceData
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2, 
  const QJSValue& 
  a3
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_unsignedlong(handler, a1
  )

   && RJSHelper::is_unsignedlong(handler, a2
  )

   && RJSHelper::is_QString(handler, a3
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: offset (unsigned long)
  
unsigned long a1_cpp;

      a1_cpp = RJSHelper::js2cpp_unsignedlong(handler, a1);
        
  // convert js parameter to cpp: count (unsigned long)
  
unsigned long a2_cpp;

      a2_cpp = RJSHelper::js2cpp_unsignedlong(handler, a2);
        
  // convert js parameter to cpp: arg (QString)
  
QString a3_cpp;

      a3_cpp = RJSHelper::js2cpp_QString(handler, a3);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomText* w = getWrapped();
                
                w->replaceData(
                  a1_cpp
    , a2_cpp
    , a3_cpp
    
                );
              
            return QJSValue();
          
  }

                  qWarning() << "no matching function variant found for replaceData";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomText
    // Function: length
    // Source: QDomCharacterData
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomText_Wrapper::length
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomText* w = getWrapped();
                int res = 
                    
                w->length(
                  
                );
              
            // return type: int

            return RJSHelper::cpp2js_int(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for length";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomText
    // Function: data
    // Source: QDomCharacterData
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomText_Wrapper::data
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomText* w = getWrapped();
                QString res = 
                    
                w->data(
                  
                );
              
            // return type: QString

            return RJSHelper::cpp2js_QString(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for data";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomText
    // Function: setData
    // Source: QDomCharacterData
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomText_Wrapper::setData
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp:  (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomText* w = getWrapped();
                
                w->setData(
                  a1_cpp
    
                );
              
            return QJSValue();
          
  }

                  qWarning() << "no matching function variant found for setData";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomText
    // Function: operator_assign
    // Source: 
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomText_Wrapper::operator_assign
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomText(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp:  (QDomText)
  
QDomText a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomText(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomText* w = getWrapped();
                
                      // return type is reference:
                      // use pointer instead 3:
                      QDomText* res =
                    &
                w->operator=(
                  a1_cpp
    
                );
              
            // return type: QDomText&

            return RJSHelper::cpp2js_QDomText(
              handler, 
              // non-copyable: false
                  // return type is reference, type is copyable:
                  // convert pointer back to reference:
                  *res
                
              );
            
  }

                  qWarning() << "no matching function variant found for operator_assign";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomText
    // Function: splitText
    // Source: 
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomText_Wrapper::splitText
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_int(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: offset (int)
  
int a1_cpp;

      a1_cpp = RJSHelper::js2cpp_int(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomText* w = getWrapped();
                QDomText res = 
                    
                w->splitText(
                  a1_cpp
    
                );
              
            // return type: QDomText

            return RJSHelper::cpp2js_QDomText(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for splitText";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomText
    // Function: nodeType
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomText_Wrapper::nodeType
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomText* w = getWrapped();
                QDomNode::NodeType res = 
                    
                w->nodeType(
                  
                );
              
            // return type: QDomNode::NodeType

            return RJSHelper::cpp2js_QDomNode_NodeType(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for nodeType";
                  handler.trace();
                  return QJSValue();
                
              }
            

  // member functions for static properties, forward to static function
  


  // protected overwritten functions / events and their public invokable counterparts:
  
    #include "qdom_wrapper.h"

  
      // list of registered base casters for this wrapper class:
      QList<RJSBasecaster_QDomComment*> QDomComment_Wrapper::basecasters_QDomComment;
    
    // static functions implementation in singleton wrapper:
    
    void QDomComment_Wrapper::init(RJSApi& handler) {
      
        //qmlRegisterType<QDomComment_Wrapper>("org.qcad", 1, 0, "QDomComment_Wrapper");
        qmlRegisterInterface<QDomComment_Wrapper>("QDomComment_Wrapper", 1);
      

      QJSEngine* engine = handler.getEngine();

      
          // make type scriptable for JS files:
          QJSValue global = engine->globalObject();
          RJSType_QDomComment* t = new RJSType_QDomComment();
          global.setProperty("RJSType_QDomComment", engine->newQObject(t));

          // initialize ID for this type:
          RJSType_QDomComment::getIdStatic();

          

      // wrapper:
      QJSValue mo = engine->newQMetaObject(&QDomComment_Wrapper::staticMetaObject);
      engine->globalObject().setProperty("QDomComment_Wrapper", mo);


      
        // JS base class:
        //QJSValue mob = engine->newQMetaObject(&QDomComment_BaseJs::staticMetaObject);
        //engine->globalObject().setProperty("QDomComment_BaseJs", mob);
      
      QString fileName = ":generator/js/QDomComment.js";
      QFile scriptFile(fileName);
      if (!scriptFile.open(QIODevice::ReadOnly)) {
        qWarning() << "JS script wrapper file not found:" << fileName;
        return;
      }
      QTextStream stream(&scriptFile);
      QString contents = stream.readAll();
      scriptFile.close();

      qDebug() << "Evaluating file: " << fileName;
      QJSValue result = engine->evaluate(contents, fileName);
      if (result.isError()) {
          qWarning()
              << "Uncaught exception at line"
              << result.property("lineNumber").toInt()
              << ":" << result.toString();
      }
    }
  
    /*
    // special constructor used as prototype:
    QDomComment_Wrapper::QDomComment_Wrapper(QJSEngine* e) : wrapped(nullptr), wrappedCreated(false) {
            //setObjectName("QDomComment_Wrapper");
            setEngine(e);

            // signal forwarding:
            //initConnections();
          }
        
    */

    
      // special constructor to wrap existing object:
      QDomComment_Wrapper::QDomComment_Wrapper(RJSApi& h, QDomComment* o, bool wrappedCreated) : RJSWrapperObj(h), wrapped(o), wrappedCreated(wrappedCreated) {
              //RDebug::incCounter(QString("QDomComment_Wrapper_") + handler.getEngine()->objectName());
              //RDebug::incCounter(QString("QDomComment_Wrapper"));
              //setObjectName("QDomComment_Wrapper");
              //setHandler(h);

              // signal forwarding:
              initConnections();
            }
          

      // destructor:
      QDomComment_Wrapper::~QDomComment_Wrapper() {
            //RDebug::decCounter(QString("QDomComment_Wrapper_") + handler.getEngine()->objectName());
            //RDebug::decCounter(QString("QDomComment_Wrapper"));

            //qDebug() << "QDomComment_Wrapper::~QDomComment_Wrapper";

            // tell script handler that this wrapper no longer exists:
            handler.unregisterWrapper(*this);

            
            if (wrappedCreated) {
              
                  // delete wrapped object (copyable, JS ownership)
                  //qDebug() << "deleting instance of QDomComment";
                  delete wrapped;
                
            }
            
          }
        
    // initialization of signal forwarding
    
        void QDomComment_Wrapper::initConnections() {

          //setObjectName("QDomComment_Wrapper");

          // tell script handler that this wrapper needs to be deleted if the engine is deleted:
          handler.registerWrapper(*this);

          
              // wrapped object is not a QObject:
              // wrapper is managed by script engine:
              //QJSEngine::setObjectOwnership(this, QJSEngine::CppOwnership);
            

          if (hasWrapped()) {
            
            // set up signal forwarding:
            
          }
        }
      

  // constructors:
  
    // Class: QDomComment
    // Function: 
    // Source: 
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1
QDomComment_Wrapper::QDomComment_Wrapper
                
              (
                
                  // RJSApi:
                  QObject* h
                  ,
  const QJSValue& 
  a1
              ) 
              
                : RJSWrapperObj(*(RJSApi*)h)
              
              {
                
                  //RDebug::incCounter(QString("QDomComment_Wrapper_") + handler.getEngine()->objectName());
                  //RDebug::incCounter(QString("QDomComment_Wrapper"));
                
      // check parameter types:
      if (
        RJSHelper::is_QDomComment(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: x (QDomComment)
  
QDomComment a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomComment(handler, a1);
        

    // call function:
    
        // construct wrapper:

        
            wrapped = new QDomComment(
                a1_cpp
    
            );
            wrappedCreated = true;
          

        // signal forwarding:
        // TODO
        //connect(wrapped, SIGNAL(triggered(bool)), this, SLOT(triggeredEmitter(bool)));
        initConnections();
        return;

      
  }

      {
    

    // call function:
    
        // construct wrapper:

        
            wrapped = new QDomComment(
                
            );
            wrappedCreated = true;
          

        // signal forwarding:
        // TODO
        //connect(wrapped, SIGNAL(triggered(bool)), this, SLOT(triggeredEmitter(bool)));
        initConnections();
        return;

      
  }

                    // no constructor without arguments defined
                    // allow constructor for prototype objects without args:
                    if (
                      a1.isUndefined()
  
                      ) {
                      wrapped = nullptr;
                      wrappedCreated = false;
                      return;
                    }
                  

                  qWarning() << "no matching constructor variant found for QDomComment";
                  wrapped = nullptr;
                  wrappedCreated = false;
                  handler.trace();
                
              }
            

    // non-static functions:
    
    // Class: QDomComment
    // Function: substringData
    // Source: QDomCharacterData
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomComment_Wrapper::substringData
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_unsignedlong(handler, a1
  )

   && RJSHelper::is_unsignedlong(handler, a2
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: offset (unsigned long)
  
unsigned long a1_cpp;

      a1_cpp = RJSHelper::js2cpp_unsignedlong(handler, a1);
        
  // convert js parameter to cpp: count (unsigned long)
  
unsigned long a2_cpp;

      a2_cpp = RJSHelper::js2cpp_unsignedlong(handler, a2);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomComment* w = getWrapped();
                QString res = 
                    
                w->substringData(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QString

            return RJSHelper::cpp2js_QString(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for substringData";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomComment
    // Function: appendData
    // Source: QDomCharacterData
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomComment_Wrapper::appendData
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: arg (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomComment* w = getWrapped();
                
                w->appendData(
                  a1_cpp
    
                );
              
            return QJSValue();
          
  }

                  qWarning() << "no matching function variant found for appendData";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomComment
    // Function: insertData
    // Source: QDomCharacterData
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomComment_Wrapper::insertData
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_unsignedlong(handler, a1
  )

   && RJSHelper::is_QString(handler, a2
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: offset (unsigned long)
  
unsigned long a1_cpp;

      a1_cpp = RJSHelper::js2cpp_unsignedlong(handler, a1);
        
  // convert js parameter to cpp: arg (QString)
  
QString a2_cpp;

      a2_cpp = RJSHelper::js2cpp_QString(handler, a2);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomComment* w = getWrapped();
                
                w->insertData(
                  a1_cpp
    , a2_cpp
    
                );
              
            return QJSValue();
          
  }

                  qWarning() << "no matching function variant found for insertData";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomComment
    // Function: deleteData
    // Source: QDomCharacterData
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomComment_Wrapper::deleteData
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_unsignedlong(handler, a1
  )

   && RJSHelper::is_unsignedlong(handler, a2
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: offset (unsigned long)
  
unsigned long a1_cpp;

      a1_cpp = RJSHelper::js2cpp_unsignedlong(handler, a1);
        
  // convert js parameter to cpp: count (unsigned long)
  
unsigned long a2_cpp;

      a2_cpp = RJSHelper::js2cpp_unsignedlong(handler, a2);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomComment* w = getWrapped();
                
                w->deleteData(
                  a1_cpp
    , a2_cpp
    
                );
              
            return QJSValue();
          
  }

                  qWarning() << "no matching function variant found for deleteData";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomComment
    // Function: replaceData
    // Source: QDomCharacterData
    // Static: false
    // Parameters: 3
    // preceding Parameters: -1

                QJSValue 
              QDomComment_Wrapper::replaceData
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2, 
  const QJSValue& 
  a3
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_unsignedlong(handler, a1
  )

   && RJSHelper::is_unsignedlong(handler, a2
  )

   && RJSHelper::is_QString(handler, a3
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: offset (unsigned long)
  
unsigned long a1_cpp;

      a1_cpp = RJSHelper::js2cpp_unsignedlong(handler, a1);
        
  // convert js parameter to cpp: count (unsigned long)
  
unsigned long a2_cpp;

      a2_cpp = RJSHelper::js2cpp_unsignedlong(handler, a2);
        
  // convert js parameter to cpp: arg (QString)
  
QString a3_cpp;

      a3_cpp = RJSHelper::js2cpp_QString(handler, a3);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomComment* w = getWrapped();
                
                w->replaceData(
                  a1_cpp
    , a2_cpp
    , a3_cpp
    
                );
              
            return QJSValue();
          
  }

                  qWarning() << "no matching function variant found for replaceData";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomComment
    // Function: length
    // Source: QDomCharacterData
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomComment_Wrapper::length
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomComment* w = getWrapped();
                int res = 
                    
                w->length(
                  
                );
              
            // return type: int

            return RJSHelper::cpp2js_int(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for length";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomComment
    // Function: data
    // Source: QDomCharacterData
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomComment_Wrapper::data
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomComment* w = getWrapped();
                QString res = 
                    
                w->data(
                  
                );
              
            // return type: QString

            return RJSHelper::cpp2js_QString(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for data";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomComment
    // Function: setData
    // Source: QDomCharacterData
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomComment_Wrapper::setData
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp:  (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomComment* w = getWrapped();
                
                w->setData(
                  a1_cpp
    
                );
              
            return QJSValue();
          
  }

                  qWarning() << "no matching function variant found for setData";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomComment
    // Function: operator_assign
    // Source: 
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomComment_Wrapper::operator_assign
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomComment(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp:  (QDomComment)
  
QDomComment a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomComment(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomComment* w = getWrapped();
                
                      // return type is reference:
                      // use pointer instead 3:
                      QDomComment* res =
                    &
                w->operator=(
                  a1_cpp
    
                );
              
            // return type: QDomComment&

            return RJSHelper::cpp2js_QDomComment(
              handler, 
              // non-copyable: false
                  // return type is reference, type is copyable:
                  // convert pointer back to reference:
                  *res
                
              );
            
  }

                  qWarning() << "no matching function variant found for operator_assign";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomComment
    // Function: nodeType
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomComment_Wrapper::nodeType
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomComment* w = getWrapped();
                QDomNode::NodeType res = 
                    
                w->nodeType(
                  
                );
              
            // return type: QDomNode::NodeType

            return RJSHelper::cpp2js_QDomNode_NodeType(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for nodeType";
                  handler.trace();
                  return QJSValue();
                
              }
            

  // member functions for static properties, forward to static function
  


  // protected overwritten functions / events and their public invokable counterparts:
  
    #include "qdom_wrapper.h"

  
      // list of registered base casters for this wrapper class:
      QList<RJSBasecaster_QDomCDATASection*> QDomCDATASection_Wrapper::basecasters_QDomCDATASection;
    
    // static functions implementation in singleton wrapper:
    
    void QDomCDATASection_Wrapper::init(RJSApi& handler) {
      
        //qmlRegisterType<QDomCDATASection_Wrapper>("org.qcad", 1, 0, "QDomCDATASection_Wrapper");
        qmlRegisterInterface<QDomCDATASection_Wrapper>("QDomCDATASection_Wrapper", 1);
      

      QJSEngine* engine = handler.getEngine();

      
          // make type scriptable for JS files:
          QJSValue global = engine->globalObject();
          RJSType_QDomCDATASection* t = new RJSType_QDomCDATASection();
          global.setProperty("RJSType_QDomCDATASection", engine->newQObject(t));

          // initialize ID for this type:
          RJSType_QDomCDATASection::getIdStatic();

          

      // wrapper:
      QJSValue mo = engine->newQMetaObject(&QDomCDATASection_Wrapper::staticMetaObject);
      engine->globalObject().setProperty("QDomCDATASection_Wrapper", mo);


      
        // JS base class:
        //QJSValue mob = engine->newQMetaObject(&QDomCDATASection_BaseJs::staticMetaObject);
        //engine->globalObject().setProperty("QDomCDATASection_BaseJs", mob);
      
      QString fileName = ":generator/js/QDomCDATASection.js";
      QFile scriptFile(fileName);
      if (!scriptFile.open(QIODevice::ReadOnly)) {
        qWarning() << "JS script wrapper file not found:" << fileName;
        return;
      }
      QTextStream stream(&scriptFile);
      QString contents = stream.readAll();
      scriptFile.close();

      qDebug() << "Evaluating file: " << fileName;
      QJSValue result = engine->evaluate(contents, fileName);
      if (result.isError()) {
          qWarning()
              << "Uncaught exception at line"
              << result.property("lineNumber").toInt()
              << ":" << result.toString();
      }
    }
  
    /*
    // special constructor used as prototype:
    QDomCDATASection_Wrapper::QDomCDATASection_Wrapper(QJSEngine* e) : wrapped(nullptr), wrappedCreated(false) {
            //setObjectName("QDomCDATASection_Wrapper");
            setEngine(e);

            // signal forwarding:
            //initConnections();
          }
        
    */

    
      // special constructor to wrap existing object:
      QDomCDATASection_Wrapper::QDomCDATASection_Wrapper(RJSApi& h, QDomCDATASection* o, bool wrappedCreated) : RJSWrapperObj(h), wrapped(o), wrappedCreated(wrappedCreated) {
              //RDebug::incCounter(QString("QDomCDATASection_Wrapper_") + handler.getEngine()->objectName());
              //RDebug::incCounter(QString("QDomCDATASection_Wrapper"));
              //setObjectName("QDomCDATASection_Wrapper");
              //setHandler(h);

              // signal forwarding:
              initConnections();
            }
          

      // destructor:
      QDomCDATASection_Wrapper::~QDomCDATASection_Wrapper() {
            //RDebug::decCounter(QString("QDomCDATASection_Wrapper_") + handler.getEngine()->objectName());
            //RDebug::decCounter(QString("QDomCDATASection_Wrapper"));

            //qDebug() << "QDomCDATASection_Wrapper::~QDomCDATASection_Wrapper";

            // tell script handler that this wrapper no longer exists:
            handler.unregisterWrapper(*this);

            
            if (wrappedCreated) {
              
                  // delete wrapped object (copyable, JS ownership)
                  //qDebug() << "deleting instance of QDomCDATASection";
                  delete wrapped;
                
            }
            
          }
        
    // initialization of signal forwarding
    
        void QDomCDATASection_Wrapper::initConnections() {

          //setObjectName("QDomCDATASection_Wrapper");

          // tell script handler that this wrapper needs to be deleted if the engine is deleted:
          handler.registerWrapper(*this);

          
              // wrapped object is not a QObject:
              // wrapper is managed by script engine:
              //QJSEngine::setObjectOwnership(this, QJSEngine::CppOwnership);
            

          if (hasWrapped()) {
            
            // set up signal forwarding:
            
          }
        }
      

  // constructors:
  
    // Class: QDomCDATASection
    // Function: 
    // Source: 
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1
QDomCDATASection_Wrapper::QDomCDATASection_Wrapper
                
              (
                
                  // RJSApi:
                  QObject* h
                  ,
  const QJSValue& 
  a1
              ) 
              
                : RJSWrapperObj(*(RJSApi*)h)
              
              {
                
                  //RDebug::incCounter(QString("QDomCDATASection_Wrapper_") + handler.getEngine()->objectName());
                  //RDebug::incCounter(QString("QDomCDATASection_Wrapper"));
                
      // check parameter types:
      if (
        RJSHelper::is_QDomCDATASection(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: x (QDomCDATASection)
  
QDomCDATASection a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomCDATASection(handler, a1);
        

    // call function:
    
        // construct wrapper:

        
            wrapped = new QDomCDATASection(
                a1_cpp
    
            );
            wrappedCreated = true;
          

        // signal forwarding:
        // TODO
        //connect(wrapped, SIGNAL(triggered(bool)), this, SLOT(triggeredEmitter(bool)));
        initConnections();
        return;

      
  }

      {
    

    // call function:
    
        // construct wrapper:

        
            wrapped = new QDomCDATASection(
                
            );
            wrappedCreated = true;
          

        // signal forwarding:
        // TODO
        //connect(wrapped, SIGNAL(triggered(bool)), this, SLOT(triggeredEmitter(bool)));
        initConnections();
        return;

      
  }

                    // no constructor without arguments defined
                    // allow constructor for prototype objects without args:
                    if (
                      a1.isUndefined()
  
                      ) {
                      wrapped = nullptr;
                      wrappedCreated = false;
                      return;
                    }
                  

                  qWarning() << "no matching constructor variant found for QDomCDATASection";
                  wrapped = nullptr;
                  wrappedCreated = false;
                  handler.trace();
                
              }
            

    // non-static functions:
    
    // Class: QDomCDATASection
    // Function: operator_equal
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomCDATASection_Wrapper::operator_equal
              (
                
  const QJSValue& 
  a1
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp:  (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCDATASection* w = getWrapped();
                bool res = 
                    
                w->operator==(
                  a1_cpp
    
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for operator_equal";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCDATASection
    // Function: operator_unequal
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomCDATASection_Wrapper::operator_unequal
              (
                
  const QJSValue& 
  a1
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp:  (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCDATASection* w = getWrapped();
                bool res = 
                    
                w->operator!=(
                  a1_cpp
    
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for operator_unequal";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCDATASection
    // Function: insertBefore
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomCDATASection_Wrapper::insertBefore
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

   && RJSHelper::is_QDomNode(handler, a2
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: newChild (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        
  // convert js parameter to cpp: refChild (QDomNode)
  
QDomNode a2_cpp;

      a2_cpp = RJSHelper::js2cpp_QDomNode(handler, a2);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCDATASection* w = getWrapped();
                QDomNode res = 
                    
                w->insertBefore(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for insertBefore";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCDATASection
    // Function: insertAfter
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomCDATASection_Wrapper::insertAfter
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

   && RJSHelper::is_QDomNode(handler, a2
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: newChild (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        
  // convert js parameter to cpp: refChild (QDomNode)
  
QDomNode a2_cpp;

      a2_cpp = RJSHelper::js2cpp_QDomNode(handler, a2);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCDATASection* w = getWrapped();
                QDomNode res = 
                    
                w->insertAfter(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for insertAfter";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCDATASection
    // Function: replaceChild
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomCDATASection_Wrapper::replaceChild
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

   && RJSHelper::is_QDomNode(handler, a2
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: newChild (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        
  // convert js parameter to cpp: oldChild (QDomNode)
  
QDomNode a2_cpp;

      a2_cpp = RJSHelper::js2cpp_QDomNode(handler, a2);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCDATASection* w = getWrapped();
                QDomNode res = 
                    
                w->replaceChild(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for replaceChild";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCDATASection
    // Function: removeChild
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomCDATASection_Wrapper::removeChild
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: oldChild (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCDATASection* w = getWrapped();
                QDomNode res = 
                    
                w->removeChild(
                  a1_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for removeChild";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCDATASection
    // Function: appendChild
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomCDATASection_Wrapper::appendChild
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: newChild (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCDATASection* w = getWrapped();
                QDomNode res = 
                    
                w->appendChild(
                  a1_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for appendChild";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCDATASection
    // Function: hasChildNodes
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCDATASection_Wrapper::hasChildNodes
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCDATASection* w = getWrapped();
                bool res = 
                    
                w->hasChildNodes(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for hasChildNodes";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCDATASection
    // Function: cloneNode
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomCDATASection_Wrapper::cloneNode
              (
                
  const QJSValue& 
  a1
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_bool(handler, a1
    , true
  
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: deep (bool)
  
bool a1_cpp;

      
          if (a1.isUndefined()) {
            a1_cpp = true;
          }
          else {
            a1_cpp = RJSHelper::js2cpp_bool(handler, a1);
          }
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCDATASection* w = getWrapped();
                QDomNode res = 
                    
                w->cloneNode(
                  a1_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for cloneNode";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCDATASection
    // Function: normalize
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCDATASection_Wrapper::normalize
              (
                
              ) 
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCDATASection* w = getWrapped();
                
                w->normalize(
                  
                );
              
            return QJSValue();
          
  }

                  qWarning() << "no matching function variant found for normalize";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCDATASection
    // Function: isSupported
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomCDATASection_Wrapper::isSupported
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

   && RJSHelper::is_QString(handler, a2
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: feature (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        
  // convert js parameter to cpp: version (QString)
  
QString a2_cpp;

      a2_cpp = RJSHelper::js2cpp_QString(handler, a2);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCDATASection* w = getWrapped();
                bool res = 
                    
                w->isSupported(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isSupported";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCDATASection
    // Function: nodeName
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCDATASection_Wrapper::nodeName
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCDATASection* w = getWrapped();
                QString res = 
                    
                w->nodeName(
                  
                );
              
            // return type: QString

            return RJSHelper::cpp2js_QString(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for nodeName";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCDATASection
    // Function: parentNode
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCDATASection_Wrapper::parentNode
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCDATASection* w = getWrapped();
                QDomNode res = 
                    
                w->parentNode(
                  
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for parentNode";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCDATASection
    // Function: childNodes
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCDATASection_Wrapper::childNodes
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCDATASection* w = getWrapped();
                QDomNodeList res = 
                    
                w->childNodes(
                  
                );
              
            // return type: QDomNodeList

            return RJSHelper::cpp2js_QDomNodeList(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for childNodes";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCDATASection
    // Function: firstChild
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCDATASection_Wrapper::firstChild
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCDATASection* w = getWrapped();
                QDomNode res = 
                    
                w->firstChild(
                  
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for firstChild";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCDATASection
    // Function: lastChild
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCDATASection_Wrapper::lastChild
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCDATASection* w = getWrapped();
                QDomNode res = 
                    
                w->lastChild(
                  
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for lastChild";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCDATASection
    // Function: previousSibling
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCDATASection_Wrapper::previousSibling
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCDATASection* w = getWrapped();
                QDomNode res = 
                    
                w->previousSibling(
                  
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for previousSibling";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCDATASection
    // Function: nextSibling
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCDATASection_Wrapper::nextSibling
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCDATASection* w = getWrapped();
                QDomNode res = 
                    
                w->nextSibling(
                  
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for nextSibling";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCDATASection
    // Function: attributes
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCDATASection_Wrapper::attributes
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCDATASection* w = getWrapped();
                QDomNamedNodeMap res = 
                    
                w->attributes(
                  
                );
              
            // return type: QDomNamedNodeMap

            return RJSHelper::cpp2js_QDomNamedNodeMap(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for attributes";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCDATASection
    // Function: ownerDocument
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCDATASection_Wrapper::ownerDocument
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCDATASection* w = getWrapped();
                QDomDocument res = 
                    
                w->ownerDocument(
                  
                );
              
            // return type: QDomDocument

            return RJSHelper::cpp2js_QDomDocument(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for ownerDocument";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCDATASection
    // Function: namespaceURI
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCDATASection_Wrapper::namespaceURI
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCDATASection* w = getWrapped();
                QString res = 
                    
                w->namespaceURI(
                  
                );
              
            // return type: QString

            return RJSHelper::cpp2js_QString(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for namespaceURI";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCDATASection
    // Function: localName
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCDATASection_Wrapper::localName
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCDATASection* w = getWrapped();
                QString res = 
                    
                w->localName(
                  
                );
              
            // return type: QString

            return RJSHelper::cpp2js_QString(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for localName";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCDATASection
    // Function: hasAttributes
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCDATASection_Wrapper::hasAttributes
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCDATASection* w = getWrapped();
                bool res = 
                    
                w->hasAttributes(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for hasAttributes";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCDATASection
    // Function: nodeValue
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCDATASection_Wrapper::nodeValue
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCDATASection* w = getWrapped();
                QString res = 
                    
                w->nodeValue(
                  
                );
              
            // return type: QString

            return RJSHelper::cpp2js_QString(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for nodeValue";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCDATASection
    // Function: setNodeValue
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomCDATASection_Wrapper::setNodeValue
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp:  (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCDATASection* w = getWrapped();
                
                w->setNodeValue(
                  a1_cpp
    
                );
              
            return QJSValue();
          
  }

                  qWarning() << "no matching function variant found for setNodeValue";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCDATASection
    // Function: prefix
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCDATASection_Wrapper::prefix
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCDATASection* w = getWrapped();
                QString res = 
                    
                w->prefix(
                  
                );
              
            // return type: QString

            return RJSHelper::cpp2js_QString(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for prefix";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCDATASection
    // Function: setPrefix
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomCDATASection_Wrapper::setPrefix
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: pre (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCDATASection* w = getWrapped();
                
                w->setPrefix(
                  a1_cpp
    
                );
              
            return QJSValue();
          
  }

                  qWarning() << "no matching function variant found for setPrefix";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCDATASection
    // Function: isAttr
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCDATASection_Wrapper::isAttr
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCDATASection* w = getWrapped();
                bool res = 
                    
                w->isAttr(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isAttr";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCDATASection
    // Function: isCDATASection
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCDATASection_Wrapper::isCDATASection
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCDATASection* w = getWrapped();
                bool res = 
                    
                w->isCDATASection(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isCDATASection";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCDATASection
    // Function: isDocumentFragment
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCDATASection_Wrapper::isDocumentFragment
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCDATASection* w = getWrapped();
                bool res = 
                    
                w->isDocumentFragment(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isDocumentFragment";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCDATASection
    // Function: isDocument
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCDATASection_Wrapper::isDocument
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCDATASection* w = getWrapped();
                bool res = 
                    
                w->isDocument(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isDocument";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCDATASection
    // Function: isDocumentType
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCDATASection_Wrapper::isDocumentType
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCDATASection* w = getWrapped();
                bool res = 
                    
                w->isDocumentType(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isDocumentType";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCDATASection
    // Function: isElement
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCDATASection_Wrapper::isElement
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCDATASection* w = getWrapped();
                bool res = 
                    
                w->isElement(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isElement";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCDATASection
    // Function: isEntityReference
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCDATASection_Wrapper::isEntityReference
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCDATASection* w = getWrapped();
                bool res = 
                    
                w->isEntityReference(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isEntityReference";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCDATASection
    // Function: isText
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCDATASection_Wrapper::isText
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCDATASection* w = getWrapped();
                bool res = 
                    
                w->isText(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isText";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCDATASection
    // Function: isEntity
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCDATASection_Wrapper::isEntity
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCDATASection* w = getWrapped();
                bool res = 
                    
                w->isEntity(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isEntity";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCDATASection
    // Function: isNotation
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCDATASection_Wrapper::isNotation
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCDATASection* w = getWrapped();
                bool res = 
                    
                w->isNotation(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isNotation";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCDATASection
    // Function: isProcessingInstruction
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCDATASection_Wrapper::isProcessingInstruction
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCDATASection* w = getWrapped();
                bool res = 
                    
                w->isProcessingInstruction(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isProcessingInstruction";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCDATASection
    // Function: isCharacterData
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCDATASection_Wrapper::isCharacterData
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCDATASection* w = getWrapped();
                bool res = 
                    
                w->isCharacterData(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isCharacterData";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCDATASection
    // Function: isComment
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCDATASection_Wrapper::isComment
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCDATASection* w = getWrapped();
                bool res = 
                    
                w->isComment(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isComment";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCDATASection
    // Function: namedItem
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomCDATASection_Wrapper::namedItem
              (
                
  const QJSValue& 
  a1
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: name (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCDATASection* w = getWrapped();
                QDomNode res = 
                    
                w->namedItem(
                  a1_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for namedItem";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCDATASection
    // Function: isNull
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCDATASection_Wrapper::isNull
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCDATASection* w = getWrapped();
                bool res = 
                    
                w->isNull(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isNull";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCDATASection
    // Function: clear
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCDATASection_Wrapper::clear
              (
                
              ) 
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCDATASection* w = getWrapped();
                
                w->clear(
                  
                );
              
            return QJSValue();
          
  }

                  qWarning() << "no matching function variant found for clear";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCDATASection
    // Function: toAttr
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCDATASection_Wrapper::toAttr
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCDATASection* w = getWrapped();
                QDomAttr res = 
                    
                w->toAttr(
                  
                );
              
            // return type: QDomAttr

            return RJSHelper::cpp2js_QDomAttr(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toAttr";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCDATASection
    // Function: toCDATASection
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCDATASection_Wrapper::toCDATASection
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCDATASection* w = getWrapped();
                QDomCDATASection res = 
                    
                w->toCDATASection(
                  
                );
              
            // return type: QDomCDATASection

            return RJSHelper::cpp2js_QDomCDATASection(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toCDATASection";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCDATASection
    // Function: toDocumentFragment
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCDATASection_Wrapper::toDocumentFragment
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCDATASection* w = getWrapped();
                QDomDocumentFragment res = 
                    
                w->toDocumentFragment(
                  
                );
              
            // return type: QDomDocumentFragment

            return RJSHelper::cpp2js_QDomDocumentFragment(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toDocumentFragment";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCDATASection
    // Function: toDocument
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCDATASection_Wrapper::toDocument
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCDATASection* w = getWrapped();
                QDomDocument res = 
                    
                w->toDocument(
                  
                );
              
            // return type: QDomDocument

            return RJSHelper::cpp2js_QDomDocument(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toDocument";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCDATASection
    // Function: toDocumentType
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCDATASection_Wrapper::toDocumentType
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCDATASection* w = getWrapped();
                QDomDocumentType res = 
                    
                w->toDocumentType(
                  
                );
              
            // return type: QDomDocumentType

            return RJSHelper::cpp2js_QDomDocumentType(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toDocumentType";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCDATASection
    // Function: toElement
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCDATASection_Wrapper::toElement
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCDATASection* w = getWrapped();
                QDomElement res = 
                    
                w->toElement(
                  
                );
              
            // return type: QDomElement

            return RJSHelper::cpp2js_QDomElement(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toElement";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCDATASection
    // Function: toEntityReference
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCDATASection_Wrapper::toEntityReference
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCDATASection* w = getWrapped();
                QDomEntityReference res = 
                    
                w->toEntityReference(
                  
                );
              
            // return type: QDomEntityReference

            return RJSHelper::cpp2js_QDomEntityReference(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toEntityReference";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCDATASection
    // Function: toText
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCDATASection_Wrapper::toText
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCDATASection* w = getWrapped();
                QDomText res = 
                    
                w->toText(
                  
                );
              
            // return type: QDomText

            return RJSHelper::cpp2js_QDomText(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toText";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCDATASection
    // Function: toEntity
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCDATASection_Wrapper::toEntity
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCDATASection* w = getWrapped();
                QDomEntity res = 
                    
                w->toEntity(
                  
                );
              
            // return type: QDomEntity

            return RJSHelper::cpp2js_QDomEntity(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toEntity";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCDATASection
    // Function: toNotation
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCDATASection_Wrapper::toNotation
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCDATASection* w = getWrapped();
                QDomNotation res = 
                    
                w->toNotation(
                  
                );
              
            // return type: QDomNotation

            return RJSHelper::cpp2js_QDomNotation(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toNotation";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCDATASection
    // Function: toProcessingInstruction
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCDATASection_Wrapper::toProcessingInstruction
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCDATASection* w = getWrapped();
                QDomProcessingInstruction res = 
                    
                w->toProcessingInstruction(
                  
                );
              
            // return type: QDomProcessingInstruction

            return RJSHelper::cpp2js_QDomProcessingInstruction(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toProcessingInstruction";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCDATASection
    // Function: toCharacterData
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCDATASection_Wrapper::toCharacterData
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCDATASection* w = getWrapped();
                QDomCharacterData res = 
                    
                w->toCharacterData(
                  
                );
              
            // return type: QDomCharacterData

            return RJSHelper::cpp2js_QDomCharacterData(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toCharacterData";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCDATASection
    // Function: toComment
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCDATASection_Wrapper::toComment
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCDATASection* w = getWrapped();
                QDomComment res = 
                    
                w->toComment(
                  
                );
              
            // return type: QDomComment

            return RJSHelper::cpp2js_QDomComment(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toComment";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCDATASection
    // Function: firstChildElement
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomCDATASection_Wrapper::firstChildElement
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
    , true
  
  )

   && RJSHelper::is_QString(handler, a2
    , true
  
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: tagName (QString)
  
QString a1_cpp;

      
          if (a1.isUndefined()) {
            a1_cpp = QString();
          }
          else {
            a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
          }
        
  // convert js parameter to cpp: namespaceURI (QString)
  
QString a2_cpp;

      
          if (a2.isUndefined()) {
            a2_cpp = QString();
          }
          else {
            a2_cpp = RJSHelper::js2cpp_QString(handler, a2);
          }
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCDATASection* w = getWrapped();
                QDomElement res = 
                    
                w->firstChildElement(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomElement

            return RJSHelper::cpp2js_QDomElement(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for firstChildElement";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCDATASection
    // Function: lastChildElement
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomCDATASection_Wrapper::lastChildElement
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
    , true
  
  )

   && RJSHelper::is_QString(handler, a2
    , true
  
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: tagName (QString)
  
QString a1_cpp;

      
          if (a1.isUndefined()) {
            a1_cpp = QString();
          }
          else {
            a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
          }
        
  // convert js parameter to cpp: namespaceURI (QString)
  
QString a2_cpp;

      
          if (a2.isUndefined()) {
            a2_cpp = QString();
          }
          else {
            a2_cpp = RJSHelper::js2cpp_QString(handler, a2);
          }
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCDATASection* w = getWrapped();
                QDomElement res = 
                    
                w->lastChildElement(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomElement

            return RJSHelper::cpp2js_QDomElement(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for lastChildElement";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCDATASection
    // Function: previousSiblingElement
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomCDATASection_Wrapper::previousSiblingElement
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
    , true
  
  )

   && RJSHelper::is_QString(handler, a2
    , true
  
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: tagName (QString)
  
QString a1_cpp;

      
          if (a1.isUndefined()) {
            a1_cpp = QString();
          }
          else {
            a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
          }
        
  // convert js parameter to cpp: namespaceURI (QString)
  
QString a2_cpp;

      
          if (a2.isUndefined()) {
            a2_cpp = QString();
          }
          else {
            a2_cpp = RJSHelper::js2cpp_QString(handler, a2);
          }
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCDATASection* w = getWrapped();
                QDomElement res = 
                    
                w->previousSiblingElement(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomElement

            return RJSHelper::cpp2js_QDomElement(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for previousSiblingElement";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCDATASection
    // Function: nextSiblingElement
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomCDATASection_Wrapper::nextSiblingElement
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
    , true
  
  )

   && RJSHelper::is_QString(handler, a2
    , true
  
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: taName (QString)
  
QString a1_cpp;

      
          if (a1.isUndefined()) {
            a1_cpp = QString();
          }
          else {
            a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
          }
        
  // convert js parameter to cpp: namespaceURI (QString)
  
QString a2_cpp;

      
          if (a2.isUndefined()) {
            a2_cpp = QString();
          }
          else {
            a2_cpp = RJSHelper::js2cpp_QString(handler, a2);
          }
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCDATASection* w = getWrapped();
                QDomElement res = 
                    
                w->nextSiblingElement(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomElement

            return RJSHelper::cpp2js_QDomElement(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for nextSiblingElement";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCDATASection
    // Function: lineNumber
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCDATASection_Wrapper::lineNumber
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCDATASection* w = getWrapped();
                int res = 
                    
                w->lineNumber(
                  
                );
              
            // return type: int

            return RJSHelper::cpp2js_int(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for lineNumber";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCDATASection
    // Function: columnNumber
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCDATASection_Wrapper::columnNumber
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCDATASection* w = getWrapped();
                int res = 
                    
                w->columnNumber(
                  
                );
              
            // return type: int

            return RJSHelper::cpp2js_int(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for columnNumber";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCDATASection
    // Function: substringData
    // Source: QDomCharacterData
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomCDATASection_Wrapper::substringData
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_unsignedlong(handler, a1
  )

   && RJSHelper::is_unsignedlong(handler, a2
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: offset (unsigned long)
  
unsigned long a1_cpp;

      a1_cpp = RJSHelper::js2cpp_unsignedlong(handler, a1);
        
  // convert js parameter to cpp: count (unsigned long)
  
unsigned long a2_cpp;

      a2_cpp = RJSHelper::js2cpp_unsignedlong(handler, a2);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCDATASection* w = getWrapped();
                QString res = 
                    
                w->substringData(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QString

            return RJSHelper::cpp2js_QString(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for substringData";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCDATASection
    // Function: appendData
    // Source: QDomCharacterData
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomCDATASection_Wrapper::appendData
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: arg (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCDATASection* w = getWrapped();
                
                w->appendData(
                  a1_cpp
    
                );
              
            return QJSValue();
          
  }

                  qWarning() << "no matching function variant found for appendData";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCDATASection
    // Function: insertData
    // Source: QDomCharacterData
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomCDATASection_Wrapper::insertData
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_unsignedlong(handler, a1
  )

   && RJSHelper::is_QString(handler, a2
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: offset (unsigned long)
  
unsigned long a1_cpp;

      a1_cpp = RJSHelper::js2cpp_unsignedlong(handler, a1);
        
  // convert js parameter to cpp: arg (QString)
  
QString a2_cpp;

      a2_cpp = RJSHelper::js2cpp_QString(handler, a2);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCDATASection* w = getWrapped();
                
                w->insertData(
                  a1_cpp
    , a2_cpp
    
                );
              
            return QJSValue();
          
  }

                  qWarning() << "no matching function variant found for insertData";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCDATASection
    // Function: deleteData
    // Source: QDomCharacterData
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomCDATASection_Wrapper::deleteData
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_unsignedlong(handler, a1
  )

   && RJSHelper::is_unsignedlong(handler, a2
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: offset (unsigned long)
  
unsigned long a1_cpp;

      a1_cpp = RJSHelper::js2cpp_unsignedlong(handler, a1);
        
  // convert js parameter to cpp: count (unsigned long)
  
unsigned long a2_cpp;

      a2_cpp = RJSHelper::js2cpp_unsignedlong(handler, a2);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCDATASection* w = getWrapped();
                
                w->deleteData(
                  a1_cpp
    , a2_cpp
    
                );
              
            return QJSValue();
          
  }

                  qWarning() << "no matching function variant found for deleteData";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCDATASection
    // Function: replaceData
    // Source: QDomCharacterData
    // Static: false
    // Parameters: 3
    // preceding Parameters: -1

                QJSValue 
              QDomCDATASection_Wrapper::replaceData
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2, 
  const QJSValue& 
  a3
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_unsignedlong(handler, a1
  )

   && RJSHelper::is_unsignedlong(handler, a2
  )

   && RJSHelper::is_QString(handler, a3
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: offset (unsigned long)
  
unsigned long a1_cpp;

      a1_cpp = RJSHelper::js2cpp_unsignedlong(handler, a1);
        
  // convert js parameter to cpp: count (unsigned long)
  
unsigned long a2_cpp;

      a2_cpp = RJSHelper::js2cpp_unsignedlong(handler, a2);
        
  // convert js parameter to cpp: arg (QString)
  
QString a3_cpp;

      a3_cpp = RJSHelper::js2cpp_QString(handler, a3);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCDATASection* w = getWrapped();
                
                w->replaceData(
                  a1_cpp
    , a2_cpp
    , a3_cpp
    
                );
              
            return QJSValue();
          
  }

                  qWarning() << "no matching function variant found for replaceData";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCDATASection
    // Function: length
    // Source: QDomCharacterData
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCDATASection_Wrapper::length
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCDATASection* w = getWrapped();
                int res = 
                    
                w->length(
                  
                );
              
            // return type: int

            return RJSHelper::cpp2js_int(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for length";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCDATASection
    // Function: data
    // Source: QDomCharacterData
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCDATASection_Wrapper::data
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCDATASection* w = getWrapped();
                QString res = 
                    
                w->data(
                  
                );
              
            // return type: QString

            return RJSHelper::cpp2js_QString(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for data";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCDATASection
    // Function: setData
    // Source: QDomCharacterData
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomCDATASection_Wrapper::setData
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp:  (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCDATASection* w = getWrapped();
                
                w->setData(
                  a1_cpp
    
                );
              
            return QJSValue();
          
  }

                  qWarning() << "no matching function variant found for setData";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCDATASection
    // Function: splitText
    // Source: QDomText
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomCDATASection_Wrapper::splitText
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_int(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: offset (int)
  
int a1_cpp;

      a1_cpp = RJSHelper::js2cpp_int(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCDATASection* w = getWrapped();
                QDomText res = 
                    
                w->splitText(
                  a1_cpp
    
                );
              
            // return type: QDomText

            return RJSHelper::cpp2js_QDomText(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for splitText";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCDATASection
    // Function: operator_assign
    // Source: 
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomCDATASection_Wrapper::operator_assign
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomCDATASection(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp:  (QDomCDATASection)
  
QDomCDATASection a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomCDATASection(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCDATASection* w = getWrapped();
                
                      // return type is reference:
                      // use pointer instead 3:
                      QDomCDATASection* res =
                    &
                w->operator=(
                  a1_cpp
    
                );
              
            // return type: QDomCDATASection&

            return RJSHelper::cpp2js_QDomCDATASection(
              handler, 
              // non-copyable: false
                  // return type is reference, type is copyable:
                  // convert pointer back to reference:
                  *res
                
              );
            
  }

                  qWarning() << "no matching function variant found for operator_assign";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomCDATASection
    // Function: nodeType
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomCDATASection_Wrapper::nodeType
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomCDATASection* w = getWrapped();
                QDomNode::NodeType res = 
                    
                w->nodeType(
                  
                );
              
            // return type: QDomNode::NodeType

            return RJSHelper::cpp2js_QDomNode_NodeType(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for nodeType";
                  handler.trace();
                  return QJSValue();
                
              }
            

  // member functions for static properties, forward to static function
  


  // protected overwritten functions / events and their public invokable counterparts:
  
    #include "qdom_wrapper.h"

  
      // list of registered base casters for this wrapper class:
      QList<RJSBasecaster_QDomNotation*> QDomNotation_Wrapper::basecasters_QDomNotation;
    
    // static functions implementation in singleton wrapper:
    
    void QDomNotation_Wrapper::init(RJSApi& handler) {
      
        //qmlRegisterType<QDomNotation_Wrapper>("org.qcad", 1, 0, "QDomNotation_Wrapper");
        qmlRegisterInterface<QDomNotation_Wrapper>("QDomNotation_Wrapper", 1);
      

      QJSEngine* engine = handler.getEngine();

      
          // make type scriptable for JS files:
          QJSValue global = engine->globalObject();
          RJSType_QDomNotation* t = new RJSType_QDomNotation();
          global.setProperty("RJSType_QDomNotation", engine->newQObject(t));

          // initialize ID for this type:
          RJSType_QDomNotation::getIdStatic();

          

      // wrapper:
      QJSValue mo = engine->newQMetaObject(&QDomNotation_Wrapper::staticMetaObject);
      engine->globalObject().setProperty("QDomNotation_Wrapper", mo);


      
        // JS base class:
        //QJSValue mob = engine->newQMetaObject(&QDomNotation_BaseJs::staticMetaObject);
        //engine->globalObject().setProperty("QDomNotation_BaseJs", mob);
      
      QString fileName = ":generator/js/QDomNotation.js";
      QFile scriptFile(fileName);
      if (!scriptFile.open(QIODevice::ReadOnly)) {
        qWarning() << "JS script wrapper file not found:" << fileName;
        return;
      }
      QTextStream stream(&scriptFile);
      QString contents = stream.readAll();
      scriptFile.close();

      qDebug() << "Evaluating file: " << fileName;
      QJSValue result = engine->evaluate(contents, fileName);
      if (result.isError()) {
          qWarning()
              << "Uncaught exception at line"
              << result.property("lineNumber").toInt()
              << ":" << result.toString();
      }
    }
  
    /*
    // special constructor used as prototype:
    QDomNotation_Wrapper::QDomNotation_Wrapper(QJSEngine* e) : wrapped(nullptr), wrappedCreated(false) {
            //setObjectName("QDomNotation_Wrapper");
            setEngine(e);

            // signal forwarding:
            //initConnections();
          }
        
    */

    
      // special constructor to wrap existing object:
      QDomNotation_Wrapper::QDomNotation_Wrapper(RJSApi& h, QDomNotation* o, bool wrappedCreated) : RJSWrapperObj(h), wrapped(o), wrappedCreated(wrappedCreated) {
              //RDebug::incCounter(QString("QDomNotation_Wrapper_") + handler.getEngine()->objectName());
              //RDebug::incCounter(QString("QDomNotation_Wrapper"));
              //setObjectName("QDomNotation_Wrapper");
              //setHandler(h);

              // signal forwarding:
              initConnections();
            }
          

      // destructor:
      QDomNotation_Wrapper::~QDomNotation_Wrapper() {
            //RDebug::decCounter(QString("QDomNotation_Wrapper_") + handler.getEngine()->objectName());
            //RDebug::decCounter(QString("QDomNotation_Wrapper"));

            //qDebug() << "QDomNotation_Wrapper::~QDomNotation_Wrapper";

            // tell script handler that this wrapper no longer exists:
            handler.unregisterWrapper(*this);

            
            if (wrappedCreated) {
              
                  // delete wrapped object (copyable, JS ownership)
                  //qDebug() << "deleting instance of QDomNotation";
                  delete wrapped;
                
            }
            
          }
        
    // initialization of signal forwarding
    
        void QDomNotation_Wrapper::initConnections() {

          //setObjectName("QDomNotation_Wrapper");

          // tell script handler that this wrapper needs to be deleted if the engine is deleted:
          handler.registerWrapper(*this);

          
              // wrapped object is not a QObject:
              // wrapper is managed by script engine:
              //QJSEngine::setObjectOwnership(this, QJSEngine::CppOwnership);
            

          if (hasWrapped()) {
            
            // set up signal forwarding:
            
          }
        }
      

  // constructors:
  
    // Class: QDomNotation
    // Function: 
    // Source: 
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1
QDomNotation_Wrapper::QDomNotation_Wrapper
                
              (
                
                  // RJSApi:
                  QObject* h
                  ,
  const QJSValue& 
  a1
              ) 
              
                : RJSWrapperObj(*(RJSApi*)h)
              
              {
                
                  //RDebug::incCounter(QString("QDomNotation_Wrapper_") + handler.getEngine()->objectName());
                  //RDebug::incCounter(QString("QDomNotation_Wrapper"));
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNotation(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: x (QDomNotation)
  
QDomNotation a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNotation(handler, a1);
        

    // call function:
    
        // construct wrapper:

        
            wrapped = new QDomNotation(
                a1_cpp
    
            );
            wrappedCreated = true;
          

        // signal forwarding:
        // TODO
        //connect(wrapped, SIGNAL(triggered(bool)), this, SLOT(triggeredEmitter(bool)));
        initConnections();
        return;

      
  }

      {
    

    // call function:
    
        // construct wrapper:

        
            wrapped = new QDomNotation(
                
            );
            wrappedCreated = true;
          

        // signal forwarding:
        // TODO
        //connect(wrapped, SIGNAL(triggered(bool)), this, SLOT(triggeredEmitter(bool)));
        initConnections();
        return;

      
  }

                    // no constructor without arguments defined
                    // allow constructor for prototype objects without args:
                    if (
                      a1.isUndefined()
  
                      ) {
                      wrapped = nullptr;
                      wrappedCreated = false;
                      return;
                    }
                  

                  qWarning() << "no matching constructor variant found for QDomNotation";
                  wrapped = nullptr;
                  wrappedCreated = false;
                  handler.trace();
                
              }
            

    // non-static functions:
    
    // Class: QDomNotation
    // Function: operator_equal
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomNotation_Wrapper::operator_equal
              (
                
  const QJSValue& 
  a1
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp:  (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNotation* w = getWrapped();
                bool res = 
                    
                w->operator==(
                  a1_cpp
    
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for operator_equal";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNotation
    // Function: operator_unequal
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomNotation_Wrapper::operator_unequal
              (
                
  const QJSValue& 
  a1
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp:  (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNotation* w = getWrapped();
                bool res = 
                    
                w->operator!=(
                  a1_cpp
    
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for operator_unequal";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNotation
    // Function: insertBefore
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomNotation_Wrapper::insertBefore
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

   && RJSHelper::is_QDomNode(handler, a2
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: newChild (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        
  // convert js parameter to cpp: refChild (QDomNode)
  
QDomNode a2_cpp;

      a2_cpp = RJSHelper::js2cpp_QDomNode(handler, a2);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNotation* w = getWrapped();
                QDomNode res = 
                    
                w->insertBefore(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for insertBefore";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNotation
    // Function: insertAfter
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomNotation_Wrapper::insertAfter
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

   && RJSHelper::is_QDomNode(handler, a2
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: newChild (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        
  // convert js parameter to cpp: refChild (QDomNode)
  
QDomNode a2_cpp;

      a2_cpp = RJSHelper::js2cpp_QDomNode(handler, a2);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNotation* w = getWrapped();
                QDomNode res = 
                    
                w->insertAfter(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for insertAfter";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNotation
    // Function: replaceChild
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomNotation_Wrapper::replaceChild
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

   && RJSHelper::is_QDomNode(handler, a2
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: newChild (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        
  // convert js parameter to cpp: oldChild (QDomNode)
  
QDomNode a2_cpp;

      a2_cpp = RJSHelper::js2cpp_QDomNode(handler, a2);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNotation* w = getWrapped();
                QDomNode res = 
                    
                w->replaceChild(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for replaceChild";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNotation
    // Function: removeChild
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomNotation_Wrapper::removeChild
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: oldChild (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNotation* w = getWrapped();
                QDomNode res = 
                    
                w->removeChild(
                  a1_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for removeChild";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNotation
    // Function: appendChild
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomNotation_Wrapper::appendChild
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: newChild (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNotation* w = getWrapped();
                QDomNode res = 
                    
                w->appendChild(
                  a1_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for appendChild";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNotation
    // Function: hasChildNodes
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNotation_Wrapper::hasChildNodes
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNotation* w = getWrapped();
                bool res = 
                    
                w->hasChildNodes(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for hasChildNodes";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNotation
    // Function: cloneNode
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomNotation_Wrapper::cloneNode
              (
                
  const QJSValue& 
  a1
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_bool(handler, a1
    , true
  
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: deep (bool)
  
bool a1_cpp;

      
          if (a1.isUndefined()) {
            a1_cpp = true;
          }
          else {
            a1_cpp = RJSHelper::js2cpp_bool(handler, a1);
          }
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNotation* w = getWrapped();
                QDomNode res = 
                    
                w->cloneNode(
                  a1_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for cloneNode";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNotation
    // Function: normalize
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNotation_Wrapper::normalize
              (
                
              ) 
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNotation* w = getWrapped();
                
                w->normalize(
                  
                );
              
            return QJSValue();
          
  }

                  qWarning() << "no matching function variant found for normalize";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNotation
    // Function: isSupported
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomNotation_Wrapper::isSupported
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

   && RJSHelper::is_QString(handler, a2
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: feature (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        
  // convert js parameter to cpp: version (QString)
  
QString a2_cpp;

      a2_cpp = RJSHelper::js2cpp_QString(handler, a2);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNotation* w = getWrapped();
                bool res = 
                    
                w->isSupported(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isSupported";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNotation
    // Function: nodeName
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNotation_Wrapper::nodeName
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNotation* w = getWrapped();
                QString res = 
                    
                w->nodeName(
                  
                );
              
            // return type: QString

            return RJSHelper::cpp2js_QString(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for nodeName";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNotation
    // Function: parentNode
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNotation_Wrapper::parentNode
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNotation* w = getWrapped();
                QDomNode res = 
                    
                w->parentNode(
                  
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for parentNode";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNotation
    // Function: childNodes
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNotation_Wrapper::childNodes
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNotation* w = getWrapped();
                QDomNodeList res = 
                    
                w->childNodes(
                  
                );
              
            // return type: QDomNodeList

            return RJSHelper::cpp2js_QDomNodeList(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for childNodes";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNotation
    // Function: firstChild
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNotation_Wrapper::firstChild
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNotation* w = getWrapped();
                QDomNode res = 
                    
                w->firstChild(
                  
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for firstChild";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNotation
    // Function: lastChild
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNotation_Wrapper::lastChild
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNotation* w = getWrapped();
                QDomNode res = 
                    
                w->lastChild(
                  
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for lastChild";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNotation
    // Function: previousSibling
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNotation_Wrapper::previousSibling
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNotation* w = getWrapped();
                QDomNode res = 
                    
                w->previousSibling(
                  
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for previousSibling";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNotation
    // Function: nextSibling
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNotation_Wrapper::nextSibling
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNotation* w = getWrapped();
                QDomNode res = 
                    
                w->nextSibling(
                  
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for nextSibling";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNotation
    // Function: attributes
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNotation_Wrapper::attributes
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNotation* w = getWrapped();
                QDomNamedNodeMap res = 
                    
                w->attributes(
                  
                );
              
            // return type: QDomNamedNodeMap

            return RJSHelper::cpp2js_QDomNamedNodeMap(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for attributes";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNotation
    // Function: ownerDocument
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNotation_Wrapper::ownerDocument
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNotation* w = getWrapped();
                QDomDocument res = 
                    
                w->ownerDocument(
                  
                );
              
            // return type: QDomDocument

            return RJSHelper::cpp2js_QDomDocument(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for ownerDocument";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNotation
    // Function: namespaceURI
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNotation_Wrapper::namespaceURI
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNotation* w = getWrapped();
                QString res = 
                    
                w->namespaceURI(
                  
                );
              
            // return type: QString

            return RJSHelper::cpp2js_QString(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for namespaceURI";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNotation
    // Function: localName
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNotation_Wrapper::localName
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNotation* w = getWrapped();
                QString res = 
                    
                w->localName(
                  
                );
              
            // return type: QString

            return RJSHelper::cpp2js_QString(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for localName";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNotation
    // Function: hasAttributes
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNotation_Wrapper::hasAttributes
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNotation* w = getWrapped();
                bool res = 
                    
                w->hasAttributes(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for hasAttributes";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNotation
    // Function: nodeValue
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNotation_Wrapper::nodeValue
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNotation* w = getWrapped();
                QString res = 
                    
                w->nodeValue(
                  
                );
              
            // return type: QString

            return RJSHelper::cpp2js_QString(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for nodeValue";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNotation
    // Function: setNodeValue
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomNotation_Wrapper::setNodeValue
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp:  (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNotation* w = getWrapped();
                
                w->setNodeValue(
                  a1_cpp
    
                );
              
            return QJSValue();
          
  }

                  qWarning() << "no matching function variant found for setNodeValue";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNotation
    // Function: prefix
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNotation_Wrapper::prefix
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNotation* w = getWrapped();
                QString res = 
                    
                w->prefix(
                  
                );
              
            // return type: QString

            return RJSHelper::cpp2js_QString(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for prefix";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNotation
    // Function: setPrefix
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomNotation_Wrapper::setPrefix
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: pre (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNotation* w = getWrapped();
                
                w->setPrefix(
                  a1_cpp
    
                );
              
            return QJSValue();
          
  }

                  qWarning() << "no matching function variant found for setPrefix";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNotation
    // Function: isAttr
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNotation_Wrapper::isAttr
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNotation* w = getWrapped();
                bool res = 
                    
                w->isAttr(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isAttr";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNotation
    // Function: isCDATASection
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNotation_Wrapper::isCDATASection
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNotation* w = getWrapped();
                bool res = 
                    
                w->isCDATASection(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isCDATASection";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNotation
    // Function: isDocumentFragment
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNotation_Wrapper::isDocumentFragment
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNotation* w = getWrapped();
                bool res = 
                    
                w->isDocumentFragment(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isDocumentFragment";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNotation
    // Function: isDocument
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNotation_Wrapper::isDocument
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNotation* w = getWrapped();
                bool res = 
                    
                w->isDocument(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isDocument";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNotation
    // Function: isDocumentType
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNotation_Wrapper::isDocumentType
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNotation* w = getWrapped();
                bool res = 
                    
                w->isDocumentType(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isDocumentType";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNotation
    // Function: isElement
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNotation_Wrapper::isElement
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNotation* w = getWrapped();
                bool res = 
                    
                w->isElement(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isElement";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNotation
    // Function: isEntityReference
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNotation_Wrapper::isEntityReference
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNotation* w = getWrapped();
                bool res = 
                    
                w->isEntityReference(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isEntityReference";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNotation
    // Function: isText
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNotation_Wrapper::isText
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNotation* w = getWrapped();
                bool res = 
                    
                w->isText(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isText";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNotation
    // Function: isEntity
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNotation_Wrapper::isEntity
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNotation* w = getWrapped();
                bool res = 
                    
                w->isEntity(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isEntity";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNotation
    // Function: isNotation
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNotation_Wrapper::isNotation
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNotation* w = getWrapped();
                bool res = 
                    
                w->isNotation(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isNotation";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNotation
    // Function: isProcessingInstruction
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNotation_Wrapper::isProcessingInstruction
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNotation* w = getWrapped();
                bool res = 
                    
                w->isProcessingInstruction(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isProcessingInstruction";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNotation
    // Function: isCharacterData
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNotation_Wrapper::isCharacterData
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNotation* w = getWrapped();
                bool res = 
                    
                w->isCharacterData(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isCharacterData";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNotation
    // Function: isComment
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNotation_Wrapper::isComment
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNotation* w = getWrapped();
                bool res = 
                    
                w->isComment(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isComment";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNotation
    // Function: namedItem
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomNotation_Wrapper::namedItem
              (
                
  const QJSValue& 
  a1
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: name (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNotation* w = getWrapped();
                QDomNode res = 
                    
                w->namedItem(
                  a1_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for namedItem";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNotation
    // Function: isNull
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNotation_Wrapper::isNull
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNotation* w = getWrapped();
                bool res = 
                    
                w->isNull(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isNull";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNotation
    // Function: clear
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNotation_Wrapper::clear
              (
                
              ) 
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNotation* w = getWrapped();
                
                w->clear(
                  
                );
              
            return QJSValue();
          
  }

                  qWarning() << "no matching function variant found for clear";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNotation
    // Function: toAttr
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNotation_Wrapper::toAttr
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNotation* w = getWrapped();
                QDomAttr res = 
                    
                w->toAttr(
                  
                );
              
            // return type: QDomAttr

            return RJSHelper::cpp2js_QDomAttr(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toAttr";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNotation
    // Function: toCDATASection
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNotation_Wrapper::toCDATASection
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNotation* w = getWrapped();
                QDomCDATASection res = 
                    
                w->toCDATASection(
                  
                );
              
            // return type: QDomCDATASection

            return RJSHelper::cpp2js_QDomCDATASection(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toCDATASection";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNotation
    // Function: toDocumentFragment
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNotation_Wrapper::toDocumentFragment
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNotation* w = getWrapped();
                QDomDocumentFragment res = 
                    
                w->toDocumentFragment(
                  
                );
              
            // return type: QDomDocumentFragment

            return RJSHelper::cpp2js_QDomDocumentFragment(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toDocumentFragment";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNotation
    // Function: toDocument
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNotation_Wrapper::toDocument
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNotation* w = getWrapped();
                QDomDocument res = 
                    
                w->toDocument(
                  
                );
              
            // return type: QDomDocument

            return RJSHelper::cpp2js_QDomDocument(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toDocument";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNotation
    // Function: toDocumentType
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNotation_Wrapper::toDocumentType
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNotation* w = getWrapped();
                QDomDocumentType res = 
                    
                w->toDocumentType(
                  
                );
              
            // return type: QDomDocumentType

            return RJSHelper::cpp2js_QDomDocumentType(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toDocumentType";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNotation
    // Function: toElement
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNotation_Wrapper::toElement
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNotation* w = getWrapped();
                QDomElement res = 
                    
                w->toElement(
                  
                );
              
            // return type: QDomElement

            return RJSHelper::cpp2js_QDomElement(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toElement";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNotation
    // Function: toEntityReference
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNotation_Wrapper::toEntityReference
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNotation* w = getWrapped();
                QDomEntityReference res = 
                    
                w->toEntityReference(
                  
                );
              
            // return type: QDomEntityReference

            return RJSHelper::cpp2js_QDomEntityReference(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toEntityReference";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNotation
    // Function: toText
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNotation_Wrapper::toText
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNotation* w = getWrapped();
                QDomText res = 
                    
                w->toText(
                  
                );
              
            // return type: QDomText

            return RJSHelper::cpp2js_QDomText(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toText";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNotation
    // Function: toEntity
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNotation_Wrapper::toEntity
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNotation* w = getWrapped();
                QDomEntity res = 
                    
                w->toEntity(
                  
                );
              
            // return type: QDomEntity

            return RJSHelper::cpp2js_QDomEntity(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toEntity";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNotation
    // Function: toNotation
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNotation_Wrapper::toNotation
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNotation* w = getWrapped();
                QDomNotation res = 
                    
                w->toNotation(
                  
                );
              
            // return type: QDomNotation

            return RJSHelper::cpp2js_QDomNotation(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toNotation";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNotation
    // Function: toProcessingInstruction
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNotation_Wrapper::toProcessingInstruction
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNotation* w = getWrapped();
                QDomProcessingInstruction res = 
                    
                w->toProcessingInstruction(
                  
                );
              
            // return type: QDomProcessingInstruction

            return RJSHelper::cpp2js_QDomProcessingInstruction(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toProcessingInstruction";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNotation
    // Function: toCharacterData
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNotation_Wrapper::toCharacterData
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNotation* w = getWrapped();
                QDomCharacterData res = 
                    
                w->toCharacterData(
                  
                );
              
            // return type: QDomCharacterData

            return RJSHelper::cpp2js_QDomCharacterData(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toCharacterData";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNotation
    // Function: toComment
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNotation_Wrapper::toComment
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNotation* w = getWrapped();
                QDomComment res = 
                    
                w->toComment(
                  
                );
              
            // return type: QDomComment

            return RJSHelper::cpp2js_QDomComment(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toComment";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNotation
    // Function: firstChildElement
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomNotation_Wrapper::firstChildElement
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
    , true
  
  )

   && RJSHelper::is_QString(handler, a2
    , true
  
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: tagName (QString)
  
QString a1_cpp;

      
          if (a1.isUndefined()) {
            a1_cpp = QString();
          }
          else {
            a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
          }
        
  // convert js parameter to cpp: namespaceURI (QString)
  
QString a2_cpp;

      
          if (a2.isUndefined()) {
            a2_cpp = QString();
          }
          else {
            a2_cpp = RJSHelper::js2cpp_QString(handler, a2);
          }
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNotation* w = getWrapped();
                QDomElement res = 
                    
                w->firstChildElement(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomElement

            return RJSHelper::cpp2js_QDomElement(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for firstChildElement";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNotation
    // Function: lastChildElement
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomNotation_Wrapper::lastChildElement
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
    , true
  
  )

   && RJSHelper::is_QString(handler, a2
    , true
  
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: tagName (QString)
  
QString a1_cpp;

      
          if (a1.isUndefined()) {
            a1_cpp = QString();
          }
          else {
            a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
          }
        
  // convert js parameter to cpp: namespaceURI (QString)
  
QString a2_cpp;

      
          if (a2.isUndefined()) {
            a2_cpp = QString();
          }
          else {
            a2_cpp = RJSHelper::js2cpp_QString(handler, a2);
          }
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNotation* w = getWrapped();
                QDomElement res = 
                    
                w->lastChildElement(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomElement

            return RJSHelper::cpp2js_QDomElement(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for lastChildElement";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNotation
    // Function: previousSiblingElement
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomNotation_Wrapper::previousSiblingElement
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
    , true
  
  )

   && RJSHelper::is_QString(handler, a2
    , true
  
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: tagName (QString)
  
QString a1_cpp;

      
          if (a1.isUndefined()) {
            a1_cpp = QString();
          }
          else {
            a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
          }
        
  // convert js parameter to cpp: namespaceURI (QString)
  
QString a2_cpp;

      
          if (a2.isUndefined()) {
            a2_cpp = QString();
          }
          else {
            a2_cpp = RJSHelper::js2cpp_QString(handler, a2);
          }
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNotation* w = getWrapped();
                QDomElement res = 
                    
                w->previousSiblingElement(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomElement

            return RJSHelper::cpp2js_QDomElement(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for previousSiblingElement";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNotation
    // Function: nextSiblingElement
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomNotation_Wrapper::nextSiblingElement
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
    , true
  
  )

   && RJSHelper::is_QString(handler, a2
    , true
  
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: taName (QString)
  
QString a1_cpp;

      
          if (a1.isUndefined()) {
            a1_cpp = QString();
          }
          else {
            a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
          }
        
  // convert js parameter to cpp: namespaceURI (QString)
  
QString a2_cpp;

      
          if (a2.isUndefined()) {
            a2_cpp = QString();
          }
          else {
            a2_cpp = RJSHelper::js2cpp_QString(handler, a2);
          }
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNotation* w = getWrapped();
                QDomElement res = 
                    
                w->nextSiblingElement(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomElement

            return RJSHelper::cpp2js_QDomElement(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for nextSiblingElement";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNotation
    // Function: lineNumber
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNotation_Wrapper::lineNumber
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNotation* w = getWrapped();
                int res = 
                    
                w->lineNumber(
                  
                );
              
            // return type: int

            return RJSHelper::cpp2js_int(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for lineNumber";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNotation
    // Function: columnNumber
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNotation_Wrapper::columnNumber
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNotation* w = getWrapped();
                int res = 
                    
                w->columnNumber(
                  
                );
              
            // return type: int

            return RJSHelper::cpp2js_int(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for columnNumber";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNotation
    // Function: operator_assign
    // Source: 
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomNotation_Wrapper::operator_assign
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNotation(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp:  (QDomNotation)
  
QDomNotation a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNotation(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNotation* w = getWrapped();
                
                      // return type is reference:
                      // use pointer instead 3:
                      QDomNotation* res =
                    &
                w->operator=(
                  a1_cpp
    
                );
              
            // return type: QDomNotation&

            return RJSHelper::cpp2js_QDomNotation(
              handler, 
              // non-copyable: false
                  // return type is reference, type is copyable:
                  // convert pointer back to reference:
                  *res
                
              );
            
  }

                  qWarning() << "no matching function variant found for operator_assign";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNotation
    // Function: publicId
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNotation_Wrapper::publicId
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNotation* w = getWrapped();
                QString res = 
                    
                w->publicId(
                  
                );
              
            // return type: QString

            return RJSHelper::cpp2js_QString(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for publicId";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNotation
    // Function: systemId
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNotation_Wrapper::systemId
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNotation* w = getWrapped();
                QString res = 
                    
                w->systemId(
                  
                );
              
            // return type: QString

            return RJSHelper::cpp2js_QString(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for systemId";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomNotation
    // Function: nodeType
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomNotation_Wrapper::nodeType
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomNotation* w = getWrapped();
                QDomNode::NodeType res = 
                    
                w->nodeType(
                  
                );
              
            // return type: QDomNode::NodeType

            return RJSHelper::cpp2js_QDomNode_NodeType(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for nodeType";
                  handler.trace();
                  return QJSValue();
                
              }
            

  // member functions for static properties, forward to static function
  


  // protected overwritten functions / events and their public invokable counterparts:
  
    #include "qdom_wrapper.h"

  
      // list of registered base casters for this wrapper class:
      QList<RJSBasecaster_QDomEntity*> QDomEntity_Wrapper::basecasters_QDomEntity;
    
    // static functions implementation in singleton wrapper:
    
    void QDomEntity_Wrapper::init(RJSApi& handler) {
      
        //qmlRegisterType<QDomEntity_Wrapper>("org.qcad", 1, 0, "QDomEntity_Wrapper");
        qmlRegisterInterface<QDomEntity_Wrapper>("QDomEntity_Wrapper", 1);
      

      QJSEngine* engine = handler.getEngine();

      
          // make type scriptable for JS files:
          QJSValue global = engine->globalObject();
          RJSType_QDomEntity* t = new RJSType_QDomEntity();
          global.setProperty("RJSType_QDomEntity", engine->newQObject(t));

          // initialize ID for this type:
          RJSType_QDomEntity::getIdStatic();

          

      // wrapper:
      QJSValue mo = engine->newQMetaObject(&QDomEntity_Wrapper::staticMetaObject);
      engine->globalObject().setProperty("QDomEntity_Wrapper", mo);


      
        // JS base class:
        //QJSValue mob = engine->newQMetaObject(&QDomEntity_BaseJs::staticMetaObject);
        //engine->globalObject().setProperty("QDomEntity_BaseJs", mob);
      
      QString fileName = ":generator/js/QDomEntity.js";
      QFile scriptFile(fileName);
      if (!scriptFile.open(QIODevice::ReadOnly)) {
        qWarning() << "JS script wrapper file not found:" << fileName;
        return;
      }
      QTextStream stream(&scriptFile);
      QString contents = stream.readAll();
      scriptFile.close();

      qDebug() << "Evaluating file: " << fileName;
      QJSValue result = engine->evaluate(contents, fileName);
      if (result.isError()) {
          qWarning()
              << "Uncaught exception at line"
              << result.property("lineNumber").toInt()
              << ":" << result.toString();
      }
    }
  
    /*
    // special constructor used as prototype:
    QDomEntity_Wrapper::QDomEntity_Wrapper(QJSEngine* e) : wrapped(nullptr), wrappedCreated(false) {
            //setObjectName("QDomEntity_Wrapper");
            setEngine(e);

            // signal forwarding:
            //initConnections();
          }
        
    */

    
      // special constructor to wrap existing object:
      QDomEntity_Wrapper::QDomEntity_Wrapper(RJSApi& h, QDomEntity* o, bool wrappedCreated) : RJSWrapperObj(h), wrapped(o), wrappedCreated(wrappedCreated) {
              //RDebug::incCounter(QString("QDomEntity_Wrapper_") + handler.getEngine()->objectName());
              //RDebug::incCounter(QString("QDomEntity_Wrapper"));
              //setObjectName("QDomEntity_Wrapper");
              //setHandler(h);

              // signal forwarding:
              initConnections();
            }
          

      // destructor:
      QDomEntity_Wrapper::~QDomEntity_Wrapper() {
            //RDebug::decCounter(QString("QDomEntity_Wrapper_") + handler.getEngine()->objectName());
            //RDebug::decCounter(QString("QDomEntity_Wrapper"));

            //qDebug() << "QDomEntity_Wrapper::~QDomEntity_Wrapper";

            // tell script handler that this wrapper no longer exists:
            handler.unregisterWrapper(*this);

            
            if (wrappedCreated) {
              
                  // delete wrapped object (copyable, JS ownership)
                  //qDebug() << "deleting instance of QDomEntity";
                  delete wrapped;
                
            }
            
          }
        
    // initialization of signal forwarding
    
        void QDomEntity_Wrapper::initConnections() {

          //setObjectName("QDomEntity_Wrapper");

          // tell script handler that this wrapper needs to be deleted if the engine is deleted:
          handler.registerWrapper(*this);

          
              // wrapped object is not a QObject:
              // wrapper is managed by script engine:
              //QJSEngine::setObjectOwnership(this, QJSEngine::CppOwnership);
            

          if (hasWrapped()) {
            
            // set up signal forwarding:
            
          }
        }
      

  // constructors:
  
    // Class: QDomEntity
    // Function: 
    // Source: 
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1
QDomEntity_Wrapper::QDomEntity_Wrapper
                
              (
                
                  // RJSApi:
                  QObject* h
                  ,
  const QJSValue& 
  a1
              ) 
              
                : RJSWrapperObj(*(RJSApi*)h)
              
              {
                
                  //RDebug::incCounter(QString("QDomEntity_Wrapper_") + handler.getEngine()->objectName());
                  //RDebug::incCounter(QString("QDomEntity_Wrapper"));
                
      // check parameter types:
      if (
        RJSHelper::is_QDomEntity(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: x (QDomEntity)
  
QDomEntity a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomEntity(handler, a1);
        

    // call function:
    
        // construct wrapper:

        
            wrapped = new QDomEntity(
                a1_cpp
    
            );
            wrappedCreated = true;
          

        // signal forwarding:
        // TODO
        //connect(wrapped, SIGNAL(triggered(bool)), this, SLOT(triggeredEmitter(bool)));
        initConnections();
        return;

      
  }

      {
    

    // call function:
    
        // construct wrapper:

        
            wrapped = new QDomEntity(
                
            );
            wrappedCreated = true;
          

        // signal forwarding:
        // TODO
        //connect(wrapped, SIGNAL(triggered(bool)), this, SLOT(triggeredEmitter(bool)));
        initConnections();
        return;

      
  }

                    // no constructor without arguments defined
                    // allow constructor for prototype objects without args:
                    if (
                      a1.isUndefined()
  
                      ) {
                      wrapped = nullptr;
                      wrappedCreated = false;
                      return;
                    }
                  

                  qWarning() << "no matching constructor variant found for QDomEntity";
                  wrapped = nullptr;
                  wrappedCreated = false;
                  handler.trace();
                
              }
            

    // non-static functions:
    
    // Class: QDomEntity
    // Function: operator_equal
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomEntity_Wrapper::operator_equal
              (
                
  const QJSValue& 
  a1
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp:  (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntity* w = getWrapped();
                bool res = 
                    
                w->operator==(
                  a1_cpp
    
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for operator_equal";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntity
    // Function: operator_unequal
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomEntity_Wrapper::operator_unequal
              (
                
  const QJSValue& 
  a1
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp:  (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntity* w = getWrapped();
                bool res = 
                    
                w->operator!=(
                  a1_cpp
    
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for operator_unequal";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntity
    // Function: insertBefore
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomEntity_Wrapper::insertBefore
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

   && RJSHelper::is_QDomNode(handler, a2
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: newChild (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        
  // convert js parameter to cpp: refChild (QDomNode)
  
QDomNode a2_cpp;

      a2_cpp = RJSHelper::js2cpp_QDomNode(handler, a2);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntity* w = getWrapped();
                QDomNode res = 
                    
                w->insertBefore(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for insertBefore";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntity
    // Function: insertAfter
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomEntity_Wrapper::insertAfter
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

   && RJSHelper::is_QDomNode(handler, a2
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: newChild (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        
  // convert js parameter to cpp: refChild (QDomNode)
  
QDomNode a2_cpp;

      a2_cpp = RJSHelper::js2cpp_QDomNode(handler, a2);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntity* w = getWrapped();
                QDomNode res = 
                    
                w->insertAfter(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for insertAfter";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntity
    // Function: replaceChild
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomEntity_Wrapper::replaceChild
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

   && RJSHelper::is_QDomNode(handler, a2
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: newChild (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        
  // convert js parameter to cpp: oldChild (QDomNode)
  
QDomNode a2_cpp;

      a2_cpp = RJSHelper::js2cpp_QDomNode(handler, a2);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntity* w = getWrapped();
                QDomNode res = 
                    
                w->replaceChild(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for replaceChild";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntity
    // Function: removeChild
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomEntity_Wrapper::removeChild
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: oldChild (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntity* w = getWrapped();
                QDomNode res = 
                    
                w->removeChild(
                  a1_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for removeChild";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntity
    // Function: appendChild
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomEntity_Wrapper::appendChild
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: newChild (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntity* w = getWrapped();
                QDomNode res = 
                    
                w->appendChild(
                  a1_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for appendChild";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntity
    // Function: hasChildNodes
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntity_Wrapper::hasChildNodes
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntity* w = getWrapped();
                bool res = 
                    
                w->hasChildNodes(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for hasChildNodes";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntity
    // Function: cloneNode
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomEntity_Wrapper::cloneNode
              (
                
  const QJSValue& 
  a1
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_bool(handler, a1
    , true
  
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: deep (bool)
  
bool a1_cpp;

      
          if (a1.isUndefined()) {
            a1_cpp = true;
          }
          else {
            a1_cpp = RJSHelper::js2cpp_bool(handler, a1);
          }
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntity* w = getWrapped();
                QDomNode res = 
                    
                w->cloneNode(
                  a1_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for cloneNode";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntity
    // Function: normalize
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntity_Wrapper::normalize
              (
                
              ) 
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntity* w = getWrapped();
                
                w->normalize(
                  
                );
              
            return QJSValue();
          
  }

                  qWarning() << "no matching function variant found for normalize";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntity
    // Function: isSupported
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomEntity_Wrapper::isSupported
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

   && RJSHelper::is_QString(handler, a2
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: feature (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        
  // convert js parameter to cpp: version (QString)
  
QString a2_cpp;

      a2_cpp = RJSHelper::js2cpp_QString(handler, a2);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntity* w = getWrapped();
                bool res = 
                    
                w->isSupported(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isSupported";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntity
    // Function: nodeName
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntity_Wrapper::nodeName
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntity* w = getWrapped();
                QString res = 
                    
                w->nodeName(
                  
                );
              
            // return type: QString

            return RJSHelper::cpp2js_QString(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for nodeName";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntity
    // Function: parentNode
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntity_Wrapper::parentNode
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntity* w = getWrapped();
                QDomNode res = 
                    
                w->parentNode(
                  
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for parentNode";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntity
    // Function: childNodes
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntity_Wrapper::childNodes
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntity* w = getWrapped();
                QDomNodeList res = 
                    
                w->childNodes(
                  
                );
              
            // return type: QDomNodeList

            return RJSHelper::cpp2js_QDomNodeList(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for childNodes";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntity
    // Function: firstChild
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntity_Wrapper::firstChild
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntity* w = getWrapped();
                QDomNode res = 
                    
                w->firstChild(
                  
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for firstChild";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntity
    // Function: lastChild
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntity_Wrapper::lastChild
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntity* w = getWrapped();
                QDomNode res = 
                    
                w->lastChild(
                  
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for lastChild";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntity
    // Function: previousSibling
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntity_Wrapper::previousSibling
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntity* w = getWrapped();
                QDomNode res = 
                    
                w->previousSibling(
                  
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for previousSibling";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntity
    // Function: nextSibling
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntity_Wrapper::nextSibling
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntity* w = getWrapped();
                QDomNode res = 
                    
                w->nextSibling(
                  
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for nextSibling";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntity
    // Function: attributes
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntity_Wrapper::attributes
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntity* w = getWrapped();
                QDomNamedNodeMap res = 
                    
                w->attributes(
                  
                );
              
            // return type: QDomNamedNodeMap

            return RJSHelper::cpp2js_QDomNamedNodeMap(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for attributes";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntity
    // Function: ownerDocument
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntity_Wrapper::ownerDocument
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntity* w = getWrapped();
                QDomDocument res = 
                    
                w->ownerDocument(
                  
                );
              
            // return type: QDomDocument

            return RJSHelper::cpp2js_QDomDocument(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for ownerDocument";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntity
    // Function: namespaceURI
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntity_Wrapper::namespaceURI
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntity* w = getWrapped();
                QString res = 
                    
                w->namespaceURI(
                  
                );
              
            // return type: QString

            return RJSHelper::cpp2js_QString(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for namespaceURI";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntity
    // Function: localName
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntity_Wrapper::localName
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntity* w = getWrapped();
                QString res = 
                    
                w->localName(
                  
                );
              
            // return type: QString

            return RJSHelper::cpp2js_QString(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for localName";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntity
    // Function: hasAttributes
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntity_Wrapper::hasAttributes
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntity* w = getWrapped();
                bool res = 
                    
                w->hasAttributes(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for hasAttributes";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntity
    // Function: nodeValue
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntity_Wrapper::nodeValue
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntity* w = getWrapped();
                QString res = 
                    
                w->nodeValue(
                  
                );
              
            // return type: QString

            return RJSHelper::cpp2js_QString(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for nodeValue";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntity
    // Function: setNodeValue
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomEntity_Wrapper::setNodeValue
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp:  (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntity* w = getWrapped();
                
                w->setNodeValue(
                  a1_cpp
    
                );
              
            return QJSValue();
          
  }

                  qWarning() << "no matching function variant found for setNodeValue";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntity
    // Function: prefix
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntity_Wrapper::prefix
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntity* w = getWrapped();
                QString res = 
                    
                w->prefix(
                  
                );
              
            // return type: QString

            return RJSHelper::cpp2js_QString(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for prefix";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntity
    // Function: setPrefix
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomEntity_Wrapper::setPrefix
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: pre (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntity* w = getWrapped();
                
                w->setPrefix(
                  a1_cpp
    
                );
              
            return QJSValue();
          
  }

                  qWarning() << "no matching function variant found for setPrefix";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntity
    // Function: isAttr
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntity_Wrapper::isAttr
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntity* w = getWrapped();
                bool res = 
                    
                w->isAttr(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isAttr";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntity
    // Function: isCDATASection
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntity_Wrapper::isCDATASection
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntity* w = getWrapped();
                bool res = 
                    
                w->isCDATASection(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isCDATASection";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntity
    // Function: isDocumentFragment
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntity_Wrapper::isDocumentFragment
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntity* w = getWrapped();
                bool res = 
                    
                w->isDocumentFragment(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isDocumentFragment";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntity
    // Function: isDocument
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntity_Wrapper::isDocument
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntity* w = getWrapped();
                bool res = 
                    
                w->isDocument(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isDocument";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntity
    // Function: isDocumentType
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntity_Wrapper::isDocumentType
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntity* w = getWrapped();
                bool res = 
                    
                w->isDocumentType(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isDocumentType";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntity
    // Function: isElement
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntity_Wrapper::isElement
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntity* w = getWrapped();
                bool res = 
                    
                w->isElement(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isElement";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntity
    // Function: isEntityReference
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntity_Wrapper::isEntityReference
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntity* w = getWrapped();
                bool res = 
                    
                w->isEntityReference(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isEntityReference";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntity
    // Function: isText
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntity_Wrapper::isText
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntity* w = getWrapped();
                bool res = 
                    
                w->isText(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isText";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntity
    // Function: isEntity
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntity_Wrapper::isEntity
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntity* w = getWrapped();
                bool res = 
                    
                w->isEntity(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isEntity";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntity
    // Function: isNotation
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntity_Wrapper::isNotation
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntity* w = getWrapped();
                bool res = 
                    
                w->isNotation(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isNotation";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntity
    // Function: isProcessingInstruction
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntity_Wrapper::isProcessingInstruction
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntity* w = getWrapped();
                bool res = 
                    
                w->isProcessingInstruction(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isProcessingInstruction";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntity
    // Function: isCharacterData
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntity_Wrapper::isCharacterData
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntity* w = getWrapped();
                bool res = 
                    
                w->isCharacterData(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isCharacterData";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntity
    // Function: isComment
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntity_Wrapper::isComment
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntity* w = getWrapped();
                bool res = 
                    
                w->isComment(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isComment";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntity
    // Function: namedItem
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomEntity_Wrapper::namedItem
              (
                
  const QJSValue& 
  a1
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: name (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntity* w = getWrapped();
                QDomNode res = 
                    
                w->namedItem(
                  a1_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for namedItem";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntity
    // Function: isNull
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntity_Wrapper::isNull
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntity* w = getWrapped();
                bool res = 
                    
                w->isNull(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isNull";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntity
    // Function: clear
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntity_Wrapper::clear
              (
                
              ) 
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntity* w = getWrapped();
                
                w->clear(
                  
                );
              
            return QJSValue();
          
  }

                  qWarning() << "no matching function variant found for clear";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntity
    // Function: toAttr
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntity_Wrapper::toAttr
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntity* w = getWrapped();
                QDomAttr res = 
                    
                w->toAttr(
                  
                );
              
            // return type: QDomAttr

            return RJSHelper::cpp2js_QDomAttr(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toAttr";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntity
    // Function: toCDATASection
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntity_Wrapper::toCDATASection
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntity* w = getWrapped();
                QDomCDATASection res = 
                    
                w->toCDATASection(
                  
                );
              
            // return type: QDomCDATASection

            return RJSHelper::cpp2js_QDomCDATASection(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toCDATASection";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntity
    // Function: toDocumentFragment
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntity_Wrapper::toDocumentFragment
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntity* w = getWrapped();
                QDomDocumentFragment res = 
                    
                w->toDocumentFragment(
                  
                );
              
            // return type: QDomDocumentFragment

            return RJSHelper::cpp2js_QDomDocumentFragment(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toDocumentFragment";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntity
    // Function: toDocument
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntity_Wrapper::toDocument
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntity* w = getWrapped();
                QDomDocument res = 
                    
                w->toDocument(
                  
                );
              
            // return type: QDomDocument

            return RJSHelper::cpp2js_QDomDocument(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toDocument";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntity
    // Function: toDocumentType
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntity_Wrapper::toDocumentType
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntity* w = getWrapped();
                QDomDocumentType res = 
                    
                w->toDocumentType(
                  
                );
              
            // return type: QDomDocumentType

            return RJSHelper::cpp2js_QDomDocumentType(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toDocumentType";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntity
    // Function: toElement
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntity_Wrapper::toElement
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntity* w = getWrapped();
                QDomElement res = 
                    
                w->toElement(
                  
                );
              
            // return type: QDomElement

            return RJSHelper::cpp2js_QDomElement(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toElement";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntity
    // Function: toEntityReference
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntity_Wrapper::toEntityReference
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntity* w = getWrapped();
                QDomEntityReference res = 
                    
                w->toEntityReference(
                  
                );
              
            // return type: QDomEntityReference

            return RJSHelper::cpp2js_QDomEntityReference(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toEntityReference";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntity
    // Function: toText
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntity_Wrapper::toText
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntity* w = getWrapped();
                QDomText res = 
                    
                w->toText(
                  
                );
              
            // return type: QDomText

            return RJSHelper::cpp2js_QDomText(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toText";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntity
    // Function: toEntity
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntity_Wrapper::toEntity
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntity* w = getWrapped();
                QDomEntity res = 
                    
                w->toEntity(
                  
                );
              
            // return type: QDomEntity

            return RJSHelper::cpp2js_QDomEntity(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toEntity";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntity
    // Function: toNotation
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntity_Wrapper::toNotation
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntity* w = getWrapped();
                QDomNotation res = 
                    
                w->toNotation(
                  
                );
              
            // return type: QDomNotation

            return RJSHelper::cpp2js_QDomNotation(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toNotation";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntity
    // Function: toProcessingInstruction
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntity_Wrapper::toProcessingInstruction
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntity* w = getWrapped();
                QDomProcessingInstruction res = 
                    
                w->toProcessingInstruction(
                  
                );
              
            // return type: QDomProcessingInstruction

            return RJSHelper::cpp2js_QDomProcessingInstruction(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toProcessingInstruction";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntity
    // Function: toCharacterData
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntity_Wrapper::toCharacterData
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntity* w = getWrapped();
                QDomCharacterData res = 
                    
                w->toCharacterData(
                  
                );
              
            // return type: QDomCharacterData

            return RJSHelper::cpp2js_QDomCharacterData(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toCharacterData";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntity
    // Function: toComment
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntity_Wrapper::toComment
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntity* w = getWrapped();
                QDomComment res = 
                    
                w->toComment(
                  
                );
              
            // return type: QDomComment

            return RJSHelper::cpp2js_QDomComment(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toComment";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntity
    // Function: firstChildElement
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomEntity_Wrapper::firstChildElement
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
    , true
  
  )

   && RJSHelper::is_QString(handler, a2
    , true
  
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: tagName (QString)
  
QString a1_cpp;

      
          if (a1.isUndefined()) {
            a1_cpp = QString();
          }
          else {
            a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
          }
        
  // convert js parameter to cpp: namespaceURI (QString)
  
QString a2_cpp;

      
          if (a2.isUndefined()) {
            a2_cpp = QString();
          }
          else {
            a2_cpp = RJSHelper::js2cpp_QString(handler, a2);
          }
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntity* w = getWrapped();
                QDomElement res = 
                    
                w->firstChildElement(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomElement

            return RJSHelper::cpp2js_QDomElement(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for firstChildElement";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntity
    // Function: lastChildElement
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomEntity_Wrapper::lastChildElement
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
    , true
  
  )

   && RJSHelper::is_QString(handler, a2
    , true
  
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: tagName (QString)
  
QString a1_cpp;

      
          if (a1.isUndefined()) {
            a1_cpp = QString();
          }
          else {
            a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
          }
        
  // convert js parameter to cpp: namespaceURI (QString)
  
QString a2_cpp;

      
          if (a2.isUndefined()) {
            a2_cpp = QString();
          }
          else {
            a2_cpp = RJSHelper::js2cpp_QString(handler, a2);
          }
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntity* w = getWrapped();
                QDomElement res = 
                    
                w->lastChildElement(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomElement

            return RJSHelper::cpp2js_QDomElement(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for lastChildElement";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntity
    // Function: previousSiblingElement
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomEntity_Wrapper::previousSiblingElement
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
    , true
  
  )

   && RJSHelper::is_QString(handler, a2
    , true
  
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: tagName (QString)
  
QString a1_cpp;

      
          if (a1.isUndefined()) {
            a1_cpp = QString();
          }
          else {
            a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
          }
        
  // convert js parameter to cpp: namespaceURI (QString)
  
QString a2_cpp;

      
          if (a2.isUndefined()) {
            a2_cpp = QString();
          }
          else {
            a2_cpp = RJSHelper::js2cpp_QString(handler, a2);
          }
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntity* w = getWrapped();
                QDomElement res = 
                    
                w->previousSiblingElement(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomElement

            return RJSHelper::cpp2js_QDomElement(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for previousSiblingElement";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntity
    // Function: nextSiblingElement
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomEntity_Wrapper::nextSiblingElement
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
    , true
  
  )

   && RJSHelper::is_QString(handler, a2
    , true
  
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: taName (QString)
  
QString a1_cpp;

      
          if (a1.isUndefined()) {
            a1_cpp = QString();
          }
          else {
            a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
          }
        
  // convert js parameter to cpp: namespaceURI (QString)
  
QString a2_cpp;

      
          if (a2.isUndefined()) {
            a2_cpp = QString();
          }
          else {
            a2_cpp = RJSHelper::js2cpp_QString(handler, a2);
          }
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntity* w = getWrapped();
                QDomElement res = 
                    
                w->nextSiblingElement(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomElement

            return RJSHelper::cpp2js_QDomElement(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for nextSiblingElement";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntity
    // Function: lineNumber
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntity_Wrapper::lineNumber
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntity* w = getWrapped();
                int res = 
                    
                w->lineNumber(
                  
                );
              
            // return type: int

            return RJSHelper::cpp2js_int(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for lineNumber";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntity
    // Function: columnNumber
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntity_Wrapper::columnNumber
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntity* w = getWrapped();
                int res = 
                    
                w->columnNumber(
                  
                );
              
            // return type: int

            return RJSHelper::cpp2js_int(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for columnNumber";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntity
    // Function: operator_assign
    // Source: 
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomEntity_Wrapper::operator_assign
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomEntity(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp:  (QDomEntity)
  
QDomEntity a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomEntity(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntity* w = getWrapped();
                
                      // return type is reference:
                      // use pointer instead 3:
                      QDomEntity* res =
                    &
                w->operator=(
                  a1_cpp
    
                );
              
            // return type: QDomEntity&

            return RJSHelper::cpp2js_QDomEntity(
              handler, 
              // non-copyable: false
                  // return type is reference, type is copyable:
                  // convert pointer back to reference:
                  *res
                
              );
            
  }

                  qWarning() << "no matching function variant found for operator_assign";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntity
    // Function: publicId
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntity_Wrapper::publicId
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntity* w = getWrapped();
                QString res = 
                    
                w->publicId(
                  
                );
              
            // return type: QString

            return RJSHelper::cpp2js_QString(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for publicId";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntity
    // Function: systemId
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntity_Wrapper::systemId
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntity* w = getWrapped();
                QString res = 
                    
                w->systemId(
                  
                );
              
            // return type: QString

            return RJSHelper::cpp2js_QString(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for systemId";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntity
    // Function: notationName
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntity_Wrapper::notationName
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntity* w = getWrapped();
                QString res = 
                    
                w->notationName(
                  
                );
              
            // return type: QString

            return RJSHelper::cpp2js_QString(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for notationName";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntity
    // Function: nodeType
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntity_Wrapper::nodeType
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntity* w = getWrapped();
                QDomNode::NodeType res = 
                    
                w->nodeType(
                  
                );
              
            // return type: QDomNode::NodeType

            return RJSHelper::cpp2js_QDomNode_NodeType(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for nodeType";
                  handler.trace();
                  return QJSValue();
                
              }
            

  // member functions for static properties, forward to static function
  


  // protected overwritten functions / events and their public invokable counterparts:
  
    #include "qdom_wrapper.h"

  
      // list of registered base casters for this wrapper class:
      QList<RJSBasecaster_QDomEntityReference*> QDomEntityReference_Wrapper::basecasters_QDomEntityReference;
    
    // static functions implementation in singleton wrapper:
    
    void QDomEntityReference_Wrapper::init(RJSApi& handler) {
      
        //qmlRegisterType<QDomEntityReference_Wrapper>("org.qcad", 1, 0, "QDomEntityReference_Wrapper");
        qmlRegisterInterface<QDomEntityReference_Wrapper>("QDomEntityReference_Wrapper", 1);
      

      QJSEngine* engine = handler.getEngine();

      
          // make type scriptable for JS files:
          QJSValue global = engine->globalObject();
          RJSType_QDomEntityReference* t = new RJSType_QDomEntityReference();
          global.setProperty("RJSType_QDomEntityReference", engine->newQObject(t));

          // initialize ID for this type:
          RJSType_QDomEntityReference::getIdStatic();

          

      // wrapper:
      QJSValue mo = engine->newQMetaObject(&QDomEntityReference_Wrapper::staticMetaObject);
      engine->globalObject().setProperty("QDomEntityReference_Wrapper", mo);


      
        // JS base class:
        //QJSValue mob = engine->newQMetaObject(&QDomEntityReference_BaseJs::staticMetaObject);
        //engine->globalObject().setProperty("QDomEntityReference_BaseJs", mob);
      
      QString fileName = ":generator/js/QDomEntityReference.js";
      QFile scriptFile(fileName);
      if (!scriptFile.open(QIODevice::ReadOnly)) {
        qWarning() << "JS script wrapper file not found:" << fileName;
        return;
      }
      QTextStream stream(&scriptFile);
      QString contents = stream.readAll();
      scriptFile.close();

      qDebug() << "Evaluating file: " << fileName;
      QJSValue result = engine->evaluate(contents, fileName);
      if (result.isError()) {
          qWarning()
              << "Uncaught exception at line"
              << result.property("lineNumber").toInt()
              << ":" << result.toString();
      }
    }
  
    /*
    // special constructor used as prototype:
    QDomEntityReference_Wrapper::QDomEntityReference_Wrapper(QJSEngine* e) : wrapped(nullptr), wrappedCreated(false) {
            //setObjectName("QDomEntityReference_Wrapper");
            setEngine(e);

            // signal forwarding:
            //initConnections();
          }
        
    */

    
      // special constructor to wrap existing object:
      QDomEntityReference_Wrapper::QDomEntityReference_Wrapper(RJSApi& h, QDomEntityReference* o, bool wrappedCreated) : RJSWrapperObj(h), wrapped(o), wrappedCreated(wrappedCreated) {
              //RDebug::incCounter(QString("QDomEntityReference_Wrapper_") + handler.getEngine()->objectName());
              //RDebug::incCounter(QString("QDomEntityReference_Wrapper"));
              //setObjectName("QDomEntityReference_Wrapper");
              //setHandler(h);

              // signal forwarding:
              initConnections();
            }
          

      // destructor:
      QDomEntityReference_Wrapper::~QDomEntityReference_Wrapper() {
            //RDebug::decCounter(QString("QDomEntityReference_Wrapper_") + handler.getEngine()->objectName());
            //RDebug::decCounter(QString("QDomEntityReference_Wrapper"));

            //qDebug() << "QDomEntityReference_Wrapper::~QDomEntityReference_Wrapper";

            // tell script handler that this wrapper no longer exists:
            handler.unregisterWrapper(*this);

            
            if (wrappedCreated) {
              
                  // delete wrapped object (copyable, JS ownership)
                  //qDebug() << "deleting instance of QDomEntityReference";
                  delete wrapped;
                
            }
            
          }
        
    // initialization of signal forwarding
    
        void QDomEntityReference_Wrapper::initConnections() {

          //setObjectName("QDomEntityReference_Wrapper");

          // tell script handler that this wrapper needs to be deleted if the engine is deleted:
          handler.registerWrapper(*this);

          
              // wrapped object is not a QObject:
              // wrapper is managed by script engine:
              //QJSEngine::setObjectOwnership(this, QJSEngine::CppOwnership);
            

          if (hasWrapped()) {
            
            // set up signal forwarding:
            
          }
        }
      

  // constructors:
  
    // Class: QDomEntityReference
    // Function: 
    // Source: 
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1
QDomEntityReference_Wrapper::QDomEntityReference_Wrapper
                
              (
                
                  // RJSApi:
                  QObject* h
                  ,
  const QJSValue& 
  a1
              ) 
              
                : RJSWrapperObj(*(RJSApi*)h)
              
              {
                
                  //RDebug::incCounter(QString("QDomEntityReference_Wrapper_") + handler.getEngine()->objectName());
                  //RDebug::incCounter(QString("QDomEntityReference_Wrapper"));
                
      // check parameter types:
      if (
        RJSHelper::is_QDomEntityReference(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: x (QDomEntityReference)
  
QDomEntityReference a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomEntityReference(handler, a1);
        

    // call function:
    
        // construct wrapper:

        
            wrapped = new QDomEntityReference(
                a1_cpp
    
            );
            wrappedCreated = true;
          

        // signal forwarding:
        // TODO
        //connect(wrapped, SIGNAL(triggered(bool)), this, SLOT(triggeredEmitter(bool)));
        initConnections();
        return;

      
  }

      {
    

    // call function:
    
        // construct wrapper:

        
            wrapped = new QDomEntityReference(
                
            );
            wrappedCreated = true;
          

        // signal forwarding:
        // TODO
        //connect(wrapped, SIGNAL(triggered(bool)), this, SLOT(triggeredEmitter(bool)));
        initConnections();
        return;

      
  }

                    // no constructor without arguments defined
                    // allow constructor for prototype objects without args:
                    if (
                      a1.isUndefined()
  
                      ) {
                      wrapped = nullptr;
                      wrappedCreated = false;
                      return;
                    }
                  

                  qWarning() << "no matching constructor variant found for QDomEntityReference";
                  wrapped = nullptr;
                  wrappedCreated = false;
                  handler.trace();
                
              }
            

    // non-static functions:
    
    // Class: QDomEntityReference
    // Function: operator_equal
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomEntityReference_Wrapper::operator_equal
              (
                
  const QJSValue& 
  a1
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp:  (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntityReference* w = getWrapped();
                bool res = 
                    
                w->operator==(
                  a1_cpp
    
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for operator_equal";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntityReference
    // Function: operator_unequal
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomEntityReference_Wrapper::operator_unequal
              (
                
  const QJSValue& 
  a1
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp:  (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntityReference* w = getWrapped();
                bool res = 
                    
                w->operator!=(
                  a1_cpp
    
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for operator_unequal";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntityReference
    // Function: insertBefore
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomEntityReference_Wrapper::insertBefore
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

   && RJSHelper::is_QDomNode(handler, a2
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: newChild (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        
  // convert js parameter to cpp: refChild (QDomNode)
  
QDomNode a2_cpp;

      a2_cpp = RJSHelper::js2cpp_QDomNode(handler, a2);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntityReference* w = getWrapped();
                QDomNode res = 
                    
                w->insertBefore(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for insertBefore";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntityReference
    // Function: insertAfter
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomEntityReference_Wrapper::insertAfter
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

   && RJSHelper::is_QDomNode(handler, a2
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: newChild (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        
  // convert js parameter to cpp: refChild (QDomNode)
  
QDomNode a2_cpp;

      a2_cpp = RJSHelper::js2cpp_QDomNode(handler, a2);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntityReference* w = getWrapped();
                QDomNode res = 
                    
                w->insertAfter(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for insertAfter";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntityReference
    // Function: replaceChild
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomEntityReference_Wrapper::replaceChild
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

   && RJSHelper::is_QDomNode(handler, a2
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: newChild (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        
  // convert js parameter to cpp: oldChild (QDomNode)
  
QDomNode a2_cpp;

      a2_cpp = RJSHelper::js2cpp_QDomNode(handler, a2);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntityReference* w = getWrapped();
                QDomNode res = 
                    
                w->replaceChild(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for replaceChild";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntityReference
    // Function: removeChild
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomEntityReference_Wrapper::removeChild
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: oldChild (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntityReference* w = getWrapped();
                QDomNode res = 
                    
                w->removeChild(
                  a1_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for removeChild";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntityReference
    // Function: appendChild
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomEntityReference_Wrapper::appendChild
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: newChild (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntityReference* w = getWrapped();
                QDomNode res = 
                    
                w->appendChild(
                  a1_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for appendChild";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntityReference
    // Function: hasChildNodes
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntityReference_Wrapper::hasChildNodes
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntityReference* w = getWrapped();
                bool res = 
                    
                w->hasChildNodes(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for hasChildNodes";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntityReference
    // Function: cloneNode
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomEntityReference_Wrapper::cloneNode
              (
                
  const QJSValue& 
  a1
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_bool(handler, a1
    , true
  
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: deep (bool)
  
bool a1_cpp;

      
          if (a1.isUndefined()) {
            a1_cpp = true;
          }
          else {
            a1_cpp = RJSHelper::js2cpp_bool(handler, a1);
          }
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntityReference* w = getWrapped();
                QDomNode res = 
                    
                w->cloneNode(
                  a1_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for cloneNode";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntityReference
    // Function: normalize
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntityReference_Wrapper::normalize
              (
                
              ) 
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntityReference* w = getWrapped();
                
                w->normalize(
                  
                );
              
            return QJSValue();
          
  }

                  qWarning() << "no matching function variant found for normalize";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntityReference
    // Function: isSupported
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomEntityReference_Wrapper::isSupported
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

   && RJSHelper::is_QString(handler, a2
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: feature (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        
  // convert js parameter to cpp: version (QString)
  
QString a2_cpp;

      a2_cpp = RJSHelper::js2cpp_QString(handler, a2);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntityReference* w = getWrapped();
                bool res = 
                    
                w->isSupported(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isSupported";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntityReference
    // Function: nodeName
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntityReference_Wrapper::nodeName
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntityReference* w = getWrapped();
                QString res = 
                    
                w->nodeName(
                  
                );
              
            // return type: QString

            return RJSHelper::cpp2js_QString(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for nodeName";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntityReference
    // Function: parentNode
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntityReference_Wrapper::parentNode
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntityReference* w = getWrapped();
                QDomNode res = 
                    
                w->parentNode(
                  
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for parentNode";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntityReference
    // Function: childNodes
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntityReference_Wrapper::childNodes
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntityReference* w = getWrapped();
                QDomNodeList res = 
                    
                w->childNodes(
                  
                );
              
            // return type: QDomNodeList

            return RJSHelper::cpp2js_QDomNodeList(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for childNodes";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntityReference
    // Function: firstChild
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntityReference_Wrapper::firstChild
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntityReference* w = getWrapped();
                QDomNode res = 
                    
                w->firstChild(
                  
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for firstChild";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntityReference
    // Function: lastChild
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntityReference_Wrapper::lastChild
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntityReference* w = getWrapped();
                QDomNode res = 
                    
                w->lastChild(
                  
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for lastChild";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntityReference
    // Function: previousSibling
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntityReference_Wrapper::previousSibling
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntityReference* w = getWrapped();
                QDomNode res = 
                    
                w->previousSibling(
                  
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for previousSibling";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntityReference
    // Function: nextSibling
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntityReference_Wrapper::nextSibling
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntityReference* w = getWrapped();
                QDomNode res = 
                    
                w->nextSibling(
                  
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for nextSibling";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntityReference
    // Function: attributes
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntityReference_Wrapper::attributes
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntityReference* w = getWrapped();
                QDomNamedNodeMap res = 
                    
                w->attributes(
                  
                );
              
            // return type: QDomNamedNodeMap

            return RJSHelper::cpp2js_QDomNamedNodeMap(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for attributes";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntityReference
    // Function: ownerDocument
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntityReference_Wrapper::ownerDocument
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntityReference* w = getWrapped();
                QDomDocument res = 
                    
                w->ownerDocument(
                  
                );
              
            // return type: QDomDocument

            return RJSHelper::cpp2js_QDomDocument(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for ownerDocument";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntityReference
    // Function: namespaceURI
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntityReference_Wrapper::namespaceURI
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntityReference* w = getWrapped();
                QString res = 
                    
                w->namespaceURI(
                  
                );
              
            // return type: QString

            return RJSHelper::cpp2js_QString(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for namespaceURI";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntityReference
    // Function: localName
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntityReference_Wrapper::localName
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntityReference* w = getWrapped();
                QString res = 
                    
                w->localName(
                  
                );
              
            // return type: QString

            return RJSHelper::cpp2js_QString(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for localName";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntityReference
    // Function: hasAttributes
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntityReference_Wrapper::hasAttributes
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntityReference* w = getWrapped();
                bool res = 
                    
                w->hasAttributes(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for hasAttributes";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntityReference
    // Function: nodeValue
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntityReference_Wrapper::nodeValue
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntityReference* w = getWrapped();
                QString res = 
                    
                w->nodeValue(
                  
                );
              
            // return type: QString

            return RJSHelper::cpp2js_QString(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for nodeValue";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntityReference
    // Function: setNodeValue
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomEntityReference_Wrapper::setNodeValue
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp:  (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntityReference* w = getWrapped();
                
                w->setNodeValue(
                  a1_cpp
    
                );
              
            return QJSValue();
          
  }

                  qWarning() << "no matching function variant found for setNodeValue";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntityReference
    // Function: prefix
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntityReference_Wrapper::prefix
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntityReference* w = getWrapped();
                QString res = 
                    
                w->prefix(
                  
                );
              
            // return type: QString

            return RJSHelper::cpp2js_QString(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for prefix";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntityReference
    // Function: setPrefix
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomEntityReference_Wrapper::setPrefix
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: pre (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntityReference* w = getWrapped();
                
                w->setPrefix(
                  a1_cpp
    
                );
              
            return QJSValue();
          
  }

                  qWarning() << "no matching function variant found for setPrefix";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntityReference
    // Function: isAttr
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntityReference_Wrapper::isAttr
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntityReference* w = getWrapped();
                bool res = 
                    
                w->isAttr(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isAttr";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntityReference
    // Function: isCDATASection
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntityReference_Wrapper::isCDATASection
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntityReference* w = getWrapped();
                bool res = 
                    
                w->isCDATASection(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isCDATASection";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntityReference
    // Function: isDocumentFragment
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntityReference_Wrapper::isDocumentFragment
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntityReference* w = getWrapped();
                bool res = 
                    
                w->isDocumentFragment(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isDocumentFragment";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntityReference
    // Function: isDocument
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntityReference_Wrapper::isDocument
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntityReference* w = getWrapped();
                bool res = 
                    
                w->isDocument(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isDocument";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntityReference
    // Function: isDocumentType
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntityReference_Wrapper::isDocumentType
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntityReference* w = getWrapped();
                bool res = 
                    
                w->isDocumentType(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isDocumentType";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntityReference
    // Function: isElement
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntityReference_Wrapper::isElement
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntityReference* w = getWrapped();
                bool res = 
                    
                w->isElement(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isElement";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntityReference
    // Function: isEntityReference
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntityReference_Wrapper::isEntityReference
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntityReference* w = getWrapped();
                bool res = 
                    
                w->isEntityReference(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isEntityReference";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntityReference
    // Function: isText
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntityReference_Wrapper::isText
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntityReference* w = getWrapped();
                bool res = 
                    
                w->isText(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isText";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntityReference
    // Function: isEntity
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntityReference_Wrapper::isEntity
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntityReference* w = getWrapped();
                bool res = 
                    
                w->isEntity(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isEntity";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntityReference
    // Function: isNotation
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntityReference_Wrapper::isNotation
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntityReference* w = getWrapped();
                bool res = 
                    
                w->isNotation(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isNotation";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntityReference
    // Function: isProcessingInstruction
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntityReference_Wrapper::isProcessingInstruction
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntityReference* w = getWrapped();
                bool res = 
                    
                w->isProcessingInstruction(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isProcessingInstruction";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntityReference
    // Function: isCharacterData
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntityReference_Wrapper::isCharacterData
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntityReference* w = getWrapped();
                bool res = 
                    
                w->isCharacterData(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isCharacterData";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntityReference
    // Function: isComment
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntityReference_Wrapper::isComment
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntityReference* w = getWrapped();
                bool res = 
                    
                w->isComment(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isComment";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntityReference
    // Function: namedItem
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomEntityReference_Wrapper::namedItem
              (
                
  const QJSValue& 
  a1
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: name (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntityReference* w = getWrapped();
                QDomNode res = 
                    
                w->namedItem(
                  a1_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for namedItem";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntityReference
    // Function: isNull
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntityReference_Wrapper::isNull
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntityReference* w = getWrapped();
                bool res = 
                    
                w->isNull(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isNull";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntityReference
    // Function: clear
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntityReference_Wrapper::clear
              (
                
              ) 
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntityReference* w = getWrapped();
                
                w->clear(
                  
                );
              
            return QJSValue();
          
  }

                  qWarning() << "no matching function variant found for clear";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntityReference
    // Function: toAttr
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntityReference_Wrapper::toAttr
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntityReference* w = getWrapped();
                QDomAttr res = 
                    
                w->toAttr(
                  
                );
              
            // return type: QDomAttr

            return RJSHelper::cpp2js_QDomAttr(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toAttr";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntityReference
    // Function: toCDATASection
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntityReference_Wrapper::toCDATASection
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntityReference* w = getWrapped();
                QDomCDATASection res = 
                    
                w->toCDATASection(
                  
                );
              
            // return type: QDomCDATASection

            return RJSHelper::cpp2js_QDomCDATASection(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toCDATASection";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntityReference
    // Function: toDocumentFragment
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntityReference_Wrapper::toDocumentFragment
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntityReference* w = getWrapped();
                QDomDocumentFragment res = 
                    
                w->toDocumentFragment(
                  
                );
              
            // return type: QDomDocumentFragment

            return RJSHelper::cpp2js_QDomDocumentFragment(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toDocumentFragment";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntityReference
    // Function: toDocument
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntityReference_Wrapper::toDocument
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntityReference* w = getWrapped();
                QDomDocument res = 
                    
                w->toDocument(
                  
                );
              
            // return type: QDomDocument

            return RJSHelper::cpp2js_QDomDocument(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toDocument";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntityReference
    // Function: toDocumentType
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntityReference_Wrapper::toDocumentType
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntityReference* w = getWrapped();
                QDomDocumentType res = 
                    
                w->toDocumentType(
                  
                );
              
            // return type: QDomDocumentType

            return RJSHelper::cpp2js_QDomDocumentType(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toDocumentType";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntityReference
    // Function: toElement
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntityReference_Wrapper::toElement
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntityReference* w = getWrapped();
                QDomElement res = 
                    
                w->toElement(
                  
                );
              
            // return type: QDomElement

            return RJSHelper::cpp2js_QDomElement(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toElement";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntityReference
    // Function: toEntityReference
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntityReference_Wrapper::toEntityReference
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntityReference* w = getWrapped();
                QDomEntityReference res = 
                    
                w->toEntityReference(
                  
                );
              
            // return type: QDomEntityReference

            return RJSHelper::cpp2js_QDomEntityReference(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toEntityReference";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntityReference
    // Function: toText
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntityReference_Wrapper::toText
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntityReference* w = getWrapped();
                QDomText res = 
                    
                w->toText(
                  
                );
              
            // return type: QDomText

            return RJSHelper::cpp2js_QDomText(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toText";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntityReference
    // Function: toEntity
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntityReference_Wrapper::toEntity
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntityReference* w = getWrapped();
                QDomEntity res = 
                    
                w->toEntity(
                  
                );
              
            // return type: QDomEntity

            return RJSHelper::cpp2js_QDomEntity(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toEntity";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntityReference
    // Function: toNotation
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntityReference_Wrapper::toNotation
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntityReference* w = getWrapped();
                QDomNotation res = 
                    
                w->toNotation(
                  
                );
              
            // return type: QDomNotation

            return RJSHelper::cpp2js_QDomNotation(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toNotation";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntityReference
    // Function: toProcessingInstruction
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntityReference_Wrapper::toProcessingInstruction
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntityReference* w = getWrapped();
                QDomProcessingInstruction res = 
                    
                w->toProcessingInstruction(
                  
                );
              
            // return type: QDomProcessingInstruction

            return RJSHelper::cpp2js_QDomProcessingInstruction(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toProcessingInstruction";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntityReference
    // Function: toCharacterData
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntityReference_Wrapper::toCharacterData
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntityReference* w = getWrapped();
                QDomCharacterData res = 
                    
                w->toCharacterData(
                  
                );
              
            // return type: QDomCharacterData

            return RJSHelper::cpp2js_QDomCharacterData(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toCharacterData";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntityReference
    // Function: toComment
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntityReference_Wrapper::toComment
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntityReference* w = getWrapped();
                QDomComment res = 
                    
                w->toComment(
                  
                );
              
            // return type: QDomComment

            return RJSHelper::cpp2js_QDomComment(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toComment";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntityReference
    // Function: firstChildElement
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomEntityReference_Wrapper::firstChildElement
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
    , true
  
  )

   && RJSHelper::is_QString(handler, a2
    , true
  
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: tagName (QString)
  
QString a1_cpp;

      
          if (a1.isUndefined()) {
            a1_cpp = QString();
          }
          else {
            a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
          }
        
  // convert js parameter to cpp: namespaceURI (QString)
  
QString a2_cpp;

      
          if (a2.isUndefined()) {
            a2_cpp = QString();
          }
          else {
            a2_cpp = RJSHelper::js2cpp_QString(handler, a2);
          }
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntityReference* w = getWrapped();
                QDomElement res = 
                    
                w->firstChildElement(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomElement

            return RJSHelper::cpp2js_QDomElement(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for firstChildElement";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntityReference
    // Function: lastChildElement
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomEntityReference_Wrapper::lastChildElement
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
    , true
  
  )

   && RJSHelper::is_QString(handler, a2
    , true
  
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: tagName (QString)
  
QString a1_cpp;

      
          if (a1.isUndefined()) {
            a1_cpp = QString();
          }
          else {
            a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
          }
        
  // convert js parameter to cpp: namespaceURI (QString)
  
QString a2_cpp;

      
          if (a2.isUndefined()) {
            a2_cpp = QString();
          }
          else {
            a2_cpp = RJSHelper::js2cpp_QString(handler, a2);
          }
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntityReference* w = getWrapped();
                QDomElement res = 
                    
                w->lastChildElement(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomElement

            return RJSHelper::cpp2js_QDomElement(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for lastChildElement";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntityReference
    // Function: previousSiblingElement
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomEntityReference_Wrapper::previousSiblingElement
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
    , true
  
  )

   && RJSHelper::is_QString(handler, a2
    , true
  
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: tagName (QString)
  
QString a1_cpp;

      
          if (a1.isUndefined()) {
            a1_cpp = QString();
          }
          else {
            a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
          }
        
  // convert js parameter to cpp: namespaceURI (QString)
  
QString a2_cpp;

      
          if (a2.isUndefined()) {
            a2_cpp = QString();
          }
          else {
            a2_cpp = RJSHelper::js2cpp_QString(handler, a2);
          }
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntityReference* w = getWrapped();
                QDomElement res = 
                    
                w->previousSiblingElement(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomElement

            return RJSHelper::cpp2js_QDomElement(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for previousSiblingElement";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntityReference
    // Function: nextSiblingElement
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomEntityReference_Wrapper::nextSiblingElement
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
    , true
  
  )

   && RJSHelper::is_QString(handler, a2
    , true
  
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: taName (QString)
  
QString a1_cpp;

      
          if (a1.isUndefined()) {
            a1_cpp = QString();
          }
          else {
            a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
          }
        
  // convert js parameter to cpp: namespaceURI (QString)
  
QString a2_cpp;

      
          if (a2.isUndefined()) {
            a2_cpp = QString();
          }
          else {
            a2_cpp = RJSHelper::js2cpp_QString(handler, a2);
          }
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntityReference* w = getWrapped();
                QDomElement res = 
                    
                w->nextSiblingElement(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomElement

            return RJSHelper::cpp2js_QDomElement(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for nextSiblingElement";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntityReference
    // Function: lineNumber
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntityReference_Wrapper::lineNumber
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntityReference* w = getWrapped();
                int res = 
                    
                w->lineNumber(
                  
                );
              
            // return type: int

            return RJSHelper::cpp2js_int(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for lineNumber";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntityReference
    // Function: columnNumber
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntityReference_Wrapper::columnNumber
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntityReference* w = getWrapped();
                int res = 
                    
                w->columnNumber(
                  
                );
              
            // return type: int

            return RJSHelper::cpp2js_int(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for columnNumber";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntityReference
    // Function: operator_assign
    // Source: 
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomEntityReference_Wrapper::operator_assign
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomEntityReference(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp:  (QDomEntityReference)
  
QDomEntityReference a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomEntityReference(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntityReference* w = getWrapped();
                
                      // return type is reference:
                      // use pointer instead 3:
                      QDomEntityReference* res =
                    &
                w->operator=(
                  a1_cpp
    
                );
              
            // return type: QDomEntityReference&

            return RJSHelper::cpp2js_QDomEntityReference(
              handler, 
              // non-copyable: false
                  // return type is reference, type is copyable:
                  // convert pointer back to reference:
                  *res
                
              );
            
  }

                  qWarning() << "no matching function variant found for operator_assign";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomEntityReference
    // Function: nodeType
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomEntityReference_Wrapper::nodeType
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomEntityReference* w = getWrapped();
                QDomNode::NodeType res = 
                    
                w->nodeType(
                  
                );
              
            // return type: QDomNode::NodeType

            return RJSHelper::cpp2js_QDomNode_NodeType(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for nodeType";
                  handler.trace();
                  return QJSValue();
                
              }
            

  // member functions for static properties, forward to static function
  


  // protected overwritten functions / events and their public invokable counterparts:
  
    #include "qdom_wrapper.h"

  
      // list of registered base casters for this wrapper class:
      QList<RJSBasecaster_QDomProcessingInstruction*> QDomProcessingInstruction_Wrapper::basecasters_QDomProcessingInstruction;
    
    // static functions implementation in singleton wrapper:
    
    void QDomProcessingInstruction_Wrapper::init(RJSApi& handler) {
      
        //qmlRegisterType<QDomProcessingInstruction_Wrapper>("org.qcad", 1, 0, "QDomProcessingInstruction_Wrapper");
        qmlRegisterInterface<QDomProcessingInstruction_Wrapper>("QDomProcessingInstruction_Wrapper", 1);
      

      QJSEngine* engine = handler.getEngine();

      
          // make type scriptable for JS files:
          QJSValue global = engine->globalObject();
          RJSType_QDomProcessingInstruction* t = new RJSType_QDomProcessingInstruction();
          global.setProperty("RJSType_QDomProcessingInstruction", engine->newQObject(t));

          // initialize ID for this type:
          RJSType_QDomProcessingInstruction::getIdStatic();

          

      // wrapper:
      QJSValue mo = engine->newQMetaObject(&QDomProcessingInstruction_Wrapper::staticMetaObject);
      engine->globalObject().setProperty("QDomProcessingInstruction_Wrapper", mo);


      
        // JS base class:
        //QJSValue mob = engine->newQMetaObject(&QDomProcessingInstruction_BaseJs::staticMetaObject);
        //engine->globalObject().setProperty("QDomProcessingInstruction_BaseJs", mob);
      
      QString fileName = ":generator/js/QDomProcessingInstruction.js";
      QFile scriptFile(fileName);
      if (!scriptFile.open(QIODevice::ReadOnly)) {
        qWarning() << "JS script wrapper file not found:" << fileName;
        return;
      }
      QTextStream stream(&scriptFile);
      QString contents = stream.readAll();
      scriptFile.close();

      qDebug() << "Evaluating file: " << fileName;
      QJSValue result = engine->evaluate(contents, fileName);
      if (result.isError()) {
          qWarning()
              << "Uncaught exception at line"
              << result.property("lineNumber").toInt()
              << ":" << result.toString();
      }
    }
  
    /*
    // special constructor used as prototype:
    QDomProcessingInstruction_Wrapper::QDomProcessingInstruction_Wrapper(QJSEngine* e) : wrapped(nullptr), wrappedCreated(false) {
            //setObjectName("QDomProcessingInstruction_Wrapper");
            setEngine(e);

            // signal forwarding:
            //initConnections();
          }
        
    */

    
      // special constructor to wrap existing object:
      QDomProcessingInstruction_Wrapper::QDomProcessingInstruction_Wrapper(RJSApi& h, QDomProcessingInstruction* o, bool wrappedCreated) : RJSWrapperObj(h), wrapped(o), wrappedCreated(wrappedCreated) {
              //RDebug::incCounter(QString("QDomProcessingInstruction_Wrapper_") + handler.getEngine()->objectName());
              //RDebug::incCounter(QString("QDomProcessingInstruction_Wrapper"));
              //setObjectName("QDomProcessingInstruction_Wrapper");
              //setHandler(h);

              // signal forwarding:
              initConnections();
            }
          

      // destructor:
      QDomProcessingInstruction_Wrapper::~QDomProcessingInstruction_Wrapper() {
            //RDebug::decCounter(QString("QDomProcessingInstruction_Wrapper_") + handler.getEngine()->objectName());
            //RDebug::decCounter(QString("QDomProcessingInstruction_Wrapper"));

            //qDebug() << "QDomProcessingInstruction_Wrapper::~QDomProcessingInstruction_Wrapper";

            // tell script handler that this wrapper no longer exists:
            handler.unregisterWrapper(*this);

            
            if (wrappedCreated) {
              
                  // delete wrapped object (copyable, JS ownership)
                  //qDebug() << "deleting instance of QDomProcessingInstruction";
                  delete wrapped;
                
            }
            
          }
        
    // initialization of signal forwarding
    
        void QDomProcessingInstruction_Wrapper::initConnections() {

          //setObjectName("QDomProcessingInstruction_Wrapper");

          // tell script handler that this wrapper needs to be deleted if the engine is deleted:
          handler.registerWrapper(*this);

          
              // wrapped object is not a QObject:
              // wrapper is managed by script engine:
              //QJSEngine::setObjectOwnership(this, QJSEngine::CppOwnership);
            

          if (hasWrapped()) {
            
            // set up signal forwarding:
            
          }
        }
      

  // constructors:
  
    // Class: QDomProcessingInstruction
    // Function: 
    // Source: 
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1
QDomProcessingInstruction_Wrapper::QDomProcessingInstruction_Wrapper
                
              (
                
                  // RJSApi:
                  QObject* h
                  ,
  const QJSValue& 
  a1
              ) 
              
                : RJSWrapperObj(*(RJSApi*)h)
              
              {
                
                  //RDebug::incCounter(QString("QDomProcessingInstruction_Wrapper_") + handler.getEngine()->objectName());
                  //RDebug::incCounter(QString("QDomProcessingInstruction_Wrapper"));
                
      // check parameter types:
      if (
        RJSHelper::is_QDomProcessingInstruction(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: x (QDomProcessingInstruction)
  
QDomProcessingInstruction a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomProcessingInstruction(handler, a1);
        

    // call function:
    
        // construct wrapper:

        
            wrapped = new QDomProcessingInstruction(
                a1_cpp
    
            );
            wrappedCreated = true;
          

        // signal forwarding:
        // TODO
        //connect(wrapped, SIGNAL(triggered(bool)), this, SLOT(triggeredEmitter(bool)));
        initConnections();
        return;

      
  }

      {
    

    // call function:
    
        // construct wrapper:

        
            wrapped = new QDomProcessingInstruction(
                
            );
            wrappedCreated = true;
          

        // signal forwarding:
        // TODO
        //connect(wrapped, SIGNAL(triggered(bool)), this, SLOT(triggeredEmitter(bool)));
        initConnections();
        return;

      
  }

                    // no constructor without arguments defined
                    // allow constructor for prototype objects without args:
                    if (
                      a1.isUndefined()
  
                      ) {
                      wrapped = nullptr;
                      wrappedCreated = false;
                      return;
                    }
                  

                  qWarning() << "no matching constructor variant found for QDomProcessingInstruction";
                  wrapped = nullptr;
                  wrappedCreated = false;
                  handler.trace();
                
              }
            

    // non-static functions:
    
    // Class: QDomProcessingInstruction
    // Function: operator_equal
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomProcessingInstruction_Wrapper::operator_equal
              (
                
  const QJSValue& 
  a1
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp:  (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomProcessingInstruction* w = getWrapped();
                bool res = 
                    
                w->operator==(
                  a1_cpp
    
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for operator_equal";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomProcessingInstruction
    // Function: operator_unequal
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomProcessingInstruction_Wrapper::operator_unequal
              (
                
  const QJSValue& 
  a1
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp:  (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomProcessingInstruction* w = getWrapped();
                bool res = 
                    
                w->operator!=(
                  a1_cpp
    
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for operator_unequal";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomProcessingInstruction
    // Function: insertBefore
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomProcessingInstruction_Wrapper::insertBefore
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

   && RJSHelper::is_QDomNode(handler, a2
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: newChild (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        
  // convert js parameter to cpp: refChild (QDomNode)
  
QDomNode a2_cpp;

      a2_cpp = RJSHelper::js2cpp_QDomNode(handler, a2);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomProcessingInstruction* w = getWrapped();
                QDomNode res = 
                    
                w->insertBefore(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for insertBefore";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomProcessingInstruction
    // Function: insertAfter
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomProcessingInstruction_Wrapper::insertAfter
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

   && RJSHelper::is_QDomNode(handler, a2
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: newChild (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        
  // convert js parameter to cpp: refChild (QDomNode)
  
QDomNode a2_cpp;

      a2_cpp = RJSHelper::js2cpp_QDomNode(handler, a2);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomProcessingInstruction* w = getWrapped();
                QDomNode res = 
                    
                w->insertAfter(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for insertAfter";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomProcessingInstruction
    // Function: replaceChild
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomProcessingInstruction_Wrapper::replaceChild
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

   && RJSHelper::is_QDomNode(handler, a2
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: newChild (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        
  // convert js parameter to cpp: oldChild (QDomNode)
  
QDomNode a2_cpp;

      a2_cpp = RJSHelper::js2cpp_QDomNode(handler, a2);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomProcessingInstruction* w = getWrapped();
                QDomNode res = 
                    
                w->replaceChild(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for replaceChild";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomProcessingInstruction
    // Function: removeChild
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomProcessingInstruction_Wrapper::removeChild
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: oldChild (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomProcessingInstruction* w = getWrapped();
                QDomNode res = 
                    
                w->removeChild(
                  a1_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for removeChild";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomProcessingInstruction
    // Function: appendChild
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomProcessingInstruction_Wrapper::appendChild
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomNode(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: newChild (QDomNode)
  
QDomNode a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomNode(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomProcessingInstruction* w = getWrapped();
                QDomNode res = 
                    
                w->appendChild(
                  a1_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for appendChild";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomProcessingInstruction
    // Function: hasChildNodes
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomProcessingInstruction_Wrapper::hasChildNodes
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomProcessingInstruction* w = getWrapped();
                bool res = 
                    
                w->hasChildNodes(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for hasChildNodes";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomProcessingInstruction
    // Function: cloneNode
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomProcessingInstruction_Wrapper::cloneNode
              (
                
  const QJSValue& 
  a1
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_bool(handler, a1
    , true
  
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: deep (bool)
  
bool a1_cpp;

      
          if (a1.isUndefined()) {
            a1_cpp = true;
          }
          else {
            a1_cpp = RJSHelper::js2cpp_bool(handler, a1);
          }
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomProcessingInstruction* w = getWrapped();
                QDomNode res = 
                    
                w->cloneNode(
                  a1_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for cloneNode";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomProcessingInstruction
    // Function: normalize
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomProcessingInstruction_Wrapper::normalize
              (
                
              ) 
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomProcessingInstruction* w = getWrapped();
                
                w->normalize(
                  
                );
              
            return QJSValue();
          
  }

                  qWarning() << "no matching function variant found for normalize";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomProcessingInstruction
    // Function: isSupported
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomProcessingInstruction_Wrapper::isSupported
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

   && RJSHelper::is_QString(handler, a2
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: feature (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        
  // convert js parameter to cpp: version (QString)
  
QString a2_cpp;

      a2_cpp = RJSHelper::js2cpp_QString(handler, a2);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomProcessingInstruction* w = getWrapped();
                bool res = 
                    
                w->isSupported(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isSupported";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomProcessingInstruction
    // Function: nodeName
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomProcessingInstruction_Wrapper::nodeName
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomProcessingInstruction* w = getWrapped();
                QString res = 
                    
                w->nodeName(
                  
                );
              
            // return type: QString

            return RJSHelper::cpp2js_QString(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for nodeName";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomProcessingInstruction
    // Function: parentNode
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomProcessingInstruction_Wrapper::parentNode
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomProcessingInstruction* w = getWrapped();
                QDomNode res = 
                    
                w->parentNode(
                  
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for parentNode";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomProcessingInstruction
    // Function: childNodes
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomProcessingInstruction_Wrapper::childNodes
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomProcessingInstruction* w = getWrapped();
                QDomNodeList res = 
                    
                w->childNodes(
                  
                );
              
            // return type: QDomNodeList

            return RJSHelper::cpp2js_QDomNodeList(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for childNodes";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomProcessingInstruction
    // Function: firstChild
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomProcessingInstruction_Wrapper::firstChild
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomProcessingInstruction* w = getWrapped();
                QDomNode res = 
                    
                w->firstChild(
                  
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for firstChild";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomProcessingInstruction
    // Function: lastChild
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomProcessingInstruction_Wrapper::lastChild
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomProcessingInstruction* w = getWrapped();
                QDomNode res = 
                    
                w->lastChild(
                  
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for lastChild";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomProcessingInstruction
    // Function: previousSibling
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomProcessingInstruction_Wrapper::previousSibling
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomProcessingInstruction* w = getWrapped();
                QDomNode res = 
                    
                w->previousSibling(
                  
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for previousSibling";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomProcessingInstruction
    // Function: nextSibling
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomProcessingInstruction_Wrapper::nextSibling
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomProcessingInstruction* w = getWrapped();
                QDomNode res = 
                    
                w->nextSibling(
                  
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for nextSibling";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomProcessingInstruction
    // Function: attributes
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomProcessingInstruction_Wrapper::attributes
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomProcessingInstruction* w = getWrapped();
                QDomNamedNodeMap res = 
                    
                w->attributes(
                  
                );
              
            // return type: QDomNamedNodeMap

            return RJSHelper::cpp2js_QDomNamedNodeMap(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for attributes";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomProcessingInstruction
    // Function: ownerDocument
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomProcessingInstruction_Wrapper::ownerDocument
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomProcessingInstruction* w = getWrapped();
                QDomDocument res = 
                    
                w->ownerDocument(
                  
                );
              
            // return type: QDomDocument

            return RJSHelper::cpp2js_QDomDocument(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for ownerDocument";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomProcessingInstruction
    // Function: namespaceURI
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomProcessingInstruction_Wrapper::namespaceURI
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomProcessingInstruction* w = getWrapped();
                QString res = 
                    
                w->namespaceURI(
                  
                );
              
            // return type: QString

            return RJSHelper::cpp2js_QString(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for namespaceURI";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomProcessingInstruction
    // Function: localName
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomProcessingInstruction_Wrapper::localName
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomProcessingInstruction* w = getWrapped();
                QString res = 
                    
                w->localName(
                  
                );
              
            // return type: QString

            return RJSHelper::cpp2js_QString(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for localName";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomProcessingInstruction
    // Function: hasAttributes
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomProcessingInstruction_Wrapper::hasAttributes
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomProcessingInstruction* w = getWrapped();
                bool res = 
                    
                w->hasAttributes(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for hasAttributes";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomProcessingInstruction
    // Function: nodeValue
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomProcessingInstruction_Wrapper::nodeValue
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomProcessingInstruction* w = getWrapped();
                QString res = 
                    
                w->nodeValue(
                  
                );
              
            // return type: QString

            return RJSHelper::cpp2js_QString(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for nodeValue";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomProcessingInstruction
    // Function: setNodeValue
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomProcessingInstruction_Wrapper::setNodeValue
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp:  (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomProcessingInstruction* w = getWrapped();
                
                w->setNodeValue(
                  a1_cpp
    
                );
              
            return QJSValue();
          
  }

                  qWarning() << "no matching function variant found for setNodeValue";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomProcessingInstruction
    // Function: prefix
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomProcessingInstruction_Wrapper::prefix
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomProcessingInstruction* w = getWrapped();
                QString res = 
                    
                w->prefix(
                  
                );
              
            // return type: QString

            return RJSHelper::cpp2js_QString(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for prefix";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomProcessingInstruction
    // Function: setPrefix
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomProcessingInstruction_Wrapper::setPrefix
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: pre (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomProcessingInstruction* w = getWrapped();
                
                w->setPrefix(
                  a1_cpp
    
                );
              
            return QJSValue();
          
  }

                  qWarning() << "no matching function variant found for setPrefix";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomProcessingInstruction
    // Function: isAttr
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomProcessingInstruction_Wrapper::isAttr
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomProcessingInstruction* w = getWrapped();
                bool res = 
                    
                w->isAttr(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isAttr";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomProcessingInstruction
    // Function: isCDATASection
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomProcessingInstruction_Wrapper::isCDATASection
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomProcessingInstruction* w = getWrapped();
                bool res = 
                    
                w->isCDATASection(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isCDATASection";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomProcessingInstruction
    // Function: isDocumentFragment
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomProcessingInstruction_Wrapper::isDocumentFragment
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomProcessingInstruction* w = getWrapped();
                bool res = 
                    
                w->isDocumentFragment(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isDocumentFragment";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomProcessingInstruction
    // Function: isDocument
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomProcessingInstruction_Wrapper::isDocument
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomProcessingInstruction* w = getWrapped();
                bool res = 
                    
                w->isDocument(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isDocument";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomProcessingInstruction
    // Function: isDocumentType
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomProcessingInstruction_Wrapper::isDocumentType
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomProcessingInstruction* w = getWrapped();
                bool res = 
                    
                w->isDocumentType(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isDocumentType";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomProcessingInstruction
    // Function: isElement
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomProcessingInstruction_Wrapper::isElement
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomProcessingInstruction* w = getWrapped();
                bool res = 
                    
                w->isElement(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isElement";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomProcessingInstruction
    // Function: isEntityReference
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomProcessingInstruction_Wrapper::isEntityReference
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomProcessingInstruction* w = getWrapped();
                bool res = 
                    
                w->isEntityReference(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isEntityReference";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomProcessingInstruction
    // Function: isText
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomProcessingInstruction_Wrapper::isText
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomProcessingInstruction* w = getWrapped();
                bool res = 
                    
                w->isText(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isText";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomProcessingInstruction
    // Function: isEntity
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomProcessingInstruction_Wrapper::isEntity
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomProcessingInstruction* w = getWrapped();
                bool res = 
                    
                w->isEntity(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isEntity";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomProcessingInstruction
    // Function: isNotation
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomProcessingInstruction_Wrapper::isNotation
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomProcessingInstruction* w = getWrapped();
                bool res = 
                    
                w->isNotation(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isNotation";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomProcessingInstruction
    // Function: isProcessingInstruction
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomProcessingInstruction_Wrapper::isProcessingInstruction
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomProcessingInstruction* w = getWrapped();
                bool res = 
                    
                w->isProcessingInstruction(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isProcessingInstruction";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomProcessingInstruction
    // Function: isCharacterData
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomProcessingInstruction_Wrapper::isCharacterData
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomProcessingInstruction* w = getWrapped();
                bool res = 
                    
                w->isCharacterData(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isCharacterData";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomProcessingInstruction
    // Function: isComment
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomProcessingInstruction_Wrapper::isComment
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomProcessingInstruction* w = getWrapped();
                bool res = 
                    
                w->isComment(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isComment";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomProcessingInstruction
    // Function: namedItem
    // Source: QDomNode
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomProcessingInstruction_Wrapper::namedItem
              (
                
  const QJSValue& 
  a1
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: name (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomProcessingInstruction* w = getWrapped();
                QDomNode res = 
                    
                w->namedItem(
                  a1_cpp
    
                );
              
            // return type: QDomNode

            return RJSHelper::cpp2js_QDomNode(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for namedItem";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomProcessingInstruction
    // Function: isNull
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomProcessingInstruction_Wrapper::isNull
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomProcessingInstruction* w = getWrapped();
                bool res = 
                    
                w->isNull(
                  
                );
              
            // return type: bool

            return RJSHelper::cpp2js_bool(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for isNull";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomProcessingInstruction
    // Function: clear
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomProcessingInstruction_Wrapper::clear
              (
                
              ) 
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomProcessingInstruction* w = getWrapped();
                
                w->clear(
                  
                );
              
            return QJSValue();
          
  }

                  qWarning() << "no matching function variant found for clear";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomProcessingInstruction
    // Function: toAttr
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomProcessingInstruction_Wrapper::toAttr
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomProcessingInstruction* w = getWrapped();
                QDomAttr res = 
                    
                w->toAttr(
                  
                );
              
            // return type: QDomAttr

            return RJSHelper::cpp2js_QDomAttr(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toAttr";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomProcessingInstruction
    // Function: toCDATASection
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomProcessingInstruction_Wrapper::toCDATASection
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomProcessingInstruction* w = getWrapped();
                QDomCDATASection res = 
                    
                w->toCDATASection(
                  
                );
              
            // return type: QDomCDATASection

            return RJSHelper::cpp2js_QDomCDATASection(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toCDATASection";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomProcessingInstruction
    // Function: toDocumentFragment
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomProcessingInstruction_Wrapper::toDocumentFragment
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomProcessingInstruction* w = getWrapped();
                QDomDocumentFragment res = 
                    
                w->toDocumentFragment(
                  
                );
              
            // return type: QDomDocumentFragment

            return RJSHelper::cpp2js_QDomDocumentFragment(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toDocumentFragment";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomProcessingInstruction
    // Function: toDocument
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomProcessingInstruction_Wrapper::toDocument
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomProcessingInstruction* w = getWrapped();
                QDomDocument res = 
                    
                w->toDocument(
                  
                );
              
            // return type: QDomDocument

            return RJSHelper::cpp2js_QDomDocument(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toDocument";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomProcessingInstruction
    // Function: toDocumentType
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomProcessingInstruction_Wrapper::toDocumentType
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomProcessingInstruction* w = getWrapped();
                QDomDocumentType res = 
                    
                w->toDocumentType(
                  
                );
              
            // return type: QDomDocumentType

            return RJSHelper::cpp2js_QDomDocumentType(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toDocumentType";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomProcessingInstruction
    // Function: toElement
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomProcessingInstruction_Wrapper::toElement
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomProcessingInstruction* w = getWrapped();
                QDomElement res = 
                    
                w->toElement(
                  
                );
              
            // return type: QDomElement

            return RJSHelper::cpp2js_QDomElement(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toElement";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomProcessingInstruction
    // Function: toEntityReference
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomProcessingInstruction_Wrapper::toEntityReference
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomProcessingInstruction* w = getWrapped();
                QDomEntityReference res = 
                    
                w->toEntityReference(
                  
                );
              
            // return type: QDomEntityReference

            return RJSHelper::cpp2js_QDomEntityReference(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toEntityReference";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomProcessingInstruction
    // Function: toText
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomProcessingInstruction_Wrapper::toText
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomProcessingInstruction* w = getWrapped();
                QDomText res = 
                    
                w->toText(
                  
                );
              
            // return type: QDomText

            return RJSHelper::cpp2js_QDomText(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toText";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomProcessingInstruction
    // Function: toEntity
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomProcessingInstruction_Wrapper::toEntity
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomProcessingInstruction* w = getWrapped();
                QDomEntity res = 
                    
                w->toEntity(
                  
                );
              
            // return type: QDomEntity

            return RJSHelper::cpp2js_QDomEntity(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toEntity";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomProcessingInstruction
    // Function: toNotation
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomProcessingInstruction_Wrapper::toNotation
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomProcessingInstruction* w = getWrapped();
                QDomNotation res = 
                    
                w->toNotation(
                  
                );
              
            // return type: QDomNotation

            return RJSHelper::cpp2js_QDomNotation(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toNotation";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomProcessingInstruction
    // Function: toProcessingInstruction
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomProcessingInstruction_Wrapper::toProcessingInstruction
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomProcessingInstruction* w = getWrapped();
                QDomProcessingInstruction res = 
                    
                w->toProcessingInstruction(
                  
                );
              
            // return type: QDomProcessingInstruction

            return RJSHelper::cpp2js_QDomProcessingInstruction(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toProcessingInstruction";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomProcessingInstruction
    // Function: toCharacterData
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomProcessingInstruction_Wrapper::toCharacterData
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomProcessingInstruction* w = getWrapped();
                QDomCharacterData res = 
                    
                w->toCharacterData(
                  
                );
              
            // return type: QDomCharacterData

            return RJSHelper::cpp2js_QDomCharacterData(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toCharacterData";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomProcessingInstruction
    // Function: toComment
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomProcessingInstruction_Wrapper::toComment
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomProcessingInstruction* w = getWrapped();
                QDomComment res = 
                    
                w->toComment(
                  
                );
              
            // return type: QDomComment

            return RJSHelper::cpp2js_QDomComment(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for toComment";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomProcessingInstruction
    // Function: firstChildElement
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomProcessingInstruction_Wrapper::firstChildElement
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
    , true
  
  )

   && RJSHelper::is_QString(handler, a2
    , true
  
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: tagName (QString)
  
QString a1_cpp;

      
          if (a1.isUndefined()) {
            a1_cpp = QString();
          }
          else {
            a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
          }
        
  // convert js parameter to cpp: namespaceURI (QString)
  
QString a2_cpp;

      
          if (a2.isUndefined()) {
            a2_cpp = QString();
          }
          else {
            a2_cpp = RJSHelper::js2cpp_QString(handler, a2);
          }
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomProcessingInstruction* w = getWrapped();
                QDomElement res = 
                    
                w->firstChildElement(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomElement

            return RJSHelper::cpp2js_QDomElement(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for firstChildElement";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomProcessingInstruction
    // Function: lastChildElement
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomProcessingInstruction_Wrapper::lastChildElement
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
    , true
  
  )

   && RJSHelper::is_QString(handler, a2
    , true
  
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: tagName (QString)
  
QString a1_cpp;

      
          if (a1.isUndefined()) {
            a1_cpp = QString();
          }
          else {
            a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
          }
        
  // convert js parameter to cpp: namespaceURI (QString)
  
QString a2_cpp;

      
          if (a2.isUndefined()) {
            a2_cpp = QString();
          }
          else {
            a2_cpp = RJSHelper::js2cpp_QString(handler, a2);
          }
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomProcessingInstruction* w = getWrapped();
                QDomElement res = 
                    
                w->lastChildElement(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomElement

            return RJSHelper::cpp2js_QDomElement(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for lastChildElement";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomProcessingInstruction
    // Function: previousSiblingElement
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomProcessingInstruction_Wrapper::previousSiblingElement
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
    , true
  
  )

   && RJSHelper::is_QString(handler, a2
    , true
  
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: tagName (QString)
  
QString a1_cpp;

      
          if (a1.isUndefined()) {
            a1_cpp = QString();
          }
          else {
            a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
          }
        
  // convert js parameter to cpp: namespaceURI (QString)
  
QString a2_cpp;

      
          if (a2.isUndefined()) {
            a2_cpp = QString();
          }
          else {
            a2_cpp = RJSHelper::js2cpp_QString(handler, a2);
          }
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomProcessingInstruction* w = getWrapped();
                QDomElement res = 
                    
                w->previousSiblingElement(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomElement

            return RJSHelper::cpp2js_QDomElement(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for previousSiblingElement";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomProcessingInstruction
    // Function: nextSiblingElement
    // Source: QDomNode
    // Static: false
    // Parameters: 2
    // preceding Parameters: -1

                QJSValue 
              QDomProcessingInstruction_Wrapper::nextSiblingElement
              (
                
  const QJSValue& 
  a1, 
  const QJSValue& 
  a2
              ) 
              
                const
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
    , true
  
  )

   && RJSHelper::is_QString(handler, a2
    , true
  
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: taName (QString)
  
QString a1_cpp;

      
          if (a1.isUndefined()) {
            a1_cpp = QString();
          }
          else {
            a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
          }
        
  // convert js parameter to cpp: namespaceURI (QString)
  
QString a2_cpp;

      
          if (a2.isUndefined()) {
            a2_cpp = QString();
          }
          else {
            a2_cpp = RJSHelper::js2cpp_QString(handler, a2);
          }
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomProcessingInstruction* w = getWrapped();
                QDomElement res = 
                    
                w->nextSiblingElement(
                  a1_cpp
    , a2_cpp
    
                );
              
            // return type: QDomElement

            return RJSHelper::cpp2js_QDomElement(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for nextSiblingElement";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomProcessingInstruction
    // Function: lineNumber
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomProcessingInstruction_Wrapper::lineNumber
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomProcessingInstruction* w = getWrapped();
                int res = 
                    
                w->lineNumber(
                  
                );
              
            // return type: int

            return RJSHelper::cpp2js_int(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for lineNumber";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomProcessingInstruction
    // Function: columnNumber
    // Source: QDomNode
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomProcessingInstruction_Wrapper::columnNumber
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomProcessingInstruction* w = getWrapped();
                int res = 
                    
                w->columnNumber(
                  
                );
              
            // return type: int

            return RJSHelper::cpp2js_int(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for columnNumber";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomProcessingInstruction
    // Function: operator_assign
    // Source: 
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomProcessingInstruction_Wrapper::operator_assign
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QDomProcessingInstruction(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp:  (QDomProcessingInstruction)
  
QDomProcessingInstruction a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QDomProcessingInstruction(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomProcessingInstruction* w = getWrapped();
                
                      // return type is reference:
                      // use pointer instead 3:
                      QDomProcessingInstruction* res =
                    &
                w->operator=(
                  a1_cpp
    
                );
              
            // return type: QDomProcessingInstruction&

            return RJSHelper::cpp2js_QDomProcessingInstruction(
              handler, 
              // non-copyable: false
                  // return type is reference, type is copyable:
                  // convert pointer back to reference:
                  *res
                
              );
            
  }

                  qWarning() << "no matching function variant found for operator_assign";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomProcessingInstruction
    // Function: target
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomProcessingInstruction_Wrapper::target
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomProcessingInstruction* w = getWrapped();
                QString res = 
                    
                w->target(
                  
                );
              
            // return type: QString

            return RJSHelper::cpp2js_QString(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for target";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomProcessingInstruction
    // Function: data
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomProcessingInstruction_Wrapper::data
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomProcessingInstruction* w = getWrapped();
                QString res = 
                    
                w->data(
                  
                );
              
            // return type: QString

            return RJSHelper::cpp2js_QString(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for data";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomProcessingInstruction
    // Function: setData
    // Source: 
    // Static: false
    // Parameters: 1
    // preceding Parameters: -1

                QJSValue 
              QDomProcessingInstruction_Wrapper::setData
              (
                
  const QJSValue& 
  a1
              ) 
              
              {
                
      // check parameter types:
      if (
        RJSHelper::is_QString(handler, a1
  )

  
      ) {
    
      // prepare parameters:
    
  // convert js parameter to cpp: d (QString)
  
QString a1_cpp;

      a1_cpp = RJSHelper::js2cpp_QString(handler, a1);
        

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomProcessingInstruction* w = getWrapped();
                
                w->setData(
                  a1_cpp
    
                );
              
            return QJSValue();
          
  }

                  qWarning() << "no matching function variant found for setData";
                  handler.trace();
                  return QJSValue();
                
              }
            
    // Class: QDomProcessingInstruction
    // Function: nodeType
    // Source: 
    // Static: false
    // Parameters: 0
    // preceding Parameters: -1

                QJSValue 
              QDomProcessingInstruction_Wrapper::nodeType
              (
                
              ) 
              
                const
              
              {
                
      {
    

    // call function:
    
          if (!hasWrapped()) {
            qWarning() << "wrapped is NULL";
            handler.trace();
            return QJSValue();
          }

          
            // non-static member function:
            // call function of wrapped object:
            
                // call function of C++ class:
                QDomProcessingInstruction* w = getWrapped();
                QDomNode::NodeType res = 
                    
                w->nodeType(
                  
                );
              
            // return type: QDomNode::NodeType

            return RJSHelper::cpp2js_QDomNode_NodeType(
              handler, 
              // non-copyable: false
                  res
                
              );
            
  }

                  qWarning() << "no matching function variant found for nodeType";
                  handler.trace();
                  return QJSValue();
                
              }
            

  // member functions for static properties, forward to static function
  


  // protected overwritten functions / events and their public invokable counterparts:
  
    #include "moc_qdom_wrapper.cpp"
  
